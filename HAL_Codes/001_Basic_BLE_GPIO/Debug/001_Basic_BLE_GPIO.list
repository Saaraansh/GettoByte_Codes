
001_Basic_BLE_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c998  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e14  0800cad8  0800cad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  0800d8fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000008c  0800d984  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  20000128  0800da1d  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000168  0800da5a  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 0000008e  2000017c  0800da6b  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000015cc  2000020c  0800daf9  0002020c  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200017d8  0800daf9  000217d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00032a33  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000689c  00000000  00000000  00052c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002aa0  00000000  00000000  00059510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000027d0  00000000  00000000  0005bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002e446  00000000  00000000  0005e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002fc95  00000000  00000000  0008cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000fb96f  00000000  00000000  000bc85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b81ca  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b974  00000000  00000000  001b821c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000020c 	.word	0x2000020c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cac0 	.word	0x0800cac0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000210 	.word	0x20000210
 800017c:	0800cac0 	.word	0x0800cac0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 800053e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58000800 	.word	0x58000800

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005ca:	f002 fb1d 	bl	8002c08 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ce:	f002 fb21 	bl	8002c14 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d6:	f7ff ffad 	bl	8000534 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005da:	f009 f801 	bl	80095e0 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005de:	f000 f821 	bl	8000624 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005e2:	f000 f8c3 	bl	800076c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e6:	bf00      	nop
}
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <APPD_EnableCPU2+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800060a:	f008 fefd 	bl	8009408 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f008 f998 	bl	8008946 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000616:	bf00      	nop
}
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	0800cad8 	.word	0x0800cad8

08000624 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	e038      	b.n	80006bc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	4a44      	ldr	r2, [pc, #272]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02b      	beq.n	80006b0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800065c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01b      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x7a>
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d823      	bhi.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
 800066c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000670:	d003      	beq.n	800067a <APPD_SetCPU2GpioConfig+0x56>
 8000672:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d009      	beq.n	800068c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000678:	e01c      	b.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	4313      	orrs	r3, r2
 8000688:	83bb      	strh	r3, [r7, #28]
          break;
 800068a:	e014      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4313      	orrs	r3, r2
 800069a:	837b      	strh	r3, [r7, #26]
          break;
 800069c:	e00b      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	833b      	strh	r3, [r7, #24]
          break;
 80006ae:	e002      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006b4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77fb      	strb	r3, [r7, #31]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d9c3      	bls.n	800064a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3f 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff55 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f002 ff64 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f003 f8e5 	bl	80038c8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006fe:	8b7b      	ldrh	r3, [r7, #26]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d012      	beq.n	800072a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000704:	8b7b      	ldrh	r3, [r7, #26]
 8000706:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff27 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff3d 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f002 ff4d 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000726:	f003 f8cf 	bl	80038c8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d013      	beq.n	8000758 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000730:	8b3b      	ldrh	r3, [r7, #24]
 8000732:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff ff11 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff27 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f002 ff37 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000752:	f003 f8b9 	bl	80038c8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000756:	bf00      	nop
 8000758:	bf00      	nop
}
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0800d570 	.word	0x0800d570
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400

0800076c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000770:	bf00      	nop
}
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800077e:	f001 fd65 	bl	800224c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000782:	bf00      	nop
}
 8000784:	bd80      	pop	{r7, pc}

08000786 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000794:	897a      	ldrh	r2, [r7, #10]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fb20 	bl	8001de0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	f023 0207 	bic.w	r2, r3, #7
 80007ba:	4905      	ldr	r1, [pc, #20]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58000400 	.word	0x58000400

080007d4 <LL_EXTI_EnableIT_32_63>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	58000800 	.word	0x58000800

080007fc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800080a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000816:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	cafecafe 	.word	0xcafecafe

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008b8:	d101      	bne.n	80008be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008de:	d101      	bne.n	80008e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB3_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_DBGMCU_GetRevisionID+0x18>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	b29b      	uxth	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e0042000 	.word	0xe0042000

08000940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	605a      	str	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0e:	f023 0304 	bic.w	r3, r3, #4
 8000a12:	6113      	str	r3, [r2, #16]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	22ca      	movs	r2, #202	; 0xca
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2253      	movs	r2, #83	; 0x53
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f023 0207 	bic.w	r2, r3, #7
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <MX_APPE_Config>:
static void Led_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <MX_APPE_Config+0x18>)
 8000a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a8e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000a90:	f000 f82a 	bl	8000ae8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a94:	f000 f86a 	bl	8000b6c <Config_HSE>

  return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58004000 	.word	0x58004000

08000aa0 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000aa4:	f000 f876 	bl	8000b94 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000aa8:	f000 f88e 	bl	8000bc8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000aac:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <MX_APPE_Init+0x28>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 ff14 	bl	80018dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

  APPD_Init();
 8000ab4:	f7ff fd87 	bl	80005c6 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f00a fd3e 	bl	800b53c <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ac0:	f000 f890 	bl	8000be4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ac4:	bf00      	nop
}
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000274 	.word	0x20000274

08000acc <Init_Smps>:

void Init_Smps( void )
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000ad0:	bf00      	nop
}
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <Init_Exti>:

void Init_Exti( void )
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fe78 	bl	80007d4 <LL_EXTI_EnableIT_32_63>

  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000aec:	f000 f804 	bl	8000af8 <Reset_BackupDomain>

  Reset_IPCC();
 8000af0:	f000 f81a 	bl	8000b28 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000af4:	bf00      	nop
}
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000afc:	f7ff fed2 	bl	80008a4 <LL_RCC_IsActiveFlag_PINRST>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00d      	beq.n	8000b22 <Reset_BackupDomain+0x2a>
 8000b06:	f7ff fee0 	bl	80008ca <LL_RCC_IsActiveFlag_SFTRST>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b10:	f003 f8ac 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b14:	f003 f8aa 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b18:	f7ff fea2 	bl	8000860 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b1c:	f7ff feb1 	bl	8000882 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
}
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b30:	f7ff fede 	bl	80008f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <Reset_IPCC+0x40>)
 8000b38:	f7ff ff48 	bl	80009cc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff52 	bl	80009e8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <Reset_IPCC+0x40>)
 8000b48:	f7ff fefa 	bl	8000940 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <Reset_IPCC+0x40>)
 8000b50:	f7ff ff19 	bl	8000986 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b54:	213f      	movs	r1, #63	; 0x3f
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <Reset_IPCC+0x40>)
 8000b58:	f7ff ff04 	bl	8000964 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b5c:	213f      	movs	r1, #63	; 0x3f
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <Reset_IPCC+0x40>)
 8000b60:	f7ff ff23 	bl	80009aa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b64:	bf00      	nop
}
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	58000c00 	.word	0x58000c00

08000b6c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f008 fdb2 	bl	80096dc <OTP_Read>
 8000b78:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	799b      	ldrb	r3, [r3, #6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe39 	bl	80007fc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
}
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <System_Init>:

static void System_Init( void )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000b98:	f7ff ff98 	bl	8000acc <Init_Smps>

  Init_Exti( );
 8000b9c:	f7ff ff9d 	bl	8000ada <Init_Exti>

  Init_Rtc( );
 8000ba0:	f000 f802 	bl	8000ba8 <Init_Rtc>

  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bae:	f7ff ff46 	bl	8000a3e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bb6:	f7ff ff52 	bl	8000a5e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bbc:	f7ff ff32 	bl	8000a24 <LL_RTC_EnableWriteProtection>

  return;
 8000bc0:	bf00      	nop
}
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bd0:	f7ff fe32 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bd4:	f00a fca0 	bl	800b518 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f7ff fde5 	bl	80007a8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000bde:	bf00      	nop
}
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bea:	f008 fa57 	bl	800909c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <appe_Tl_Init+0x50>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f00a fdbc 	bl	800b770 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <appe_Tl_Init+0x54>)
 8000bfa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <appe_Tl_Init+0x58>)
 8000bfe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	480e      	ldr	r0, [pc, #56]	; (8000c40 <appe_Tl_Init+0x5c>)
 8000c06:	f008 f90f 	bl	8008e28 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <appe_Tl_Init+0x60>)
 8000c0c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <appe_Tl_Init+0x64>)
 8000c10:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <appe_Tl_Init+0x68>)
 8000c14:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c16:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c1a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f008 fb7d 	bl	8009320 <TL_MM_Init>

  TL_Enable();
 8000c26:	f008 fa33 	bl	8009090 <TL_Enable>

  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	08008e61 	.word	0x08008e61
 8000c38:	20030724 	.word	0x20030724
 8000c3c:	08000c51 	.word	0x08000c51
 8000c40:	08000c69 	.word	0x08000c69
 8000c44:	2003093c 	.word	0x2003093c
 8000c48:	20030830 	.word	0x20030830
 8000c4c:	200301e8 	.word	0x200301e8

08000c50 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c5a:	bf00      	nop
}
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	330b      	adds	r3, #11
 8000c76:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fe8f 	bl	80089a0 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c82:	485e      	ldr	r0, [pc, #376]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000c84:	f008 fc4c 	bl	8009520 <DbgTraceGetFileName>
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f240 136d 	movw	r3, #365	; 0x16d
 8000c8e:	4a5c      	ldr	r2, [pc, #368]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000c90:	485c      	ldr	r0, [pc, #368]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000c92:	f00a fef1 	bl	800ba78 <iprintf>
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	4859      	ldr	r0, [pc, #356]	; (8000e08 <APPE_SysUserEvtRx+0x1a0>)
 8000ca2:	f00a fee9 	bl	800ba78 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000ca6:	4855      	ldr	r0, [pc, #340]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000ca8:	f008 fc3a 	bl	8009520 <DbgTraceGetFileName>
 8000cac:	4601      	mov	r1, r0
 8000cae:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000cb2:	4a53      	ldr	r2, [pc, #332]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000cb4:	4853      	ldr	r0, [pc, #332]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000cb6:	f00a fedf 	bl	800ba78 <iprintf>
 8000cba:	7c3b      	ldrb	r3, [r7, #16]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4853      	ldr	r0, [pc, #332]	; (8000e0c <APPE_SysUserEvtRx+0x1a4>)
 8000cc0:	f00a feda 	bl	800ba78 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000cc4:	484d      	ldr	r0, [pc, #308]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000cc6:	f008 fc2b 	bl	8009520 <DbgTraceGetFileName>
 8000cca:	4601      	mov	r1, r0
 8000ccc:	f240 136f 	movw	r3, #367	; 0x16f
 8000cd0:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000cd2:	484c      	ldr	r0, [pc, #304]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000cd4:	f00a fed0 	bl	800ba78 <iprintf>
 8000cd8:	7dbb      	ldrb	r3, [r7, #22]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	484b      	ldr	r0, [pc, #300]	; (8000e10 <APPE_SysUserEvtRx+0x1a8>)
 8000ce4:	f00a fec8 	bl	800ba78 <iprintf>

  switch(p_sys_event->subevtcode)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d87c      	bhi.n	8000df0 <APPE_SysUserEvtRx+0x188>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <APPE_SysUserEvtRx+0x94>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d1d 	.word	0x08000d1d
 8000d00:	08000d25 	.word	0x08000d25
 8000d04:	08000d2d 	.word	0x08000d2d
 8000d08:	08000df1 	.word	0x08000df1
 8000d0c:	08000d71 	.word	0x08000d71
 8000d10:	08000d95 	.word	0x08000d95
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000dd5 	.word	0x08000dd5
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f8cf 	bl	8000ec0 <APPE_SysEvtReadyProcessing>
    break;
 8000d22:	e066      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f881 	bl	8000e2c <APPE_SysEvtError>
    break;
 8000d2a:	e062      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000d2c:	4833      	ldr	r0, [pc, #204]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000d2e:	f008 fbf7 	bl	8009520 <DbgTraceGetFileName>
 8000d32:	4601      	mov	r1, r0
 8000d34:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000d3a:	4832      	ldr	r0, [pc, #200]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000d3c:	f00a fe9c 	bl	800ba78 <iprintf>
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <APPE_SysUserEvtRx+0x1ac>)
 8000d42:	f00a ff1f 	bl	800bb84 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000d48:	f008 fbea 	bl	8009520 <DbgTraceGetFileName>
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f240 137d 	movw	r3, #381	; 0x17d
 8000d52:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000d54:	482b      	ldr	r0, [pc, #172]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000d56:	f00a fe8f 	bl	800ba78 <iprintf>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3302      	adds	r3, #2
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	461a      	mov	r2, r3
 8000d68:	482b      	ldr	r0, [pc, #172]	; (8000e18 <APPE_SysUserEvtRx+0x1b0>)
 8000d6a:	f00a fe85 	bl	800ba78 <iprintf>
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8000d6e:	e040      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d70:	4822      	ldr	r0, [pc, #136]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000d72:	f008 fbd5 	bl	8009520 <DbgTraceGetFileName>
 8000d76:	4601      	mov	r1, r0
 8000d78:	f240 1383 	movw	r3, #387	; 0x183
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000d7e:	4821      	ldr	r0, [pc, #132]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000d80:	f00a fe7a 	bl	800ba78 <iprintf>
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	3302      	adds	r3, #2
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4823      	ldr	r0, [pc, #140]	; (8000e1c <APPE_SysUserEvtRx+0x1b4>)
 8000d8e:	f00a fe73 	bl	800ba78 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8000d92:	e02e      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000d96:	f008 fbc3 	bl	8009520 <DbgTraceGetFileName>
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000da4:	f00a fe68 	bl	800ba78 <iprintf>
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <APPE_SysUserEvtRx+0x1b8>)
 8000daa:	f00a feeb 	bl	800bb84 <puts>
    break;
 8000dae:	e020      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000db2:	f008 fbb5 	bl	8009520 <DbgTraceGetFileName>
 8000db6:	4601      	mov	r1, r0
 8000db8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000dc0:	f00a fe5a 	bl	800ba78 <iprintf>
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <APPE_SysUserEvtRx+0x1bc>)
 8000dce:	f00a fe53 	bl	800ba78 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8000dd2:	e00e      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <APPE_SysUserEvtRx+0x194>)
 8000dd6:	f008 fba3 	bl	8009520 <DbgTraceGetFileName>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	f240 1391 	movw	r3, #401	; 0x191
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <APPE_SysUserEvtRx+0x198>)
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <APPE_SysUserEvtRx+0x19c>)
 8000de4:	f00a fe48 	bl	800ba78 <iprintf>
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <APPE_SysUserEvtRx+0x1c0>)
 8000dea:	f00a fecb 	bl	800bb84 <puts>
    break;
 8000dee:	e000      	b.n	8000df2 <APPE_SysUserEvtRx+0x18a>

  default:
    break;
 8000df0:	bf00      	nop
  }

  return;
 8000df2:	bf00      	nop
}
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800caf4 	.word	0x0800caf4
 8000e00:	0800d6a0 	.word	0x0800d6a0
 8000e04:	0800cb0c 	.word	0x0800cb0c
 8000e08:	0800cb20 	.word	0x0800cb20
 8000e0c:	0800cb44 	.word	0x0800cb44
 8000e10:	0800cb60 	.word	0x0800cb60
 8000e14:	0800cb78 	.word	0x0800cb78
 8000e18:	0800cba4 	.word	0x0800cba4
 8000e1c:	0800cbe8 	.word	0x0800cbe8
 8000e20:	0800cc1c 	.word	0x0800cc1c
 8000e24:	0800cc38 	.word	0x0800cc38
 8000e28:	0800cc70 	.word	0x0800cc70

08000e2c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	330b      	adds	r3, #11
 8000e3a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000e42:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <APPE_SysEvtError+0x7c>)
 8000e44:	f008 fb6c 	bl	8009520 <DbgTraceGetFileName>
 8000e48:	4601      	mov	r1, r0
 8000e4a:	f240 13a9 	movw	r3, #425	; 0x1a9
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <APPE_SysEvtError+0x80>)
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <APPE_SysEvtError+0x84>)
 8000e52:	f00a fe11 	bl	800ba78 <iprintf>
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <APPE_SysEvtError+0x88>)
 8000e5e:	f00a fe0b 	bl	800ba78 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10d      	bne.n	8000e86 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000e6a:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <APPE_SysEvtError+0x7c>)
 8000e6c:	f008 fb58 	bl	8009520 <DbgTraceGetFileName>
 8000e70:	4601      	mov	r1, r0
 8000e72:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8000e76:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <APPE_SysEvtError+0x80>)
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <APPE_SysEvtError+0x84>)
 8000e7a:	f00a fdfd 	bl	800ba78 <iprintf>
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <APPE_SysEvtError+0x8c>)
 8000e80:	f00a fe80 	bl	800bb84 <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000e84:	e00d      	b.n	8000ea2 <APPE_SysEvtError+0x76>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <APPE_SysEvtError+0x7c>)
 8000e88:	f008 fb4a 	bl	8009520 <DbgTraceGetFileName>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <APPE_SysEvtError+0x80>)
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <APPE_SysEvtError+0x84>)
 8000e96:	f00a fdef 	bl	800ba78 <iprintf>
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <APPE_SysEvtError+0x90>)
 8000e9c:	f00a fe72 	bl	800bb84 <puts>
  return;
 8000ea0:	bf00      	nop
}
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	0800caf4 	.word	0x0800caf4
 8000eac:	0800d6b4 	.word	0x0800d6b4
 8000eb0:	0800cb0c 	.word	0x0800cb0c
 8000eb4:	0800cc8c 	.word	0x0800cc8c
 8000eb8:	0800ccb8 	.word	0x0800ccb8
 8000ebc:	0800ccf0 	.word	0x0800ccf0

08000ec0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	330b      	adds	r3, #11
 8000ee0:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d132      	bne.n	8000f56 <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000ef0:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <APPE_SysEvtReadyProcessing+0xe4>)
 8000ef2:	f008 fb15 	bl	8009520 <DbgTraceGetFileName>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	f240 13c7 	movw	r3, #455	; 0x1c7
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <APPE_SysEvtReadyProcessing+0xe8>)
 8000efe:	482b      	ldr	r0, [pc, #172]	; (8000fac <APPE_SysEvtReadyProcessing+0xec>)
 8000f00:	f00a fdba 	bl	800ba78 <iprintf>
 8000f04:	482a      	ldr	r0, [pc, #168]	; (8000fb0 <APPE_SysEvtReadyProcessing+0xf0>)
 8000f06:	f00a fe3d 	bl	800bb84 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000f0a:	f7ff fb6f 	bl	80005ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000f12:	237f      	movs	r3, #127	; 0x7f
 8000f14:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000f16:	f7ff fd05 	bl	8000924 <LL_DBGMCU_GetRevisionID>
 8000f1a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000f1c:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <APPE_SysEvtReadyProcessing+0xe4>)
 8000f1e:	f008 faff 	bl	8009520 <DbgTraceGetFileName>
 8000f22:	4601      	mov	r1, r0
 8000f24:	f240 13df 	movw	r3, #479	; 0x1df
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <APPE_SysEvtReadyProcessing+0xec>)
 8000f2c:	f00a fda4 	bl	800ba78 <iprintf>
 8000f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <APPE_SysEvtReadyProcessing+0xf4>)
 8000f34:	f00a fda0 	bl	800ba78 <iprintf>

    config_param.RevisionID = RevisionID;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4618      	mov	r0, r3
 8000f44:	f007 fd16 	bl	8008974 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000f48:	f009 f8d4 	bl	800a0f4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f00a faf4 	bl	800b53c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000f54:	e022      	b.n	8000f9c <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d110      	bne.n	8000f80 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <APPE_SysEvtReadyProcessing+0xe4>)
 8000f60:	f008 fade 	bl	8009520 <DbgTraceGetFileName>
 8000f64:	4601      	mov	r1, r0
 8000f66:	f240 13ed 	movw	r3, #493	; 0x1ed
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <APPE_SysEvtReadyProcessing+0xec>)
 8000f6e:	f00a fd83 	bl	800ba78 <iprintf>
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <APPE_SysEvtReadyProcessing+0xf8>)
 8000f74:	f00a fe06 	bl	800bb84 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  return;
 8000f7e:	e00d      	b.n	8000f9c <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <APPE_SysEvtReadyProcessing+0xe4>)
 8000f82:	f008 facd 	bl	8009520 <DbgTraceGetFileName>
 8000f86:	4601      	mov	r1, r0
 8000f88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <APPE_SysEvtReadyProcessing+0xec>)
 8000f90:	f00a fd72 	bl	800ba78 <iprintf>
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <APPE_SysEvtReadyProcessing+0xfc>)
 8000f96:	f00a fdf5 	bl	800bb84 <puts>
  return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800caf4 	.word	0x0800caf4
 8000fa8:	0800d6c8 	.word	0x0800d6c8
 8000fac:	0800cb0c 	.word	0x0800cb0c
 8000fb0:	0800cd24 	.word	0x0800cd24
 8000fb4:	0800cd54 	.word	0x0800cd54
 8000fb8:	0800cd74 	.word	0x0800cd74
 8000fbc:	0800cda0 	.word	0x0800cda0

08000fc0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f001 fdfa 	bl	8002bc0 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fd8:	d00a      	beq.n	8000ff0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000fda:	f001 fe09 	bl	8002bf0 <HAL_GetTickFreq>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe8:	e002      	b.n	8000ff0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000fea:	f7ff fd0b 	bl	8000a04 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000fee:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ff0:	f001 fde6 	bl	8002bc0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f4      	bhi.n	8000fea <HAL_Delay+0x2a>
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800100e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001012:	f00a fac3 	bl	800b59c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800101e:	bf00      	nop
}
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001036:	f00a fab1 	bl	800b59c <UTIL_SEQ_Run>

  return;
 800103a:	bf00      	nop
}
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800104a:	2100      	movs	r1, #0
 800104c:	2004      	movs	r0, #4
 800104e:	f00a fbb1 	bl	800b7b4 <UTIL_SEQ_SetTask>
  return;
 8001052:	bf00      	nop
}
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001062:	2002      	movs	r0, #2
 8001064:	f00a fc12 	bl	800b88c <UTIL_SEQ_SetEvt>
  return;
 8001068:	bf00      	nop
}
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001078:	2002      	movs	r0, #2
 800107a:	f00a fc27 	bl	800b8cc <UTIL_SEQ_WaitEvt>
  return;
 800107e:	bf00      	nop
}
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <LL_EXTI_EnableIT_0_31>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001092:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001096:	4905      	ldr	r1, [pc, #20]	; (80010ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4313      	orrs	r3, r2
 800109c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	58000800 	.word	0x58000800

080010b0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]

}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	58000800 	.word	0x58000800

080010d4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <ReadRtcSsrValue+0x3c>)
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	b29b      	uxth	r3, r3
 80010e0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <ReadRtcSsrValue+0x3c>)
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010ea:	e005      	b.n	80010f8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <ReadRtcSsrValue+0x3c>)
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d1f5      	bne.n	80010ec <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001100:	683b      	ldr	r3, [r7, #0]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40002800 	.word	0x40002800

08001114 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	491d      	ldr	r1, [pc, #116]	; (800119c <LinkTimerAfter+0x88>)
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	3315      	adds	r3, #21
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d009      	beq.n	8001152 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	4916      	ldr	r1, [pc, #88]	; (800119c <LinkTimerAfter+0x88>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3314      	adds	r3, #20
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	4911      	ldr	r1, [pc, #68]	; (800119c <LinkTimerAfter+0x88>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3315      	adds	r3, #21
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <LinkTimerAfter+0x88>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3314      	adds	r3, #20
 8001176:	79ba      	ldrb	r2, [r7, #6]
 8001178:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <LinkTimerAfter+0x88>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3315      	adds	r3, #21
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	701a      	strb	r2, [r3, #0]

  return;
 800118e:	bf00      	nop
}
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000008c 	.word	0x2000008c

080011a0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	4613      	mov	r3, r2
 80011ae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <LinkTimerBefore+0xb8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d032      	beq.n	8001222 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011bc:	79ba      	ldrb	r2, [r7, #6]
 80011be:	4927      	ldr	r1, [pc, #156]	; (800125c <LinkTimerBefore+0xbc>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3314      	adds	r3, #20
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	4922      	ldr	r1, [pc, #136]	; (800125c <LinkTimerBefore+0xbc>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3315      	adds	r3, #21
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	491d      	ldr	r1, [pc, #116]	; (800125c <LinkTimerBefore+0xbc>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3315      	adds	r3, #21
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	4918      	ldr	r1, [pc, #96]	; (800125c <LinkTimerBefore+0xbc>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3314      	adds	r3, #20
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800120c:	79ba      	ldrb	r2, [r7, #6]
 800120e:	4913      	ldr	r1, [pc, #76]	; (800125c <LinkTimerBefore+0xbc>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3314      	adds	r3, #20
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001220:	e014      	b.n	800124c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001222:	79fa      	ldrb	r2, [r7, #7]
 8001224:	490d      	ldr	r1, [pc, #52]	; (800125c <LinkTimerBefore+0xbc>)
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	3315      	adds	r3, #21
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <LinkTimerBefore+0xbc>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	3314      	adds	r3, #20
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	701a      	strb	r2, [r3, #0]
  return;
 800124a:	bf00      	nop
}
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000011c 	.word	0x2000011c
 800125c:	2000008c 	.word	0x2000008c

08001260 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <linkTimer+0x144>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b06      	cmp	r3, #6
 8001272:	d118      	bne.n	80012a6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <linkTimer+0x144>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <linkTimer+0x148>)
 800127c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <linkTimer+0x144>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	4949      	ldr	r1, [pc, #292]	; (80013ac <linkTimer+0x14c>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3315      	adds	r3, #21
 8001294:	2206      	movs	r2, #6
 8001296:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001298:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <linkTimer+0x150>)
 800129a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800129e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	e078      	b.n	8001398 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012a6:	f000 f909 	bl	80014bc <ReturnTimeElapsed>
 80012aa:	4603      	mov	r3, r0
 80012ac:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	493e      	ldr	r1, [pc, #248]	; (80013ac <linkTimer+0x14c>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	440b      	add	r3, r1
 80012bc:	3308      	adds	r3, #8
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	4419      	add	r1, r3
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <linkTimer+0x14c>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4403      	add	r3, r0
 80012d2:	3308      	adds	r3, #8
 80012d4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	4934      	ldr	r1, [pc, #208]	; (80013ac <linkTimer+0x14c>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <linkTimer+0x144>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <linkTimer+0x14c>)
 80012f4:	460b      	mov	r3, r1
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	440b      	add	r3, r1
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	3308      	adds	r3, #8
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	429a      	cmp	r2, r3
 8001306:	d337      	bcc.n	8001378 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <linkTimer+0x144>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800130e:	7b7a      	ldrb	r2, [r7, #13]
 8001310:	4926      	ldr	r1, [pc, #152]	; (80013ac <linkTimer+0x14c>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	3315      	adds	r3, #21
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001322:	e013      	b.n	800134c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001324:	7b7a      	ldrb	r2, [r7, #13]
 8001326:	4921      	ldr	r1, [pc, #132]	; (80013ac <linkTimer+0x14c>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3315      	adds	r3, #21
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001338:	7b7a      	ldrb	r2, [r7, #13]
 800133a:	491c      	ldr	r1, [pc, #112]	; (80013ac <linkTimer+0x14c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3315      	adds	r3, #21
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800134c:	7b3b      	ldrb	r3, [r7, #12]
 800134e:	2b06      	cmp	r3, #6
 8001350:	d00b      	beq.n	800136a <linkTimer+0x10a>
 8001352:	7b3a      	ldrb	r2, [r7, #12]
 8001354:	4915      	ldr	r1, [pc, #84]	; (80013ac <linkTimer+0x14c>)
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	3308      	adds	r3, #8
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	429a      	cmp	r2, r3
 8001368:	d2dc      	bcs.n	8001324 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800136a:	7b7a      	ldrb	r2, [r7, #13]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fecf 	bl	8001114 <LinkTimerAfter>
 8001376:	e00f      	b.n	8001398 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <linkTimer+0x144>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff0c 	bl	80011a0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <linkTimer+0x144>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <linkTimer+0x148>)
 8001390:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <linkTimer+0x144>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001398:	89fb      	ldrh	r3, [r7, #14]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000011c 	.word	0x2000011c
 80013a8:	2000011d 	.word	0x2000011d
 80013ac:	2000008c 	.word	0x2000008c
 80013b0:	20000120 	.word	0x20000120

080013b4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013c4:	4b39      	ldr	r3, [pc, #228]	; (80014ac <UnlinkTimer+0xf8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d111      	bne.n	80013f4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <UnlinkTimer+0xf8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <UnlinkTimer+0xfc>)
 80013d8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <UnlinkTimer+0x100>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3315      	adds	r3, #21
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <UnlinkTimer+0xf8>)
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e03e      	b.n	8001472 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	492f      	ldr	r1, [pc, #188]	; (80014b4 <UnlinkTimer+0x100>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	3314      	adds	r3, #20
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	492a      	ldr	r1, [pc, #168]	; (80014b4 <UnlinkTimer+0x100>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	3315      	adds	r3, #21
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800141c:	79f9      	ldrb	r1, [r7, #7]
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	4824      	ldr	r0, [pc, #144]	; (80014b4 <UnlinkTimer+0x100>)
 8001422:	460b      	mov	r3, r1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	440b      	add	r3, r1
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4403      	add	r3, r0
 800142c:	3315      	adds	r3, #21
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2d8      	uxtb	r0, r3
 8001432:	4920      	ldr	r1, [pc, #128]	; (80014b4 <UnlinkTimer+0x100>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3315      	adds	r3, #21
 8001440:	4602      	mov	r2, r0
 8001442:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d013      	beq.n	8001472 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800144a:	79f9      	ldrb	r1, [r7, #7]
 800144c:	7bba      	ldrb	r2, [r7, #14]
 800144e:	4819      	ldr	r0, [pc, #100]	; (80014b4 <UnlinkTimer+0x100>)
 8001450:	460b      	mov	r3, r1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	440b      	add	r3, r1
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4403      	add	r3, r0
 800145a:	3314      	adds	r3, #20
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2d8      	uxtb	r0, r3
 8001460:	4914      	ldr	r1, [pc, #80]	; (80014b4 <UnlinkTimer+0x100>)
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3314      	adds	r3, #20
 800146e:	4602      	mov	r2, r0
 8001470:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	490f      	ldr	r1, [pc, #60]	; (80014b4 <UnlinkTimer+0x100>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	330c      	adds	r3, #12
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <UnlinkTimer+0xf8>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b06      	cmp	r3, #6
 800148e:	d107      	bne.n	80014a0 <UnlinkTimer+0xec>
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <UnlinkTimer+0x104>)
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149c:	601a      	str	r2, [r3, #0]
  }

  return;
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
}
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	2000011c 	.word	0x2000011c
 80014b0:	2000011d 	.word	0x2000011d
 80014b4:	2000008c 	.word	0x2000008c
 80014b8:	20000120 	.word	0x20000120

080014bc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <ReturnTimeElapsed+0x70>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ca:	d026      	beq.n	800151a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014cc:	f7ff fe02 	bl	80010d4 <ReadRtcSsrValue>
 80014d0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <ReturnTimeElapsed+0x70>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d805      	bhi.n	80014e8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <ReturnTimeElapsed+0x70>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e00a      	b.n	80014fe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <ReturnTimeElapsed+0x74>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <ReturnTimeElapsed+0x70>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <ReturnTimeElapsed+0x78>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <ReturnTimeElapsed+0x7c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	40d3      	lsrs	r3, r2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	e001      	b.n	800151e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	b29b      	uxth	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000120 	.word	0x20000120
 8001530:	2000022e 	.word	0x2000022e
 8001534:	2000022d 	.word	0x2000022d
 8001538:	2000022c 	.word	0x2000022c

0800153c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d108      	bne.n	800155e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800154c:	f7ff fdc2 	bl	80010d4 <ReadRtcSsrValue>
 8001550:	4603      	mov	r3, r0
 8001552:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <RestartWakeupCounter+0xa8>)
 8001554:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001556:	2003      	movs	r0, #3
 8001558:	f001 fcdf 	bl	8002f1a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800155c:	e03e      	b.n	80015dc <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d803      	bhi.n	800156c <RestartWakeupCounter+0x30>
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <RestartWakeupCounter+0xac>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d002      	beq.n	8001572 <RestartWakeupCounter+0x36>
      Value -= 1;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	3b01      	subs	r3, #1
 8001570:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001572:	bf00      	nop
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <RestartWakeupCounter+0xb0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f7      	beq.n	8001574 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <RestartWakeupCounter+0xb0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <RestartWakeupCounter+0xb0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001598:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <RestartWakeupCounter+0xb4>)
 800159c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015a0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015a2:	2003      	movs	r0, #3
 80015a4:	f001 fcc7 	bl	8002f36 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <RestartWakeupCounter+0xb8>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	88fa      	ldrh	r2, [r7, #6]
 80015b2:	4910      	ldr	r1, [pc, #64]	; (80015f4 <RestartWakeupCounter+0xb8>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b8:	f7ff fd8c 	bl	80010d4 <ReadRtcSsrValue>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <RestartWakeupCounter+0xa8>)
 80015c0:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <RestartWakeupCounter+0xb0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <RestartWakeupCounter+0xb0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015d4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015d6:	f3af 8000 	nop.w
  return ;
 80015da:	bf00      	nop
}
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000120 	.word	0x20000120
 80015e8:	2000022c 	.word	0x2000022c
 80015ec:	20000228 	.word	0x20000228
 80015f0:	58000800 	.word	0x58000800
 80015f4:	40002800 	.word	0x40002800

080015f8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <RescheduleTimerList+0x124>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160a:	d108      	bne.n	800161e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800160c:	bf00      	nop
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <RescheduleTimerList+0x128>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f7      	bne.n	800160e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <RescheduleTimerList+0x128>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <RescheduleTimerList+0x128>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001630:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <RescheduleTimerList+0x12c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	493b      	ldr	r1, [pc, #236]	; (8001728 <RescheduleTimerList+0x130>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3308      	adds	r3, #8
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800164c:	f7ff ff36 	bl	80014bc <ReturnTimeElapsed>
 8001650:	4603      	mov	r3, r0
 8001652:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d205      	bcs.n	8001668 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <RescheduleTimerList+0x134>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e04d      	b.n	8001704 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <RescheduleTimerList+0x138>)
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	b292      	uxth	r2, r2
 8001670:	4413      	add	r3, r2
 8001672:	461a      	mov	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4293      	cmp	r3, r2
 8001678:	d906      	bls.n	8001688 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <RescheduleTimerList+0x138>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <RescheduleTimerList+0x134>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	e03d      	b.n	8001704 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	b29a      	uxth	r2, r3
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <RescheduleTimerList+0x134>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001698:	e034      	b.n	8001704 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	4922      	ldr	r1, [pc, #136]	; (8001728 <RescheduleTimerList+0x130>)
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3308      	adds	r3, #8
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d20a      	bcs.n	80016c8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	491c      	ldr	r1, [pc, #112]	; (8001728 <RescheduleTimerList+0x130>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3308      	adds	r3, #8
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e013      	b.n	80016f0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	4917      	ldr	r1, [pc, #92]	; (8001728 <RescheduleTimerList+0x130>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3308      	adds	r3, #8
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	1ac9      	subs	r1, r1, r3
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <RescheduleTimerList+0x130>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4403      	add	r3, r0
 80016ec:	3308      	adds	r3, #8
 80016ee:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <RescheduleTimerList+0x130>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3315      	adds	r3, #21
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b06      	cmp	r3, #6
 8001708:	d1c7      	bne.n	800169a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800170a:	89bb      	ldrh	r3, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff15 	bl	800153c <RestartWakeupCounter>

  return ;
 8001712:	bf00      	nop
}
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40002800 	.word	0x40002800
 8001720:	20000228 	.word	0x20000228
 8001724:	2000011c 	.word	0x2000011c
 8001728:	2000008c 	.word	0x2000008c
 800172c:	20000124 	.word	0x20000124
 8001730:	20000230 	.word	0x20000230

08001734 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800173a:	f3ef 8310 	mrs	r3, PRIMASK
 800173e:	617b      	str	r3, [r7, #20]
  return(result);
 8001740:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001748:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	22ca      	movs	r2, #202	; 0xca
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2253      	movs	r2, #83	; 0x53
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001778:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800177c:	4954      	ldr	r1, [pc, #336]	; (80018d0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	330c      	adds	r3, #12
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d172      	bne.n	8001878 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001792:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001796:	494e      	ldr	r1, [pc, #312]	; (80018d0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80017a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017aa:	4949      	ldr	r1, [pc, #292]	; (80018d0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3310      	adds	r3, #16
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d050      	beq.n	8001868 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017ca:	4941      	ldr	r1, [pc, #260]	; (80018d0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	330d      	adds	r3, #13
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d126      	bne.n	800182e <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80017e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fde4 	bl	80013b4 <UnlinkTimer>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f383 8810 	msr	PRIMASK, r3
}
 80017f6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80017f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017fc:	4934      	ldr	r1, [pc, #208]	; (80018d0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3304      	adds	r3, #4
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fa4e 	bl	8001cb4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	22ca      	movs	r2, #202	; 0xca
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2253      	movs	r2, #83	; 0x53
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
 800182c:	e014      	b.n	8001858 <HW_TS_RTC_Wakeup_Handler+0x124>
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f383 8810 	msr	PRIMASK, r3
}
 8001838:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800183a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f9ac 	bl	8001b9c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	22ca      	movs	r2, #202	; 0xca
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2253      	movs	r2, #83	; 0x53
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	4619      	mov	r1, r3
 8001860:	69b8      	ldr	r0, [r7, #24]
 8001862:	f000 faaf 	bl	8001dc4 <HW_TS_RTC_Int_AppNot>
 8001866:	e025      	b.n	80018b4 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001868:	f7ff fec6 	bl	80015f8 <RescheduleTimerList>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f383 8810 	msr	PRIMASK, r3
}
 8001876:	e01d      	b.n	80018b4 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001878:	bf00      	nop
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f7      	beq.n	800187a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800189e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80018a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f383 8810 	msr	PRIMASK, r3
}
 80018b2:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80018be:	bf00      	nop
}
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000228 	.word	0x20000228
 80018cc:	2000011c 	.word	0x2000011c
 80018d0:	2000008c 	.word	0x2000008c
 80018d4:	20000124 	.word	0x20000124
 80018d8:	58000800 	.word	0x58000800

080018dc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80018e8:	4a64      	ldr	r2, [pc, #400]	; (8001a7c <HW_TS_Init+0x1a0>)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HW_TS_Init+0x1a0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	22ca      	movs	r2, #202	; 0xca
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
 80018f8:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <HW_TS_Init+0x1a0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2253      	movs	r2, #83	; 0x53
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <HW_TS_Init+0x1a4>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4a5e      	ldr	r2, [pc, #376]	; (8001a80 <HW_TS_Init+0x1a4>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800190e:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <HW_TS_Init+0x1a4>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f1c3 0304 	rsb	r3, r3, #4
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HW_TS_Init+0x1a8>)
 8001922:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HW_TS_Init+0x1a4>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800192c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001930:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	fa92 f2a2 	rbit	r2, r2
 8001938:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	2a00      	cmp	r2, #0
 8001942:	d101      	bne.n	8001948 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001944:	2220      	movs	r2, #32
 8001946:	e003      	b.n	8001950 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	40d3      	lsrs	r3, r2
 8001952:	b2db      	uxtb	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <HW_TS_Init+0x1ac>)
 800195a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800195c:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <HW_TS_Init+0x1a4>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	b29b      	uxth	r3, r3
 8001962:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HW_TS_Init+0x1b0>)
 800196e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HW_TS_Init+0x1b0>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a44      	ldr	r2, [pc, #272]	; (8001a88 <HW_TS_Init+0x1ac>)
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001982:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HW_TS_Init+0x1a8>)
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	40d3      	lsrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001990:	4293      	cmp	r3, r2
 8001992:	d904      	bls.n	800199e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HW_TS_Init+0x1b4>)
 8001996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199a:	801a      	strh	r2, [r3, #0]
 800199c:	e003      	b.n	80019a6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HW_TS_Init+0x1b4>)
 80019a4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80019a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80019aa:	f7ff fb81 	bl	80010b0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80019ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80019b2:	f7ff fb69 	bl	8001088 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d143      	bne.n	8001a44 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HW_TS_Init+0x1b8>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HW_TS_Init+0x1bc>)
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	77fb      	strb	r3, [r7, #31]
 80019ce:	e00c      	b.n	80019ea <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80019d0:	7ffa      	ldrb	r2, [r7, #31]
 80019d2:	4932      	ldr	r1, [pc, #200]	; (8001a9c <HW_TS_Init+0x1c0>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	330c      	adds	r3, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	3301      	adds	r3, #1
 80019e8:	77fb      	strb	r3, [r7, #31]
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d9ef      	bls.n	80019d0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HW_TS_Init+0x1c4>)
 80019f2:	2206      	movs	r2, #6
 80019f4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HW_TS_Init+0x1a0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a08:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a1e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HW_TS_Init+0x1c8>)
 8001a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a26:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f001 fa84 	bl	8002f36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	e00a      	b.n	8001a5a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f001 fa60 	bl	8002f1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HW_TS_Init+0x1a0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a64:	2200      	movs	r2, #0
 8001a66:	2103      	movs	r1, #3
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f001 fa14 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a6e:	2003      	movs	r0, #3
 8001a70:	f001 fa2b 	bl	8002eca <HAL_NVIC_EnableIRQ>

  return;
 8001a74:	bf00      	nop
}
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000228 	.word	0x20000228
 8001a80:	40002800 	.word	0x40002800
 8001a84:	2000022c 	.word	0x2000022c
 8001a88:	2000022d 	.word	0x2000022d
 8001a8c:	2000022e 	.word	0x2000022e
 8001a90:	20000230 	.word	0x20000230
 8001a94:	20000124 	.word	0x20000124
 8001a98:	20000120 	.word	0x20000120
 8001a9c:	2000008c 	.word	0x2000008c
 8001aa0:	2000011c 	.word	0x2000011c
 8001aa4:	58000800 	.word	0x58000800

08001aa8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001abe:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ac6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001acc:	e004      	b.n	8001ad8 <HW_TS_Create+0x30>
  {
    loop++;
 8001ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d80c      	bhi.n	8001afa <HW_TS_Create+0x52>
 8001ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ae4:	492c      	ldr	r1, [pc, #176]	; (8001b98 <HW_TS_Create+0xf0>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	330c      	adds	r3, #12
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e9      	bne.n	8001ace <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001afa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d038      	beq.n	8001b74 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001b02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <HW_TS_Create+0xf0>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	330c      	adds	r3, #12
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f383 8810 	msr	PRIMASK, r3
}
 8001b22:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001b24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b28:	491b      	ldr	r1, [pc, #108]	; (8001b98 <HW_TS_Create+0xf0>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3310      	adds	r3, #16
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001b3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b3e:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HW_TS_Create+0xf0>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	330d      	adds	r3, #13
 8001b4c:	79fa      	ldrb	r2, [r7, #7]
 8001b4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001b50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b54:	4910      	ldr	r1, [pc, #64]	; (8001b98 <HW_TS_Create+0xf0>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b6a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b72:	e008      	b.n	8001b86 <HW_TS_Create+0xde>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f383 8810 	msr	PRIMASK, r3
}
 8001b7e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	372c      	adds	r7, #44	; 0x2c
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000008c 	.word	0x2000008c

08001b9c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8001baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f001 f996 	bl	8002ee6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HW_TS_Stop+0x100>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	22ca      	movs	r2, #202	; 0xca
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HW_TS_Stop+0x100>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2253      	movs	r2, #83	; 0x53
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	4933      	ldr	r1, [pc, #204]	; (8001ca0 <HW_TS_Stop+0x104>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	330c      	adds	r3, #12
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d148      	bne.n	8001c78 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fbe2 	bl	80013b4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HW_TS_Stop+0x108>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d135      	bne.n	8001c68 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HW_TS_Stop+0x10c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c08:	d108      	bne.n	8001c1c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001c0a:	bf00      	nop
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f7      	bne.n	8001c0c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001c30:	bf00      	nop
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f7      	beq.n	8001c32 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c56:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HW_TS_Stop+0x110>)
 8001c5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c5e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c60:	2003      	movs	r0, #3
 8001c62:	f001 f968 	bl	8002f36 <HAL_NVIC_ClearPendingIRQ>
 8001c66:	e007      	b.n	8001c78 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HW_TS_Stop+0x114>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	7cfa      	ldrb	r2, [r7, #19]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001c74:	f7ff fcc0 	bl	80015f8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HW_TS_Stop+0x100>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	22ff      	movs	r2, #255	; 0xff
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c82:	2003      	movs	r0, #3
 8001c84:	f001 f921 	bl	8002eca <HAL_NVIC_EnableIRQ>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f383 8810 	msr	PRIMASK, r3
}
 8001c92:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c94:	bf00      	nop
}
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000228 	.word	0x20000228
 8001ca0:	2000008c 	.word	0x2000008c
 8001ca4:	2000011c 	.word	0x2000011c
 8001ca8:	40002800 	.word	0x40002800
 8001cac:	58000800 	.word	0x58000800
 8001cb0:	2000011d 	.word	0x2000011d

08001cb4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	493c      	ldr	r1, [pc, #240]	; (8001db4 <HW_TS_Start+0x100>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	330c      	adds	r3, #12
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d103      	bne.n	8001ce0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff5e 	bl	8001b9c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cea:	b672      	cpsid	i
}
 8001cec:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001cee:	2003      	movs	r0, #3
 8001cf0:	f001 f8f9 	bl	8002ee6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HW_TS_Start+0x104>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	22ca      	movs	r2, #202	; 0xca
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HW_TS_Start+0x104>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2253      	movs	r2, #83	; 0x53
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	492a      	ldr	r1, [pc, #168]	; (8001db4 <HW_TS_Start+0x100>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	330c      	adds	r3, #12
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <HW_TS_Start+0x100>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	4920      	ldr	r1, [pc, #128]	; (8001db4 <HW_TS_Start+0x100>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3304      	adds	r3, #4
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa8a 	bl	8001260 <linkTimer>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HW_TS_Start+0x108>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HW_TS_Start+0x10c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	7c7a      	ldrb	r2, [r7, #17]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d002      	beq.n	8001d68 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001d62:	f7ff fc49 	bl	80015f8 <RescheduleTimerList>
 8001d66:	e013      	b.n	8001d90 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	4912      	ldr	r1, [pc, #72]	; (8001db4 <HW_TS_Start+0x100>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3308      	adds	r3, #8
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	1ac9      	subs	r1, r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HW_TS_Start+0x100>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4403      	add	r3, r0
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HW_TS_Start+0x104>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f001 f895 	bl	8002eca <HAL_NVIC_EnableIRQ>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f383 8810 	msr	PRIMASK, r3
}
 8001daa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001dac:	bf00      	nop
}
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000008c 	.word	0x2000008c
 8001db8:	20000228 	.word	0x20000228
 8001dbc:	2000011c 	.word	0x2000011c
 8001dc0:	2000011d 	.word	0x2000011d

08001dc4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4798      	blx	r3

  return;
 8001dd6:	bf00      	nop
}
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	4613      	mov	r3, r2
 8001df0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10e      	bne.n	8001e1e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HW_UART_Transmit_DMA+0x80>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HW_UART_Transmit_DMA+0x84>)
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HW_UART_Transmit_DMA+0x88>)
 8001e0a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001e0c:	89bb      	ldrh	r3, [r7, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <HW_UART_Transmit_DMA+0x84>)
 8001e14:	f003 ff40 	bl	8005c98 <HAL_UART_Transmit_DMA>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001e1c:	e000      	b.n	8001e20 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001e1e:	bf00      	nop
    }

    switch (hal_status)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d816      	bhi.n	8001e54 <HW_UART_Transmit_DMA+0x74>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HW_UART_Transmit_DMA+0x4c>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e43 	.word	0x08001e43
 8001e34:	08001e49 	.word	0x08001e49
 8001e38:	08001e4f 	.word	0x08001e4f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	75bb      	strb	r3, [r7, #22]
            break;
 8001e40:	e009      	b.n	8001e56 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75bb      	strb	r3, [r7, #22]
            break;
 8001e46:	e006      	b.n	8001e56 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8001e4c:	e003      	b.n	8001e56 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	75bb      	strb	r3, [r7, #22]
            break;
 8001e52:	e000      	b.n	8001e56 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001e54:	bf00      	nop
    }

    return hw_status;
 8001e56:	7dbb      	ldrb	r3, [r7, #22]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000234 	.word	0x20000234
 8001e64:	20000298 	.word	0x20000298
 8001e68:	40013800 	.word	0x40013800

08001e6c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_UART_TxCpltCallback+0x34>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_UART_TxCpltCallback+0x38>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_UART_TxCpltCallback+0x38>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4798      	blx	r3
            }
            break;
 8001e8e:	e001      	b.n	8001e94 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001e90:	bf00      	nop
 8001e92:	e000      	b.n	8001e96 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001e94:	bf00      	nop
    }

    return;
 8001e96:	bf00      	nop
}
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	20000234 	.word	0x20000234

08001ea8 <LL_RCC_LSE_SetDriveCapability>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f023 0218 	bic.w	r2, r3, #24
 8001ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_AHB2_GRP1_EnableClock>:
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f000 fdd2 	bl	8002ae4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001f40:	f7fe fda0 	bl	8000a84 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f44:	f000 f89c 	bl	8002080 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f48:	f000 f910 	bl	800216c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001f4c:	f000 f92e 	bl	80021ac <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f50:	f000 fa04 	bl	800235c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8001f54:	f000 f9c8 	bl	80022e8 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001f58:	f000 f93c 	bl	80021d4 <MX_RF_Init>
  MX_DMA_Init();
 8001f5c:	f000 f9ec 	bl	8002338 <MX_DMA_Init>
  MX_RTC_Init();
 8001f60:	f000 f940 	bl	80021e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f64:	f7fe fd9c 	bl	8000aa0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001f68:	f7ff f84f 	bl	800100a <MX_APPE_Process>

    if (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET)
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f001 fc91 	bl	8003898 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <main+0x6a>
    {
    	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2120      	movs	r1, #32
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f001 fca0 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f001 fc9a 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f001 fc93 	bl	80038c8 <HAL_GPIO_WritePin>
    }
    if (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f001 fc76 	bl	8003898 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d111      	bne.n	8001fd6 <main+0x9e>
    {
    	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, SET);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f001 fc85 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f001 fc7f 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	482a      	ldr	r0, [pc, #168]	; (800207c <main+0x144>)
 8001fd2:	f001 fc79 	bl	80038c8 <HAL_GPIO_WritePin>
    }
    if (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET)
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	4828      	ldr	r0, [pc, #160]	; (800207c <main+0x144>)
 8001fda:	f001 fc5d 	bl	8003898 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d125      	bne.n	8002030 <main+0xf8>
    {
    	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f001 fc6c 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2140      	movs	r1, #64	; 0x40
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f001 fc66 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f001 fc60 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2110      	movs	r1, #16
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f001 fc5a 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201e:	f001 fc53 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4814      	ldr	r0, [pc, #80]	; (800207c <main+0x144>)
 800202a:	f001 fc4d 	bl	80038c8 <HAL_GPIO_WritePin>
 800202e:	e79b      	b.n	8001f68 <main+0x30>
    }
    else
    {
    	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	2120      	movs	r1, #32
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f001 fc46 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f001 fc40 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f001 fc3a 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f001 fc34 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206a:	f001 fc2d 	bl	80038c8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <main+0x144>)
 8002076:	f001 fc27 	bl	80038c8 <HAL_GPIO_WritePin>
    MX_APPE_Process();
 800207a:	e775      	b.n	8001f68 <main+0x30>
 800207c:	48000800 	.word	0x48000800

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09a      	sub	sp, #104	; 0x68
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	2248      	movs	r2, #72	; 0x48
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f009 fcea 	bl	800ba68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f023 0303 	bic.w	r3, r3, #3
 80020c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020ca:	f001 fdcf 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff feea 	bl	8001ea8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <SystemClock_Config+0xe8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <SystemClock_Config+0xe8>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <SystemClock_Config+0xe8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020f0:	2327      	movs	r3, #39	; 0x27
 80020f2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020fa:	2301      	movs	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002104:	2301      	movs	r3, #1
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800210c:	2300      	movs	r3, #0
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002110:	2360      	movs	r3, #96	; 0x60
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002114:	2300      	movs	r3, #0
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	4618      	mov	r0, r3
 800211e:	f002 f939 	bl	8004394 <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002128:	f000 f9a2 	bl	8002470 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800212c:	236f      	movs	r3, #111	; 0x6f
 800212e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002130:	2302      	movs	r3, #2
 8002132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fcaf 	bl	8004ab0 <HAL_RCC_ClockConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002158:	f000 f98a 	bl	8002470 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800215c:	f003 fa6a 	bl	8005634 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002160:	bf00      	nop
 8002162:	3768      	adds	r7, #104	; 0x68
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58000400 	.word	0x58000400

0800216c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b094      	sub	sp, #80	; 0x50
 8002170:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2250      	movs	r2, #80	; 0x50
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f009 fc75 	bl	800ba68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800217e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002182:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002188:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800218a:	2302      	movs	r3, #2
 800218c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800218e:	2310      	movs	r3, #16
 8002190:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002192:	463b      	mov	r3, r7
 8002194:	4618      	mov	r0, r3
 8002196:	f003 f8d7 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80021a0:	f000 f966 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80021a4:	bf00      	nop
 80021a6:	3750      	adds	r7, #80	; 0x50
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_IPCC_Init+0x20>)
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <MX_IPCC_Init+0x24>)
 80021b4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_IPCC_Init+0x20>)
 80021b8:	f001 fbc2 	bl	8003940 <HAL_IPCC_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80021c2:	f000 f955 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000238 	.word	0x20000238
 80021d0:	58000c00 	.word	0x58000c00

080021d4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_RTC_Init+0x60>)
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <MX_RTC_Init+0x64>)
 80021ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_RTC_Init+0x60>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_RTC_Init+0x60>)
 80021f6:	220f      	movs	r2, #15
 80021f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_RTC_Init+0x60>)
 80021fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002200:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_RTC_Init+0x60>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_RTC_Init+0x60>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <MX_RTC_Init+0x60>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_RTC_Init+0x60>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <MX_RTC_Init+0x60>)
 800221c:	f003 fb21 	bl	8005862 <HAL_RTC_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002226:	f000 f923 	bl	8002470 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_RTC_Init+0x60>)
 8002230:	f003 fc06 	bl	8005a40 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800223a:	f000 f919 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000274 	.word	0x20000274
 8002248:	40002800 	.word	0x40002800

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002252:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <MX_USART1_UART_Init+0x98>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 800227e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002282:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 800228c:	2200      	movs	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4812      	ldr	r0, [pc, #72]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 8002298:	f003 fcae 	bl	8005bf8 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80022a2:	f000 f8e5 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a6:	2100      	movs	r1, #0
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 80022aa:	f004 fe76 	bl	8006f9a <HAL_UARTEx_SetTxFifoThreshold>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80022b4:	f000 f8dc 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b8:	2100      	movs	r1, #0
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 80022bc:	f004 feab 	bl	8007016 <HAL_UARTEx_SetRxFifoThreshold>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80022c6:	f000 f8d3 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x94>)
 80022cc:	f004 fe2c 	bl	8006f28 <HAL_UARTEx_DisableFifoMode>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80022d6:	f000 f8cb 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000298 	.word	0x20000298
 80022e4:	40013800 	.word	0x40013800

080022e8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_USB_PCD_Init+0x48>)
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <MX_USB_PCD_Init+0x4c>)
 80022f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <MX_USB_PCD_Init+0x48>)
 80022f4:	2208      	movs	r2, #8
 80022f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <MX_USB_PCD_Init+0x48>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_USB_PCD_Init+0x48>)
 8002300:	2202      	movs	r2, #2
 8002302:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <MX_USB_PCD_Init+0x48>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_USB_PCD_Init+0x48>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <MX_USB_PCD_Init+0x48>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_USB_PCD_Init+0x48>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_USB_PCD_Init+0x48>)
 800231e:	f001 fb95 	bl	8003a4c <HAL_PCD_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002328:	f000 f8a2 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000388 	.word	0x20000388
 8002334:	40006800 	.word	0x40006800

08002338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800233c:	2004      	movs	r0, #4
 800233e:	f7ff fdc9 	bl	8001ed4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff fdc6 	bl	8001ed4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	210f      	movs	r1, #15
 800234c:	200b      	movs	r0, #11
 800234e:	f000 fda2 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002352:	200b      	movs	r0, #11
 8002354:	f000 fdb9 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002370:	2004      	movs	r0, #4
 8002372:	f7ff fdc8 	bl	8001f06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff fdc5 	bl	8001f06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff fdc2 	bl	8001f06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	2008      	movs	r0, #8
 8002384:	f7ff fdbf 	bl	8001f06 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Blue_2_Pin|Led_Red_1_Pin|Led_Red_2_Pin|Led_Blue_1_Pin
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f001 fa99 	bl	80038c8 <HAL_GPIO_WritePin>
                          |Led_Green_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2123      	movs	r1, #35	; 0x23
 800239a:	4832      	ldr	r0, [pc, #200]	; (8002464 <MX_GPIO_Init+0x108>)
 800239c:	f001 fa94 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a6:	4830      	ldr	r0, [pc, #192]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023a8:	f001 fa8e 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_2_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_1_Pin;
 80023ac:	230c      	movs	r3, #12
 80023ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f001 f8fa 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Blue_2_Pin Led_Red_1_Pin Led_Red_2_Pin Led_Blue_1_Pin
                           Led_Green_1_Pin */
  GPIO_InitStruct.Pin = Led_Blue_2_Pin|Led_Red_1_Pin|Led_Red_2_Pin|Led_Blue_1_Pin
 80023c4:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 80023c8:	607b      	str	r3, [r7, #4]
                          |Led_Green_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d2:	2302      	movs	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023de:	f001 f8eb 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023e2:	2310      	movs	r3, #16
 80023e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023f4:	f001 f8e0 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80023f8:	2323      	movs	r3, #35	; 0x23
 80023fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4815      	ldr	r0, [pc, #84]	; (8002464 <MX_GPIO_Init+0x108>)
 800240e:	f001 f8d3 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8002412:	2340      	movs	r3, #64	; 0x40
 8002414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241a:	2301      	movs	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4811      	ldr	r0, [pc, #68]	; (8002468 <MX_GPIO_Init+0x10c>)
 8002424:	f001 f8c8 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Green_2_Pin */
  GPIO_InitStruct.Pin = Led_Green_2_Pin;
 8002428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002436:	2302      	movs	r3, #2
 8002438:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Led_Green_2_GPIO_Port, &GPIO_InitStruct);
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	4619      	mov	r1, r3
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <MX_GPIO_Init+0x10c>)
 8002440:	f001 f8ba 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002444:	2303      	movs	r3, #3
 8002446:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_GPIO_Init+0x110>)
 8002456:	f001 f8af 	bl	80035b8 <HAL_GPIO_Init>

}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	48000400 	.word	0x48000400
 8002468:	48000800 	.word	0x48000800
 800246c:	48000c00 	.word	0x48000c00

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>

0800247a <LL_RCC_EnableRTC>:
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_AHB2_GRP1_EnableClock>:
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c0:	68fb      	ldr	r3, [r7, #12]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_AHB3_GRP1_EnableClock>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_APB1_GRP1_EnableClock>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800250e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_APB2_GRP1_EnableClock>:
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4313      	orrs	r3, r2
 8002548:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002568:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800256c:	f7ff ffaf 	bl	80024ce <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	202e      	movs	r0, #46	; 0x2e
 8002576:	f000 fc8e 	bl	8002e96 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800257a:	202e      	movs	r0, #46	; 0x2e
 800257c:	f000 fca5 	bl	8002eca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_IPCC_MspInit+0x44>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d113      	bne.n	80025be <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002596:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800259a:	f7ff ff98 	bl	80024ce <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	202c      	movs	r0, #44	; 0x2c
 80025a4:	f000 fc77 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80025a8:	202c      	movs	r0, #44	; 0x2c
 80025aa:	f000 fc8e 	bl	8002eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	202d      	movs	r0, #45	; 0x2d
 80025b4:	f000 fc6f 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80025b8:	202d      	movs	r0, #45	; 0x2d
 80025ba:	f000 fc86 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58000c00 	.word	0x58000c00

080025cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	2250      	movs	r2, #80	; 0x50
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f009 fa43 	bl	800ba68 <memset>
  if(hrtc->Instance==RTC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RTC_MspInit+0x64>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d11d      	bne.n	8002628 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fea3 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002608:	f7ff ff32 	bl	8002470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260c:	f7ff ff35 	bl	800247a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002610:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002614:	f7ff ff74 	bl	8002500 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2003      	movs	r0, #3
 800261e:	f000 fc3a 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002622:	2003      	movs	r0, #3
 8002624:	f000 fc51 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002628:	bf00      	nop
 800262a:	3758      	adds	r7, #88	; 0x58
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40002800 	.word	0x40002800

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09c      	sub	sp, #112	; 0x70
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2250      	movs	r2, #80	; 0x50
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f009 fa07 	bl	800ba68 <memset>
  if(huart->Instance==USART1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <HAL_UART_MspInit+0xe4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d155      	bne.n	8002710 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002664:	2301      	movs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fe69 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800267c:	f7ff fef8 	bl	8002470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002680:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002684:	f7ff ff55 	bl	8002532 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	2002      	movs	r0, #2
 800268a:	f7ff ff07 	bl	800249c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800269e:	2307      	movs	r3, #7
 80026a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026a6:	4619      	mov	r1, r3
 80026a8:	481c      	ldr	r0, [pc, #112]	; (800271c <HAL_UART_MspInit+0xe8>)
 80026aa:	f000 ff85 	bl	80035b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_UART_MspInit+0xf0>)
 80026b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026b6:	220f      	movs	r2, #15
 80026b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026bc:	2210      	movs	r2, #16
 80026be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026e4:	480e      	ldr	r0, [pc, #56]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026e6:	f000 fc35 	bl	8002f54 <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80026f0:	f7ff febe 	bl	8002470 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026f8:	679a      	str	r2, [r3, #120]	; 0x78
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_UART_MspInit+0xec>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2024      	movs	r0, #36	; 0x24
 8002706:	f000 fbc6 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800270a:	2024      	movs	r0, #36	; 0x24
 800270c:	f000 fbdd 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3770      	adds	r7, #112	; 0x70
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40013800 	.word	0x40013800
 800271c:	48000400 	.word	0x48000400
 8002720:	20000328 	.word	0x20000328
 8002724:	40020008 	.word	0x40020008

08002728 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b09c      	sub	sp, #112	; 0x70
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2250      	movs	r2, #80	; 0x50
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f009 f98d 	bl	800ba68 <memset>
  if(hpcd->Instance==USB)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_PCD_MspInit+0xa8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d136      	bne.n	80027c6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800275e:	2318      	movs	r3, #24
 8002760:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002766:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800276e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002772:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800277a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800277e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fddf 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002790:	f7ff fe6e 	bl	8002470 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	2001      	movs	r0, #1
 8002796:	f7ff fe81 	bl	800249c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800279a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800279e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80027ac:	230a      	movs	r3, #10
 80027ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f000 fefd 	bl	80035b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80027be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80027c2:	f7ff fe9d 	bl	8002500 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	3770      	adds	r7, #112	; 0x70
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40006800 	.word	0x40006800

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <NMI_Handler+0x4>

080027da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <MemManage_Handler+0x4>

080027e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002820:	f000 f9ba 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800282c:	f7fe ff82 	bl	8001734 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA1_Channel1_IRQHandler+0x10>)
 800283a:	f000 fd6c 	bl	8003316 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000328 	.word	0x20000328

08002848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <USART1_IRQHandler+0x10>)
 800284e:	f003 fab5 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000298 	.word	0x20000298

0800285c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002860:	f008 fd16 	bl	800b290 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800286c:	f008 fd48 	bl	800b300 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002878:	f001 f83e 	bl	80038f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}

08002880 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e00a      	b.n	80028a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002892:	f3af 8000 	nop.w
 8002896:	4601      	mov	r1, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	b2ca      	uxtb	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf0      	blt.n	8002892 <_read+0x12>
	}

return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_isatty>:

int _isatty(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return 1;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f009 f850 	bl	800b9f8 <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	220c      	movs	r2, #12
 800295c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20030000 	.word	0x20030000
 8002984:	00001000 	.word	0x00001000
 8002988:	2000067c 	.word	0x2000067c
 800298c:	200017d8 	.word	0x200017d8

08002990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <SystemInit+0x98>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <SystemInit+0x98>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <SystemInit+0x9c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029da:	f023 0305 	bic.w	r3, r3, #5
 80029de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <SystemInit+0xa0>)
 80029fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <SystemInit+0xa0>)
 8002a04:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	faf6fefb 	.word	0xfaf6fefb
 8002a30:	22041000 	.word	0x22041000

08002a34 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002a34:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a36:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a38:	3304      	adds	r3, #4

08002a3a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002a3e:	d3f9      	bcc.n	8002a34 <CopyDataInit>
  bx lr
 8002a40:	4770      	bx	lr

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a42:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a44:	3004      	adds	r0, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a46:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>
  bx lr
 8002a4a:	4770      	bx	lr

08002a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002a4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a50:	f7ff ff9e 	bl	8002990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <LoopForever+0x8>)
 8002a56:	490c      	ldr	r1, [pc, #48]	; (8002a88 <LoopForever+0xc>)
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <LoopForever+0x10>)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f7ff ffed 	bl	8002a3a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a60:	480b      	ldr	r0, [pc, #44]	; (8002a90 <LoopForever+0x14>)
 8002a62:	490c      	ldr	r1, [pc, #48]	; (8002a94 <LoopForever+0x18>)
 8002a64:	2300      	movs	r3, #0
 8002a66:	f7ff ffee 	bl	8002a46 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002a6a:	480b      	ldr	r0, [pc, #44]	; (8002a98 <LoopForever+0x1c>)
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <LoopForever+0x20>)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f7ff ffe9 	bl	8002a46 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a74:	f008 ffc6 	bl	800ba04 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002a78:	f7ff fa5e 	bl	8001f38 <main>

08002a7c <LoopForever>:

LoopForever:
  b LoopForever
 8002a7c:	e7fe      	b.n	8002a7c <LoopForever>
 8002a7e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002a80:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002a84:	20000004 	.word	0x20000004
 8002a88:	2000008c 	.word	0x2000008c
 8002a8c:	0800d8fc 	.word	0x0800d8fc
  INIT_BSS _sbss, _ebss
 8002a90:	2000020c 	.word	0x2000020c
 8002a94:	200017d8 	.word	0x200017d8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002a98:	200301e0 	.word	0x200301e0
 8002a9c:	20030a57 	.word	0x20030a57

08002aa0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC1_IRQHandler>
	...

08002aa4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6053      	str	r3, [r2, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e0042000 	.word	0xe0042000

08002ac4 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	6053      	str	r3, [r2, #4]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e0042000 	.word	0xe0042000

08002ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_Init+0x3c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <HAL_Init+0x3c>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afa:	2003      	movs	r0, #3
 8002afc:	f000 f9c0 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b00:	2000      	movs	r0, #0
 8002b02:	f000 f80f 	bl	8002b24 <HAL_InitTick>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	e001      	b.n	8002b16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b12:	f7ff fd27 	bl	8002564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b16:	79fb      	ldrb	r3, [r7, #7]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58004000 	.word	0x58004000

08002b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_InitTick+0x6c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d024      	beq.n	8002b82 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b38:	f002 f966 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_InitTick+0x6c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f9d6 	bl	8002f02 <HAL_SYSTICK_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10f      	bne.n	8002b7c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	d809      	bhi.n	8002b76 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b62:	2200      	movs	r2, #0
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b6a:	f000 f994 	bl	8002e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_InitTick+0x70>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e004      	b.n	8002b86 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e001      	b.n	8002b86 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	20000680 	.word	0x20000680

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000680 	.word	0x20000680

08002bd8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_GetTickPrio+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008

08002bf0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_GetTickFreq+0x14>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002c0c:	f7ff ff4a 	bl	8002aa4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002c18:	f7ff ff54 	bl	8002ac4 <LL_DBGMCU_EnableDBGStopMode>
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db12      	blt.n	8002cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	490a      	ldr	r1, [pc, #40]	; (8002d04 <__NVIC_DisableIRQ+0x44>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cec:	f3bf 8f4f 	dsb	sy
}
 8002cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf2:	f3bf 8f6f 	isb	sy
}
 8002cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0c      	blt.n	8002d34 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <__NVIC_SetPendingIRQ+0x38>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	3340      	adds	r3, #64	; 0x40
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0c      	blt.n	8002d70 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	; (8002d7c <__NVIC_ClearPendingIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fec9 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff fee0 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff90 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5f 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fed3 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fee3 	bl	8002cc0 <__NVIC_DisableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff96 	bl	8002e3c <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff feed 	bl	8002d08 <__NVIC_SetPendingIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fefd 	bl	8002d44 <__NVIC_ClearPendingIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e08e      	b.n	8003084 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_DMA_Init+0x138>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d80f      	bhi.n	8002f92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_DMA_Init+0x13c>)
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_DMA_Init+0x140>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	; (8003098 <HAL_DMA_Init+0x144>)
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f90:	e00e      	b.n	8002fb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_DMA_Init+0x148>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a3d      	ldr	r2, [pc, #244]	; (8003094 <HAL_DMA_Init+0x140>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_DMA_Init+0x14c>)
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa74 	bl	80034f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003010:	d102      	bne.n	8003018 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003024:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800302e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_DMA_Init+0x106>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d80c      	bhi.n	800305a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa93 	bl	800356c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e008      	b.n	800306c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020407 	.word	0x40020407
 8003090:	bffdfff8 	.word	0xbffdfff8
 8003094:	cccccccd 	.word	0xcccccccd
 8003098:	40020000 	.word	0x40020000
 800309c:	bffdfbf8 	.word	0xbffdfbf8
 80030a0:	40020400 	.word	0x40020400

080030a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Start_IT+0x20>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e066      	b.n	8003192 <HAL_DMA_Start_IT+0xee>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d155      	bne.n	8003184 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f9b9 	bl	8003474 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 020e 	orr.w	r2, r2, #14
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e00f      	b.n	800313c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 020a 	orr.w	r2, r2, #10
 800313a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e005      	b.n	8003190 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04f      	b.n	800324c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d008      	beq.n	80031ca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2204      	movs	r2, #4
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 020e 	bic.w	r2, r2, #14
 80031d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f003 021c 	and.w	r2, r3, #28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003216:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003238:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d005      	beq.n	800327c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2204      	movs	r2, #4
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e047      	b.n	800330c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 020e 	bic.w	r2, r2, #14
 800328a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f003 021c 	and.w	r2, r3, #28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
    }
  }
  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f003 031c 	and.w	r3, r3, #28
 8003336:	2204      	movs	r2, #4
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d026      	beq.n	8003390 <HAL_DMA_IRQHandler+0x7a>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d021      	beq.n	8003390 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0204 	bic.w	r2, r2, #4
 8003368:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 021c 	and.w	r2, r3, #28
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2104      	movs	r1, #4
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d071      	beq.n	800346a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800338e:	e06c      	b.n	800346a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f003 031c 	and.w	r3, r3, #28
 8003398:	2202      	movs	r2, #2
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02e      	beq.n	8003402 <HAL_DMA_IRQHandler+0xec>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d029      	beq.n	8003402 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020a 	bic.w	r2, r2, #10
 80033ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f003 021c 	and.w	r2, r3, #28
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	2102      	movs	r1, #2
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d038      	beq.n	800346a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003400:	e033      	b.n	800346a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f003 031c 	and.w	r3, r3, #28
 800340a:	2208      	movs	r2, #8
 800340c:	409a      	lsls	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d02a      	beq.n	800346c <HAL_DMA_IRQHandler+0x156>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d025      	beq.n	800346c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020e 	bic.w	r2, r2, #14
 800342e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f003 021c 	and.w	r2, r3, #28
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800346a:	bf00      	nop
 800346c:	bf00      	nop
}
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800348a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800349c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 021c 	and.w	r2, r3, #28
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d108      	bne.n	80034d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d2:	e007      	b.n	80034e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003500:	429a      	cmp	r2, r3
 8003502:	d80a      	bhi.n	800351a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003510:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6493      	str	r3, [r2, #72]	; 0x48
 8003518:	e007      	b.n	800352a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003524:	4413      	add	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b08      	subs	r3, #8
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003540:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40020407 	.word	0x40020407
 8003560:	4002081c 	.word	0x4002081c
 8003564:	cccccccd 	.word	0xcccccccd
 8003568:	40020880 	.word	0x40020880

0800356c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003590:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	1000823f 	.word	0x1000823f
 80035b4:	40020940 	.word	0x40020940

080035b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	e14c      	b.n	8003862 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 813e 	beq.w	800385c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d005      	beq.n	80035f8 <HAL_GPIO_Init+0x40>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d017      	beq.n	8003696 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d123      	bne.n	80036ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8098 	beq.w	800385c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800372c:	4a54      	ldr	r2, [pc, #336]	; (8003880 <HAL_GPIO_Init+0x2c8>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003756:	d019      	beq.n	800378c <HAL_GPIO_Init+0x1d4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <HAL_GPIO_Init+0x2cc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_GPIO_Init+0x1d0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1cc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a48      	ldr	r2, [pc, #288]	; (800388c <HAL_GPIO_Init+0x2d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1c8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a47      	ldr	r2, [pc, #284]	; (8003890 <HAL_GPIO_Init+0x2d8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1c4>
 8003778:	2304      	movs	r3, #4
 800377a:	e008      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 800377c:	2307      	movs	r3, #7
 800377e:	e006      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003780:	2303      	movs	r3, #3
 8003782:	e004      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003784:	2302      	movs	r3, #2
 8003786:	e002      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 800378c:	2300      	movs	r3, #0
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800379e:	4938      	ldr	r1, [pc, #224]	; (8003880 <HAL_GPIO_Init+0x2c8>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d0:	4a30      	ldr	r2, [pc, #192]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fa:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43db      	mvns	r3, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f aeab 	bne.w	80035c8 <HAL_GPIO_Init+0x10>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000
 8003884:	48000400 	.word	0x48000400
 8003888:	48000800 	.word	0x48000800
 800388c:	48000c00 	.word	0x48000c00
 8003890:	48001000 	.word	0x48001000
 8003894:	58000800 	.word	0x58000800

08003898 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e001      	b.n	80038ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
 80038d4:	4613      	mov	r3, r2
 80038d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	43db      	mvns	r3, r3
 800390c:	4906      	ldr	r1, [pc, #24]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 800390e:	4013      	ands	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f807 	bl	800392c <HAL_HSEM_FreeCallback>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58001500 	.word	0x58001500

0800392c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01e      	beq.n	8003990 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_IPCC_Init+0x60>)
 8003954:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe fe0e 	bl	8002584 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003968:	68b8      	ldr	r0, [r7, #8]
 800396a:	f000 f85b 	bl	8003a24 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f82c 	bl	80039d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800398e:	e001      	b.n	8003994 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	58000c00 	.word	0x58000c00

080039a4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e00f      	b.n	8003a06 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <IPCC_SetDefaultCallbacks+0x44>)
 80039f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3306      	adds	r3, #6
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <IPCC_SetDefaultCallbacks+0x48>)
 80039fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d9ec      	bls.n	80039e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	080039a5 	.word	0x080039a5
 8003a20:	080039bf 	.word	0x080039bf

08003a24 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a38:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4e:	b08b      	sub	sp, #44	; 0x2c
 8003a50:	af06      	add	r7, sp, #24
 8003a52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0d7      	b.n	8003c0e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe fe58 	bl	8002728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fb53 	bl	8007130 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e04c      	b.n	8003b2a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	440b      	add	r3, r1
 8003acc:	3336      	adds	r3, #54	; 0x36
 8003ace:	4602      	mov	r2, r0
 8003ad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3303      	adds	r3, #3
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	3338      	adds	r3, #56	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	333c      	adds	r3, #60	; 0x3c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3340      	adds	r3, #64	; 0x40
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	3301      	adds	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ad      	bcc.n	8003a90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e044      	b.n	8003bc4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3b5      	bcc.n	8003b3a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	687e      	ldr	r6, [r7, #4]
 8003bd6:	466d      	mov	r5, sp
 8003bd8:	f106 0410 	add.w	r4, r6, #16
 8003bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	1d33      	adds	r3, r6, #4
 8003be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f003 fabc 	bl	8007166 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f805 	bl	8003c16 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c16 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	58000400 	.word	0x58000400

08003c8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	58000400 	.word	0x58000400

08003ca8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cba:	d101      	bne.n	8003cc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_HSE_Enable>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_HSE_Disable>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_RCC_HSE_IsReady>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1a:	d101      	bne.n	8003d20 <LL_RCC_HSE_IsReady+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_RCC_HSE_IsReady+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_RCC_HSI_Enable>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_HSI_Disable>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_HSI_IsReady>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d101      	bne.n	8003d80 <LL_RCC_HSI_IsReady+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_RCC_HSI_IsReady+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_HSI48_Enable>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_RCC_HSI48_Disable>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <LL_RCC_HSI48_IsReady>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d101      	bne.n	8003e12 <LL_RCC_HSI48_IsReady+0x18>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <LL_RCC_HSI48_IsReady+0x1a>
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_RCC_LSE_Enable>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_RCC_LSE_Disable>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_LSE_EnableBypass>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_RCC_LSE_DisableBypass>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_RCC_LSE_IsReady>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d101      	bne.n	8003ebe <LL_RCC_LSE_IsReady+0x18>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <LL_RCC_LSE_IsReady+0x1a>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_RCC_LSI1_Enable>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_LSI1_Disable>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_RCC_LSI1_IsReady>:
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d101      	bne.n	8003f26 <LL_RCC_LSI1_IsReady+0x18>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_RCC_LSI1_IsReady+0x1a>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <LL_RCC_LSI2_Enable>:
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_RCC_LSI2_Disable>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_LSI2_IsReady>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d101      	bne.n	8003f8e <LL_RCC_LSI2_IsReady+0x18>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <LL_RCC_LSI2_IsReady+0x1a>
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_RCC_LSI2_SetTrimming>:
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_RCC_MSI_Enable>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_MSI_Disable>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	6013      	str	r3, [r2, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_RCC_MSI_IsReady>:
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d101      	bne.n	800401a <LL_RCC_MSI_IsReady+0x16>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <LL_RCC_MSI_IsReady+0x18>
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_RCC_MSI_SetRange>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_RCC_MSI_GetRange>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2bb0      	cmp	r3, #176	; 0xb0
 8004064:	d901      	bls.n	800406a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004066:	23b0      	movs	r3, #176	; 0xb0
 8004068:	607b      	str	r3, [r7, #4]
  return msiRange;
 800406a:	687b      	ldr	r3, [r7, #4]
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_SetSysClkSource>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 0203 	bic.w	r2, r3, #3
 80040b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_GetSysClkSource>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_SetAHBPrescaler>:
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_C2_RCC_SetAHBPrescaler>:
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800411a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_SetAHB4Prescaler>:
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004142:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004146:	f023 020f 	bic.w	r2, r3, #15
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_SetAPB1Prescaler>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_RCC_SetAPB2Prescaler>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_GetAHBPrescaler>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_RCC_GetAHB4Prescaler>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_GetAPB1Prescaler>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_GetAPB2Prescaler>:
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_RCC_PLL_Enable>:
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800421c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_RCC_PLL_Disable>:
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004248:	6013      	str	r3, [r2, #0]
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_RCC_PLL_IsReady>:
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004266:	d101      	bne.n	800426c <LL_RCC_PLL_IsReady+0x18>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <LL_RCC_PLL_IsReady+0x1a>
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_PLL_GetN>:
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_RCC_PLL_GetR>:
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_RCC_PLL_GetDivider>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_PLL_GetMainSource>:
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0303 	and.w	r3, r3, #3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_RCC_IsActiveFlag_HPRE>:
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d101      	bne.n	80042f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004312:	d101      	bne.n	8004318 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d101      	bne.n	800433e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800435c:	d101      	bne.n	8004362 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004380:	d101      	bne.n	8004386 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b08d      	sub	sp, #52	; 0x34
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e37f      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8092 	beq.w	80044d8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b4:	f7ff fe89 	bl	80040ca <LL_RCC_GetSysClkSource>
 80043b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ba:	f7ff ff82 	bl	80042c2 <LL_RCC_PLL_GetMainSource>
 80043be:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x3e>
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d14c      	bne.n	8004466 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d149      	bne.n	8004466 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043d2:	f7ff fe17 	bl	8004004 <LL_RCC_MSI_IsReady>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x54>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e35e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80043ec:	f7ff fe2f 	bl	800404e <LL_RCC_MSI_GetRange>
 80043f0:	4603      	mov	r3, r0
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d914      	bls.n	8004420 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd44 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e34d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe09 	bl	8004026 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe2d 	bl	8004078 <LL_RCC_MSI_SetCalibTrimming>
 800441e:	e013      	b.n	8004448 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fdfe 	bl	8004026 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fe22 	bl	8004078 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fd25 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e32e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004448:	f000 fcde 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 800444c:	4603      	mov	r3, r0
 800444e:	4aa5      	ldr	r2, [pc, #660]	; (80046e4 <HAL_RCC_OscConfig+0x350>)
 8004450:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004452:	4ba5      	ldr	r3, [pc, #660]	; (80046e8 <HAL_RCC_OscConfig+0x354>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fb64 	bl	8002b24 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d039      	beq.n	80044d6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e31f      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01e      	beq.n	80044ac <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800446e:	f7ff fdab 	bl	8003fc8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004472:	f7fe fba5 	bl	8002bc0 <HAL_GetTick>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800447a:	f7fe fba1 	bl	8002bc0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e30c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 800448c:	f7ff fdba 	bl	8004004 <LL_RCC_MSI_IsReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f1      	beq.n	800447a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fdc3 	bl	8004026 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fde7 	bl	8004078 <LL_RCC_MSI_SetCalibTrimming>
 80044aa:	e015      	b.n	80044d8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ac:	f7ff fd9b 	bl	8003fe6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b0:	f7fe fb86 	bl	8002bc0 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b8:	f7fe fb82 	bl	8002bc0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e2ed      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044ca:	f7ff fd9b 	bl	8004004 <LL_RCC_MSI_IsReady>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f1      	bne.n	80044b8 <HAL_RCC_OscConfig+0x124>
 80044d4:	e000      	b.n	80044d8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044d6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d04e      	beq.n	8004582 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e4:	f7ff fdf1 	bl	80040ca <LL_RCC_GetSysClkSource>
 80044e8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ea:	f7ff feea 	bl	80042c2 <LL_RCC_PLL_GetMainSource>
 80044ee:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x16e>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	d10d      	bne.n	8004518 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d10a      	bne.n	8004518 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004502:	f7ff fc01 	bl	8003d08 <LL_RCC_HSE_IsReady>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d039      	beq.n	8004580 <HAL_RCC_OscConfig+0x1ec>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d135      	bne.n	8004580 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e2c6      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d102      	bne.n	8004528 <HAL_RCC_OscConfig+0x194>
 8004522:	f7ff fbd3 	bl	8003ccc <LL_RCC_HSE_Enable>
 8004526:	e001      	b.n	800452c <HAL_RCC_OscConfig+0x198>
 8004528:	f7ff fbdf 	bl	8003cea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d012      	beq.n	800455a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fb44 	bl	8002bc0 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fe fb40 	bl	8002bc0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e2ab      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 800454e:	f7ff fbdb 	bl	8003d08 <LL_RCC_HSE_IsReady>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f1      	beq.n	800453c <HAL_RCC_OscConfig+0x1a8>
 8004558:	e013      	b.n	8004582 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe fb31 	bl	8002bc0 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004562:	f7fe fb2d 	bl	8002bc0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	; 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e298      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004574:	f7ff fbc8 	bl	8003d08 <LL_RCC_HSE_IsReady>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f1      	bne.n	8004562 <HAL_RCC_OscConfig+0x1ce>
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d051      	beq.n	8004632 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458e:	f7ff fd9c 	bl	80040ca <LL_RCC_GetSysClkSource>
 8004592:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004594:	f7ff fe95 	bl	80042c2 <LL_RCC_PLL_GetMainSource>
 8004598:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x218>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d113      	bne.n	80045ce <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d110      	bne.n	80045ce <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ac:	f7ff fbdc 	bl	8003d68 <LL_RCC_HSI_IsReady>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x22e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e271      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fbe0 	bl	8003d8c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	e031      	b.n	8004632 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d019      	beq.n	800460a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d6:	f7ff fba9 	bl	8003d2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fe faf1 	bl	8002bc0 <HAL_GetTick>
 80045de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e2:	f7fe faed 	bl	8002bc0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e258      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80045f4:	f7ff fbb8 	bl	8003d68 <LL_RCC_HSI_IsReady>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f1      	beq.n	80045e2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fbc2 	bl	8003d8c <LL_RCC_HSI_SetCalibTrimming>
 8004608:	e013      	b.n	8004632 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460a:	f7ff fb9e 	bl	8003d4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe fad7 	bl	8002bc0 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fe fad3 	bl	8002bc0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e23e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004628:	f7ff fb9e 	bl	8003d68 <LL_RCC_HSI_IsReady>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f1      	bne.n	8004616 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a4 	beq.w	8004794 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d077      	beq.n	8004744 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d04b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004660:	f7ff fc55 	bl	8003f0e <LL_RCC_LSI1_IsReady>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800466a:	f7ff fc2e 	bl	8003eca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800466e:	f7fe faa7 	bl	8002bc0 <HAL_GetTick>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004676:	f7fe faa3 	bl	8002bc0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e20e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004688:	f7ff fc41 	bl	8003f0e <LL_RCC_LSI1_IsReady>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f1      	beq.n	8004676 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004692:	f7ff fc4e 	bl	8003f32 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fe fa93 	bl	8002bc0 <HAL_GetTick>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800469e:	f7fe fa8f 	bl	8002bc0 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1fa      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046b0:	f7ff fc61 	bl	8003f76 <LL_RCC_LSI2_IsReady>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f1      	beq.n	800469e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fc6b 	bl	8003f9a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046c4:	f7ff fc12 	bl	8003eec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fe fa7a 	bl	8002bc0 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046ce:	e00d      	b.n	80046ec <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046d0:	f7fe fa76 	bl	8002bc0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d906      	bls.n	80046ec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1e1      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
 80046e2:	bf00      	nop
 80046e4:	20000004 	.word	0x20000004
 80046e8:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046ec:	f7ff fc0f 	bl	8003f0e <LL_RCC_LSI1_IsReady>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ec      	bne.n	80046d0 <HAL_RCC_OscConfig+0x33c>
 80046f6:	e04d      	b.n	8004794 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80046f8:	f7ff fbe7 	bl	8003eca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fa60 	bl	8002bc0 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004704:	f7fe fa5c 	bl	8002bc0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1c7      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004716:	f7ff fbfa 	bl	8003f0e <LL_RCC_LSI1_IsReady>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f1      	beq.n	8004704 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004720:	f7ff fc18 	bl	8003f54 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004726:	f7fe fa4b 	bl	8002bc0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b03      	cmp	r3, #3
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e1b6      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004738:	f7ff fc1d 	bl	8003f76 <LL_RCC_LSI2_IsReady>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f1      	bne.n	8004726 <HAL_RCC_OscConfig+0x392>
 8004742:	e027      	b.n	8004794 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004744:	f7ff fc06 	bl	8003f54 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe fa3a 	bl	8002bc0 <HAL_GetTick>
 800474c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004750:	f7fe fa36 	bl	8002bc0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b03      	cmp	r3, #3
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1a1      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004762:	f7ff fc08 	bl	8003f76 <LL_RCC_LSI2_IsReady>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f1      	bne.n	8004750 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800476c:	f7ff fbbe 	bl	8003eec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe fa26 	bl	8002bc0 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004778:	f7fe fa22 	bl	8002bc0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e18d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800478a:	f7ff fbc0 	bl	8003f0e <LL_RCC_LSI1_IsReady>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f1      	bne.n	8004778 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a0:	4ba7      	ldr	r3, [pc, #668]	; (8004a40 <HAL_RCC_OscConfig+0x6ac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d114      	bne.n	80047d6 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047ac:	f7ff fa5e 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b0:	f7fe fa06 	bl	8002bc0 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b8:	f7fe fa02 	bl	8002bc0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e16d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	4b9d      	ldr	r3, [pc, #628]	; (8004a40 <HAL_RCC_OscConfig+0x6ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d102      	bne.n	80047e4 <HAL_RCC_OscConfig+0x450>
 80047de:	f7ff fb1e 	bl	8003e1e <LL_RCC_LSE_Enable>
 80047e2:	e00c      	b.n	80047fe <HAL_RCC_OscConfig+0x46a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d104      	bne.n	80047f6 <HAL_RCC_OscConfig+0x462>
 80047ec:	f7ff fb39 	bl	8003e62 <LL_RCC_LSE_EnableBypass>
 80047f0:	f7ff fb15 	bl	8003e1e <LL_RCC_LSE_Enable>
 80047f4:	e003      	b.n	80047fe <HAL_RCC_OscConfig+0x46a>
 80047f6:	f7ff fb23 	bl	8003e40 <LL_RCC_LSE_Disable>
 80047fa:	f7ff fb43 	bl	8003e84 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d014      	beq.n	8004830 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fe f9db 	bl	8002bc0 <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fe f9d7 	bl	8002bc0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e140      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004824:	f7ff fb3f 	bl	8003ea6 <LL_RCC_LSE_IsReady>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ef      	beq.n	800480e <HAL_RCC_OscConfig+0x47a>
 800482e:	e013      	b.n	8004858 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fe f9c6 	bl	8002bc0 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fe f9c2 	bl	8002bc0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e12b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800484e:	f7ff fb2a 	bl	8003ea6 <LL_RCC_LSE_IsReady>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ef      	bne.n	8004838 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02c      	beq.n	80048be <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d014      	beq.n	8004896 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800486c:	f7ff faa3 	bl	8003db6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe f9a6 	bl	8002bc0 <HAL_GetTick>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004878:	f7fe f9a2 	bl	8002bc0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e10d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800488a:	f7ff fab6 	bl	8003dfa <LL_RCC_HSI48_IsReady>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f1      	beq.n	8004878 <HAL_RCC_OscConfig+0x4e4>
 8004894:	e013      	b.n	80048be <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004896:	f7ff fa9f 	bl	8003dd8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fe f991 	bl	8002bc0 <HAL_GetTick>
 800489e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a2:	f7fe f98d 	bl	8002bc0 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0f8      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048b4:	f7ff faa1 	bl	8003dfa <LL_RCC_HSI48_IsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f1      	bne.n	80048a2 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80ee 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c8:	f7ff fbff 	bl	80040ca <LL_RCC_GetSysClkSource>
 80048cc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	2b02      	cmp	r3, #2
 80048dc:	f040 80b4 	bne.w	8004a48 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d123      	bne.n	8004936 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d11c      	bne.n	8004936 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d114      	bne.n	8004936 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d10d      	bne.n	8004936 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d05d      	beq.n	80049f2 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b0c      	cmp	r3, #12
 800493a:	d058      	beq.n	80049ee <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e0ab      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800494e:	f7ff fc72 	bl	8004236 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004952:	f7fe f935 	bl	8002bc0 <HAL_GetTick>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fe f931 	bl	8002bc0 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e09c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ef      	bne.n	800495a <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_OscConfig+0x6b0>)
 8004982:	4013      	ands	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800498c:	4311      	orrs	r1, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004992:	0212      	lsls	r2, r2, #8
 8004994:	4311      	orrs	r1, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800499a:	4311      	orrs	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049a0:	4311      	orrs	r1, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049a6:	430a      	orrs	r2, r1
 80049a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049b0:	f7ff fc32 	bl	8004218 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c4:	f7fe f8fc 	bl	8002bc0 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe f8f8 	bl	8002bc0 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e063      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ef      	beq.n	80049cc <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ec:	e05a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e059      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d151      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a00:	f7ff fc0a 	bl	8004218 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a14:	f7fe f8d4 	bl	8002bc0 <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fe f8d0 	bl	8002bc0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e03b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCC_OscConfig+0x688>
 8004a3c:	e032      	b.n	8004aa4 <HAL_RCC_OscConfig+0x710>
 8004a3e:	bf00      	nop
 8004a40:	58000400 	.word	0x58000400
 8004a44:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	f7ff fbf2 	bl	8004236 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fe f8a3 	bl	8002bc0 <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe f89f 	bl	8002bc0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ef      	bne.n	8004a7e <HAL_RCC_OscConfig+0x6ea>
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3734      	adds	r7, #52	; 0x34
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	bf00      	nop

08004ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e12d      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b98      	ldr	r3, [pc, #608]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d91b      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b95      	ldr	r3, [pc, #596]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0207 	bic.w	r2, r3, #7
 8004ada:	4993      	ldr	r1, [pc, #588]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fe f86d 	bl	8002bc0 <HAL_GetTick>
 8004ae6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004aea:	f7fe f869 	bl	8002bc0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e111      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afc:	4b8a      	ldr	r3, [pc, #552]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d1ef      	bne.n	8004aea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fae1 	bl	80040e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b20:	f7fe f84e 	bl	8002bc0 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b28:	f7fe f84a 	bl	8002bc0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0f2      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b3a:	f7ff fbce 	bl	80042da <LL_RCC_IsActiveFlag_HPRE>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f1      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d016      	beq.n	8004b7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fad8 	bl	800410a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b5a:	f7fe f831 	bl	8002bc0 <HAL_GetTick>
 8004b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b62:	f7fe f82d 	bl	8002bc0 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0d5      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b74:	f7ff fbc3 	bl	80042fe <LL_RCC_IsActiveFlag_C2HPRE>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f1      	beq.n	8004b62 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fad1 	bl	8004136 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b94:	f7fe f814 	bl	8002bc0 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b9c:	f7fe f810 	bl	8002bc0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0b8      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bae:	f7ff fbb9 	bl	8004324 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f1      	beq.n	8004b9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff facb 	bl	8004164 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bce:	f7fd fff7 	bl	8002bc0 <HAL_GetTick>
 8004bd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bd6:	f7fd fff3 	bl	8002bc0 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e09b      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004be8:	f7ff fbaf 	bl	800434a <LL_RCC_IsActiveFlag_PPRE1>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f1      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fac1 	bl	800418c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c0a:	f7fd ffd9 	bl	8002bc0 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c12:	f7fd ffd5 	bl	8002bc0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e07d      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c24:	f7ff fba3 	bl	800436e <LL_RCC_IsActiveFlag_PPRE2>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f1      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d043      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c42:	f7ff f861 	bl	8003d08 <LL_RCC_HSE_IsReady>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11e      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e067      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d106      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c58:	f7ff fafc 	bl	8004254 <LL_RCC_PLL_IsReady>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d113      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e05c      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c6e:	f7ff f9c9 	bl	8004004 <LL_RCC_MSI_IsReady>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d108      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e051      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c7c:	f7ff f874 	bl	8003d68 <LL_RCC_HSI_IsReady>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e04a      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fa07 	bl	80040a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fd ff94 	bl	8002bc0 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fd ff90 	bl	8002bc0 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e036      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	f7ff fa0a 	bl	80040ca <LL_RCC_GetSysClkSource>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d1ec      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc2:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d21b      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 0207 	bic.w	r2, r3, #7
 8004cd8:	4913      	ldr	r1, [pc, #76]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fd ff6e 	bl	8002bc0 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ce8:	f7fd ff6a 	bl	8002bc0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e012      	b.n	8004d20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_ClockConfig+0x278>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1ef      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d08:	f000 f87e 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_RCC_ClockConfig+0x27c>)
 8004d10:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d12:	f7fd ff61 	bl	8002bd8 <HAL_GetTickPrio>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fd ff03 	bl	8002b24 <HAL_InitTick>
 8004d1e:	4603      	mov	r3, r0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	58004000 	.word	0x58004000
 8004d2c:	20000004 	.word	0x20000004

08004d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d36:	f7ff f9c8 	bl	80040ca <LL_RCC_GetSysClkSource>
 8004d3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d42:	f7ff f984 	bl	800404e <LL_RCC_MSI_GetRange>
 8004d46:	4603      	mov	r3, r0
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e04b      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d102      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d5e:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e045      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d10a      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d6a:	f7fe ff9d 	bl	8003ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e03a      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e037      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d80:	f7ff fa9f 	bl	80042c2 <LL_RCC_PLL_GetMainSource>
 8004d84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x64>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x6a>
 8004d92:	e00d      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d96:	60bb      	str	r3, [r7, #8]
        break;
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d9a:	f7fe ff85 	bl	8003ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004da4:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004da6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004da8:	e00d      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004dac:	60bb      	str	r3, [r7, #8]
        break;
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004db0:	f7ff f94d 	bl	800404e <LL_RCC_MSI_GetRange>
 8004db4:	4603      	mov	r3, r0
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	60bb      	str	r3, [r7, #8]
        break;
 8004dc4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004dc6:	f7ff fa57 	bl	8004278 <LL_RCC_PLL_GetN>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	fb03 f402 	mul.w	r4, r3, r2
 8004dd2:	f7ff fa6a 	bl	80042aa <LL_RCC_PLL_GetDivider>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	3301      	adds	r3, #1
 8004ddc:	fbb4 f4f3 	udiv	r4, r4, r3
 8004de0:	f7ff fa57 	bl	8004292 <LL_RCC_PLL_GetR>
 8004de4:	4603      	mov	r3, r0
 8004de6:	0f5b      	lsrs	r3, r3, #29
 8004de8:	3301      	adds	r3, #1
 8004dea:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0800d744 	.word	0x0800d744
 8004e00:	00f42400 	.word	0x00f42400
 8004e04:	01e84800 	.word	0x01e84800

08004e08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b598      	push	{r3, r4, r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e0c:	f7ff ff90 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8004e10:	4604      	mov	r4, r0
 8004e12:	f7ff f9cf 	bl	80041b4 <LL_RCC_GetAHBPrescaler>
 8004e16:	4603      	mov	r3, r0
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x24>)
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd98      	pop	{r3, r4, r7, pc}
 8004e2c:	0800d6e4 	.word	0x0800d6e4

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b598      	push	{r3, r4, r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e34:	f7ff ffe8 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e38:	4604      	mov	r4, r0
 8004e3a:	f7ff f9d5 	bl	80041e8 <LL_RCC_GetAPB1Prescaler>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd98      	pop	{r3, r4, r7, pc}
 8004e58:	0800d724 	.word	0x0800d724

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b598      	push	{r3, r4, r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e60:	f7ff ffd2 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e64:	4604      	mov	r4, r0
 8004e66:	f7ff f9cb 	bl	8004200 <LL_RCC_GetAPB2Prescaler>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	0adb      	lsrs	r3, r3, #11
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd98      	pop	{r3, r4, r7, pc}
 8004e84:	0800d724 	.word	0x0800d724

08004e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2bb0      	cmp	r3, #176	; 0xb0
 8004e94:	d903      	bls.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e007      	b.n	8004eae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	4a11      	ldr	r2, [pc, #68]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004eae:	f7ff f98d 	bl	80041cc <LL_RCC_GetAHB4Prescaler>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	0c9c      	lsrs	r4, r3, #18
 8004ed2:	f7fe fedb 	bl	8003c8c <HAL_PWREx_GetVoltageRange>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 f80c 	bl	8004ef8 <RCC_SetFlashLatency>
 8004ee0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0800d744 	.word	0x0800d744
 8004ef0:	0800d6e4 	.word	0x0800d6e4
 8004ef4:	431bde83 	.word	0x431bde83

08004ef8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b093      	sub	sp, #76	; 0x4c
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004f02:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <RCC_SetFlashLatency+0xe8>)
 8004f04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004f0e:	4a35      	ldr	r2, [pc, #212]	; (8004fe4 <RCC_SetFlashLatency+0xec>)
 8004f10:	f107 031c 	add.w	r3, r7, #28
 8004f14:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <RCC_SetFlashLatency+0xf0>)
 8004f1c:	f107 040c 	add.w	r4, r7, #12
 8004f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f26:	2300      	movs	r3, #0
 8004f28:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f30:	d11a      	bne.n	8004f68 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	643b      	str	r3, [r7, #64]	; 0x40
 8004f36:	e013      	b.n	8004f60 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	3348      	adds	r3, #72	; 0x48
 8004f3e:	443b      	add	r3, r7
 8004f40:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d807      	bhi.n	8004f5a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3348      	adds	r3, #72	; 0x48
 8004f50:	443b      	add	r3, r7
 8004f52:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f58:	e020      	b.n	8004f9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d9e8      	bls.n	8004f38 <RCC_SetFlashLatency+0x40>
 8004f66:	e019      	b.n	8004f9c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6c:	e013      	b.n	8004f96 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	3348      	adds	r3, #72	; 0x48
 8004f74:	443b      	add	r3, r7
 8004f76:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d807      	bhi.n	8004f90 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	3348      	adds	r3, #72	; 0x48
 8004f86:	443b      	add	r3, r7
 8004f88:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f8e:	e005      	b.n	8004f9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f92:	3301      	adds	r3, #1
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d9e8      	bls.n	8004f6e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <RCC_SetFlashLatency+0xf4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 0207 	bic.w	r2, r3, #7
 8004fa4:	4911      	ldr	r1, [pc, #68]	; (8004fec <RCC_SetFlashLatency+0xf4>)
 8004fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fac:	f7fd fe08 	bl	8002bc0 <HAL_GetTick>
 8004fb0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fb2:	e008      	b.n	8004fc6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fb4:	f7fd fe04 	bl	8002bc0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e007      	b.n	8004fd6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <RCC_SetFlashLatency+0xf4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1ef      	bne.n	8004fb4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	374c      	adds	r7, #76	; 0x4c
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	0800cdcc 	.word	0x0800cdcc
 8004fe4:	0800cddc 	.word	0x0800cddc
 8004fe8:	0800cde8 	.word	0x0800cde8
 8004fec:	58004000 	.word	0x58004000

08004ff0 <LL_RCC_LSE_IsEnabled>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <LL_RCC_LSE_IsEnabled+0x18>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <LL_RCC_LSE_IsEnabled+0x1a>
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_LSE_IsReady>:
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d101      	bne.n	800502c <LL_RCC_LSE_IsReady+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_RCC_LSE_IsReady+0x1a>
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_MSI_EnablePLLMode>:
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <LL_RCC_SetRFWKPClockSource>:
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005066:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800506a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_RCC_SetSMPSClockSource>:
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f023 0203 	bic.w	r2, r3, #3
 8005094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4313      	orrs	r3, r2
 800509c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_RCC_SetSMPSPrescaler>:
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_SetUSARTClockSource>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f023 0203 	bic.w	r2, r3, #3
 80050e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LL_RCC_SetLPUARTClockSource>:
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_SetI2CClockSource>:
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005142:	43db      	mvns	r3, r3
 8005144:	401a      	ands	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800514e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_RCC_SetLPTIMClockSource>:
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	43db      	mvns	r3, r3
 800517c:	401a      	ands	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_RCC_SetSAIClockSource>:
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <LL_RCC_SetRNGClockSource>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_RCC_SetCLK48ClockSource>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_RCC_SetUSBClockSource>:
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff ffe3 	bl	80051f0 <LL_RCC_SetCLK48ClockSource>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <LL_RCC_SetADCClockSource>:
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <LL_RCC_SetRTCClockSource>:
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_RCC_GetRTCClockSource>:
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <LL_RCC_ForceBackupDomainReset>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80052c6:	b480      	push	{r7}
 80052c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_RCC_PLLSAI1_Enable>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052fa:	6013      	str	r3, [r2, #0]
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_RCC_PLLSAI1_Disable>:
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005318:	6013      	str	r3, [r2, #0]
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <LL_RCC_PLLSAI1_IsReady>:
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005336:	d101      	bne.n	800533c <LL_RCC_PLLSAI1_IsReady+0x18>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005354:	2300      	movs	r3, #0
 8005356:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d034      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800536c:	d021      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800536e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005372:	d81b      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005378:	d01d      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800537a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800537e:	d815      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005388:	d110      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800539a:	e00d      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f94d 	bl	8005640 <RCCEx_PLLSAI1_ConfigNP>
 80053a6:	4603      	mov	r3, r0
 80053a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053aa:	e005      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	77fb      	strb	r3, [r7, #31]
        break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d105      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fee8 	bl	8005198 <LL_RCC_SetSAIClockSource>
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d046      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80053da:	f7ff ff56 	bl	800528a <LL_RCC_GetRTCClockSource>
 80053de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d03c      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053ea:	f7fe fc3f 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff30 	bl	800525e <LL_RCC_SetRTCClockSource>
 80053fe:	e02e      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800540a:	f7ff ff4b 	bl	80052a4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800540e:	f7ff ff5a 	bl	80052c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800542a:	f7ff fde1 	bl	8004ff0 <LL_RCC_LSE_IsEnabled>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d114      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005434:	f7fd fbc4 	bl	8002bc0 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800543a:	e00b      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fd fbc0 	bl	8002bc0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d902      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	77fb      	strb	r3, [r7, #31]
              break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005454:	f7ff fdde 	bl	8005014 <LL_RCC_LSE_IsReady>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d1ee      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800545e:	7ffb      	ldrb	r3, [r7, #31]
 8005460:	77bb      	strb	r3, [r7, #30]
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fe2a 	bl	80050d2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fe35 	bl	80050fe <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fe5d 	bl	8005164 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fe52 	bl	8005164 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fe2a 	bl	800512a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fe1f 	bl	800512a <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d022      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe8d 	bl	800521c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800550a:	d107      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005524:	d10b      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f8e3 	bl	80056f6 <RCCEx_PLLSAI1_ConfigNQ>
 8005530:	4603      	mov	r3, r0
 8005532:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800553a:	7ffb      	ldrb	r3, [r7, #31]
 800553c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02b      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d008      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555c:	d003      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fe2a 	bl	80051c4 <LL_RCC_SetRNGClockSource>
 8005570:	e00a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	2000      	movs	r0, #0
 800557e:	f7ff fe21 	bl	80051c4 <LL_RCC_SetRNGClockSource>
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff fe34 	bl	80051f0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005590:	d107      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d022      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fe3d 	bl	8005232 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c0:	d107      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055da:	d10b      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f8e3 	bl	80057ac <RCCEx_PLLSAI1_ConfigNR>
 80055e6:	4603      	mov	r3, r0
 80055e8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80055ea:	7ffb      	ldrb	r3, [r7, #31]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
 80055f2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fd26 	bl	8005056 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fd45 	bl	80050aa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fd2c 	bl	8005082 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800562a:	7fbb      	ldrb	r3, [r7, #30]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005638:	f7ff fcfe 	bl	8005038 <LL_RCC_MSI_EnablePLLMode>
}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}

08005640 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800564c:	f7ff fe5b 	bl	8005306 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005650:	f7fd fab6 	bl	8002bc0 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fd fab2 	bl	8002bc0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
      break;
 800566a:	e004      	b.n	8005676 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800566c:	f7ff fe5a 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d137      	bne.n	80056ec <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005690:	4313      	orrs	r3, r2
 8005692:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056aa:	f7ff fe1d 	bl	80052e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ae:	f7fd fa87 	bl	8002bc0 <HAL_GetTick>
 80056b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056b4:	e009      	b.n	80056ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b6:	f7fd fa83 	bl	8002bc0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d902      	bls.n	80056ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	73fb      	strb	r3, [r7, #15]
        break;
 80056c8:	e004      	b.n	80056d4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056ca:	f7ff fe2b 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d1f0      	bne.n	80056b6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005702:	f7ff fe00 	bl	8005306 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005706:	f7fd fa5b 	bl	8002bc0 <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800570c:	e009      	b.n	8005722 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570e:	f7fd fa57 	bl	8002bc0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d902      	bls.n	8005722 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e004      	b.n	800572c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005722:	f7ff fdff 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d137      	bne.n	80057a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005746:	4313      	orrs	r3, r2
 8005748:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800574a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575c:	4313      	orrs	r3, r2
 800575e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005760:	f7ff fdc2 	bl	80052e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005764:	f7fd fa2c 	bl	8002bc0 <HAL_GetTick>
 8005768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800576a:	e009      	b.n	8005780 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800576c:	f7fd fa28 	bl	8002bc0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
        break;
 800577e:	e004      	b.n	800578a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005780:	f7ff fdd0 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d1f0      	bne.n	800576c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d108      	bne.n	80057a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579e:	4313      	orrs	r3, r2
 80057a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057b8:	f7ff fda5 	bl	8005306 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd fa00 	bl	8002bc0 <HAL_GetTick>
 80057c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057c2:	e009      	b.n	80057d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057c4:	f7fd f9fc 	bl	8002bc0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d902      	bls.n	80057d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	73fb      	strb	r3, [r7, #15]
      break;
 80057d6:	e004      	b.n	80057e2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057d8:	f7ff fda4 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d137      	bne.n	8005858 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057fc:	4313      	orrs	r3, r2
 80057fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005812:	4313      	orrs	r3, r2
 8005814:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005816:	f7ff fd67 	bl	80052e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581a:	f7fd f9d1 	bl	8002bc0 <HAL_GetTick>
 800581e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005820:	e009      	b.n	8005836 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005822:	f7fd f9cd 	bl	8002bc0 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d902      	bls.n	8005836 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	73fb      	strb	r3, [r7, #15]
        break;
 8005834:	e004      	b.n	8005840 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005836:	f7ff fd75 	bl	8005324 <LL_RCC_PLLSAI1_IsReady>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d1f0      	bne.n	8005822 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e090      	b.n	8005996 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc fe9f 	bl	80025cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	22ca      	movs	r2, #202	; 0xca
 800589c:	625a      	str	r2, [r3, #36]	; 0x24
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2253      	movs	r2, #83	; 0x53
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f89f 	bl	80059ea <RTC_EnterInitMode>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	22ff      	movs	r2, #255	; 0xff
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2204      	movs	r2, #4
 80058be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e067      	b.n	8005996 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6899      	ldr	r1, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68d2      	ldr	r2, [r2, #12]
 8005900:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6919      	ldr	r1, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	041a      	lsls	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005924:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0203 	bic.w	r2, r2, #3
 8005934:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d113      	bne.n	8005984 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f81e 	bl	800599e <HAL_RTC_WaitForSynchro>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00d      	beq.n	8005984 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	22ff      	movs	r2, #255	; 0xff
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e008      	b.n	8005996 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	22ff      	movs	r2, #255	; 0xff
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80059b6:	f7fd f903 	bl	8002bc0 <HAL_GetTick>
 80059ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059bc:	e009      	b.n	80059d2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059be:	f7fd f8ff 	bl	8002bc0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059cc:	d901      	bls.n	80059d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e007      	b.n	80059e2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ee      	beq.n	80059be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d119      	bne.n	8005a34 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a0a:	f7fd f8d9 	bl	8002bc0 <HAL_GetTick>
 8005a0e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a10:	e009      	b.n	8005a26 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a12:	f7fd f8d5 	bl	8002bc0 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a20:	d901      	bls.n	8005a26 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e007      	b.n	8005a36 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0ee      	beq.n	8005a12 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0a8      	b.n	8005bac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	22ca      	movs	r2, #202	; 0xca
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2253      	movs	r2, #83	; 0x53
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005a88:	f7fd f89a 	bl	8002bc0 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005a8e:	e015      	b.n	8005abc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a90:	f7fd f896 	bl	8002bc0 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9e:	d90d      	bls.n	8005abc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2203      	movs	r2, #3
 8005aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e077      	b.n	8005bac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e2      	bne.n	8005a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005aea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005aec:	f7fd f868 	bl	8002bc0 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005af2:	e015      	b.n	8005b20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005af4:	f7fd f864 	bl	8002bc0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b02:	d90d      	bls.n	8005b20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e045      	b.n	8005bac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0e2      	beq.n	8005af4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0207 	bic.w	r2, r2, #7
 8005b44:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6899      	ldr	r1, [r3, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b70:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b80:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b90:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	22ff      	movs	r2, #255	; 0xff
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58000800 	.word	0x58000800

08005bb8 <LL_RCC_GetUSARTClockSource>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4013      	ands	r3, r2
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <LL_RCC_GetLPUARTClockSource>:
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4013      	ands	r3, r2
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e042      	b.n	8005c90 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fc fd09 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2224      	movs	r2, #36	; 0x24
 8005c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fbf6 	bl	800642c <UART_SetConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e022      	b.n	8005c90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fe12 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fe99 	bl	80069c0 <UART_CheckIdleState>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d17a      	bne.n	8005da6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_Transmit_DMA+0x24>
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e073      	b.n	8005da8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Transmit_DMA+0x36>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e06c      	b.n	8005da8 <HAL_UART_Transmit_DMA+0x110>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2221      	movs	r2, #33	; 0x21
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02c      	beq.n	8005d5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <HAL_UART_Transmit_DMA+0x118>)
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_UART_Transmit_DMA+0x11c>)
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d18:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <HAL_UART_Transmit_DMA+0x120>)
 8005d1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d20:	2200      	movs	r2, #0
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3328      	adds	r3, #40	; 0x28
 8005d34:	461a      	mov	r2, r3
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	f7fd f9b4 	bl	80030a4 <HAL_DMA_Start_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2210      	movs	r2, #16
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e024      	b.n	8005da8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	623a      	str	r2, [r7, #32]
 8005d90:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e000      	b.n	8005da8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005da6:	2302      	movs	r3, #2
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	08006d35 	.word	0x08006d35
 8005db4:	08006dcf 	.word	0x08006dcf
 8005db8:	08006deb 	.word	0x08006deb

08005dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b0ba      	sub	sp, #232	; 0xe8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dea:	4013      	ands	r3, r2
 8005dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11b      	bne.n	8005e30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 82d6 	beq.w	80063d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
      }
      return;
 8005e2e:	e2d0      	b.n	80063d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 811f 	beq.w	8006078 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e3e:	4b8b      	ldr	r3, [pc, #556]	; (800606c <HAL_UART_IRQHandler+0x2b0>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e4a:	4b89      	ldr	r3, [pc, #548]	; (8006070 <HAL_UART_IRQHandler+0x2b4>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8112 	beq.w	8006078 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d011      	beq.n	8005e84 <HAL_UART_IRQHandler+0xc8>
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d011      	beq.n	8005eb4 <HAL_UART_IRQHandler+0xf8>
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x128>
 8005ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005efc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f00:	4b5a      	ldr	r3, [pc, #360]	; (800606c <HAL_UART_IRQHandler+0x2b0>)
 8005f02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f16:	f043 0208 	orr.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d012      	beq.n	8005f52 <HAL_UART_IRQHandler+0x196>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 823c 	beq.w	80063d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d005      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d04f      	beq.n	8006056 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fe56 	bl	8006c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d141      	bne.n	800604e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800600e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1d9      	bne.n	8005fca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d013      	beq.n	8006046 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_UART_IRQHandler+0x2b8>)
 8006024:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602a:	4618      	mov	r0, r3
 800602c:	f7fd f914 	bl	8003258 <HAL_DMA_Abort_IT>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d017      	beq.n	8006066 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e00f      	b.n	8006066 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9da 	bl	8006400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	e00b      	b.n	8006066 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9d6 	bl	8006400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	e007      	b.n	8006066 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9d2 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006064:	e1b7      	b.n	80063d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006066:	bf00      	nop
    return;
 8006068:	e1b5      	b.n	80063d6 <HAL_UART_IRQHandler+0x61a>
 800606a:	bf00      	nop
 800606c:	10000001 	.word	0x10000001
 8006070:	04000120 	.word	0x04000120
 8006074:	08006e6b 	.word	0x08006e6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 814a 	bne.w	8006316 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8143 	beq.w	8006316 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 813c 	beq.w	8006316 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2210      	movs	r2, #16
 80060a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	f040 80b5 	bne.w	8006220 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80060c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8187 	beq.w	80063da <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060d6:	429a      	cmp	r2, r3
 80060d8:	f080 817f 	bcs.w	80063da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8086 	bne.w	8006204 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800610c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006126:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800612e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800613a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1da      	bne.n	80060f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3308      	adds	r3, #8
 8006162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800616a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800616e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e1      	bne.n	8006142 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800618e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3308      	adds	r3, #8
 800619e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	f023 0310 	bic.w	r3, r3, #16
 80061d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80061e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e4      	bne.n	80061c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fc ffcb 	bl	800319a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006210:	b29b      	uxth	r3, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	b29b      	uxth	r3, r3
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8fb 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800621e:	e0dc      	b.n	80063da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80ce 	beq.w	80063de <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80c9 	beq.w	80063de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800626e:	647b      	str	r3, [r7, #68]	; 0x44
 8006270:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e4      	bne.n	800624c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	623b      	str	r3, [r7, #32]
   return(result);
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062aa:	633a      	str	r2, [r7, #48]	; 0x30
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e1      	bne.n	8006282 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	617b      	str	r3, [r7, #20]
   return(result);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e4      	bne.n	80062d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f880 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006314:	e063      	b.n	80063de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <HAL_UART_IRQHandler+0x584>
 8006322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fdd7 	bl	8006eec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800633e:	e051      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006348:	2b00      	cmp	r3, #0
 800634a:	d014      	beq.n	8006376 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800635c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006368:	2b00      	cmp	r3, #0
 800636a:	d03a      	beq.n	80063e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
    }
    return;
 8006374:	e035      	b.n	80063e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_UART_IRQHandler+0x5da>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd81 	bl	8006e96 <UART_EndTransmit_IT>
    return;
 8006394:	e026      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_UART_IRQHandler+0x5fa>
 80063a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fdb0 	bl	8006f14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b4:	e016      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d010      	beq.n	80063e4 <HAL_UART_IRQHandler+0x628>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da0c      	bge.n	80063e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fd98 	bl	8006f00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d0:	e008      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
      return;
 80063d2:	bf00      	nop
 80063d4:	e006      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
    return;
 80063d6:	bf00      	nop
 80063d8:	e004      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
      return;
 80063da:	bf00      	nop
 80063dc:	e002      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
      return;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <HAL_UART_IRQHandler+0x628>
    return;
 80063e2:	bf00      	nop
  }
}
 80063e4:	37e8      	adds	r7, #232	; 0xe8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006430:	b08c      	sub	sp, #48	; 0x30
 8006432:	af00      	add	r7, sp, #0
 8006434:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	431a      	orrs	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	431a      	orrs	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	4313      	orrs	r3, r2
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4baf      	ldr	r3, [pc, #700]	; (8006718 <UART_SetConfig+0x2ec>)
 800645c:	4013      	ands	r3, r2
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006464:	430b      	orrs	r3, r1
 8006466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4aa4      	ldr	r2, [pc, #656]	; (800671c <UART_SetConfig+0x2f0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006494:	4313      	orrs	r3, r2
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	f023 010f 	bic.w	r1, r3, #15
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a95      	ldr	r2, [pc, #596]	; (8006720 <UART_SetConfig+0x2f4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d125      	bne.n	800651c <UART_SetConfig+0xf0>
 80064d0:	2003      	movs	r0, #3
 80064d2:	f7ff fb71 	bl	8005bb8 <LL_RCC_GetUSARTClockSource>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d81b      	bhi.n	8006514 <UART_SetConfig+0xe8>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0xb8>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006505 	.word	0x08006505
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fa:	e042      	b.n	8006582 <UART_SetConfig+0x156>
 80064fc:	2302      	movs	r3, #2
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e03e      	b.n	8006582 <UART_SetConfig+0x156>
 8006504:	2304      	movs	r3, #4
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e03a      	b.n	8006582 <UART_SetConfig+0x156>
 800650c:	2308      	movs	r3, #8
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e036      	b.n	8006582 <UART_SetConfig+0x156>
 8006514:	2310      	movs	r3, #16
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e032      	b.n	8006582 <UART_SetConfig+0x156>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a7e      	ldr	r2, [pc, #504]	; (800671c <UART_SetConfig+0x2f0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d12a      	bne.n	800657c <UART_SetConfig+0x150>
 8006526:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800652a:	f7ff fb55 	bl	8005bd8 <LL_RCC_GetLPUARTClockSource>
 800652e:	4603      	mov	r3, r0
 8006530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006534:	d01a      	beq.n	800656c <UART_SetConfig+0x140>
 8006536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800653a:	d81b      	bhi.n	8006574 <UART_SetConfig+0x148>
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	d00c      	beq.n	800655c <UART_SetConfig+0x130>
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006546:	d815      	bhi.n	8006574 <UART_SetConfig+0x148>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <UART_SetConfig+0x128>
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	d008      	beq.n	8006564 <UART_SetConfig+0x138>
 8006552:	e00f      	b.n	8006574 <UART_SetConfig+0x148>
 8006554:	2300      	movs	r3, #0
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655a:	e012      	b.n	8006582 <UART_SetConfig+0x156>
 800655c:	2302      	movs	r3, #2
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e00e      	b.n	8006582 <UART_SetConfig+0x156>
 8006564:	2304      	movs	r3, #4
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e00a      	b.n	8006582 <UART_SetConfig+0x156>
 800656c:	2308      	movs	r3, #8
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e006      	b.n	8006582 <UART_SetConfig+0x156>
 8006574:	2310      	movs	r3, #16
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657a:	e002      	b.n	8006582 <UART_SetConfig+0x156>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a65      	ldr	r2, [pc, #404]	; (800671c <UART_SetConfig+0x2f0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	f040 8097 	bne.w	80066bc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800658e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006592:	2b08      	cmp	r3, #8
 8006594:	d823      	bhi.n	80065de <UART_SetConfig+0x1b2>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x170>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065df 	.word	0x080065df
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065df 	.word	0x080065df
 80065ac:	080065cf 	.word	0x080065cf
 80065b0:	080065df 	.word	0x080065df
 80065b4:	080065df 	.word	0x080065df
 80065b8:	080065df 	.word	0x080065df
 80065bc:	080065d7 	.word	0x080065d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fe fc36 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065c6:	e010      	b.n	80065ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b56      	ldr	r3, [pc, #344]	; (8006724 <UART_SetConfig+0x2f8>)
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065cc:	e00d      	b.n	80065ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe fbaf 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065d4:	e009      	b.n	80065ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065dc:	e005      	b.n	80065ea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 812b 	beq.w	8006848 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	4a4c      	ldr	r2, [pc, #304]	; (8006728 <UART_SetConfig+0x2fc>)
 80065f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	fbb3 f3f2 	udiv	r3, r3, r2
 8006604:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4413      	add	r3, r2
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	429a      	cmp	r2, r3
 8006614:	d305      	bcc.n	8006622 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	429a      	cmp	r2, r3
 8006620:	d903      	bls.n	800662a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006628:	e10e      	b.n	8006848 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2200      	movs	r2, #0
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	60fa      	str	r2, [r7, #12]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	4a3c      	ldr	r2, [pc, #240]	; (8006728 <UART_SetConfig+0x2fc>)
 8006638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663c:	b29b      	uxth	r3, r3
 800663e:	2200      	movs	r2, #0
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800664c:	f7f9 fdf0 	bl	8000230 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	020b      	lsls	r3, r1, #8
 8006662:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006666:	0202      	lsls	r2, r0, #8
 8006668:	6979      	ldr	r1, [r7, #20]
 800666a:	6849      	ldr	r1, [r1, #4]
 800666c:	0849      	lsrs	r1, r1, #1
 800666e:	2000      	movs	r0, #0
 8006670:	460c      	mov	r4, r1
 8006672:	4605      	mov	r5, r0
 8006674:	eb12 0804 	adds.w	r8, r2, r4
 8006678:	eb43 0905 	adc.w	r9, r3, r5
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	469a      	mov	sl, r3
 8006684:	4693      	mov	fp, r2
 8006686:	4652      	mov	r2, sl
 8006688:	465b      	mov	r3, fp
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 fdcf 	bl	8000230 <__aeabi_uldivmod>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4613      	mov	r3, r2
 8006698:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a0:	d308      	bcc.n	80066b4 <UART_SetConfig+0x288>
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a8:	d204      	bcs.n	80066b4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	e0c9      	b.n	8006848 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066ba:	e0c5      	b.n	8006848 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c4:	d16e      	bne.n	80067a4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80066c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b07      	cmp	r3, #7
 80066ce:	d82d      	bhi.n	800672c <UART_SetConfig+0x300>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x2ac>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	08006701 	.word	0x08006701
 80066e0:	0800672d 	.word	0x0800672d
 80066e4:	08006707 	.word	0x08006707
 80066e8:	0800672d 	.word	0x0800672d
 80066ec:	0800672d 	.word	0x0800672d
 80066f0:	0800672d 	.word	0x0800672d
 80066f4:	0800670f 	.word	0x0800670f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f8:	f7fe fbb0 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80066fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fe:	e01b      	b.n	8006738 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006700:	4b08      	ldr	r3, [pc, #32]	; (8006724 <UART_SetConfig+0x2f8>)
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006704:	e018      	b.n	8006738 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006706:	f7fe fb13 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800670c:	e014      	b.n	8006738 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006714:	e010      	b.n	8006738 <UART_SetConfig+0x30c>
 8006716:	bf00      	nop
 8006718:	cfff69f3 	.word	0xcfff69f3
 800671c:	40008000 	.word	0x40008000
 8006720:	40013800 	.word	0x40013800
 8006724:	00f42400 	.word	0x00f42400
 8006728:	0800d784 	.word	0x0800d784
      default:
        pclk = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8084 	beq.w	8006848 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	4a4b      	ldr	r2, [pc, #300]	; (8006874 <UART_SetConfig+0x448>)
 8006746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674a:	461a      	mov	r2, r3
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006752:	005a      	lsls	r2, r3, #1
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	441a      	add	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d916      	bls.n	800679c <UART_SetConfig+0x370>
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d212      	bcs.n	800679c <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f023 030f 	bic.w	r3, r3, #15
 800677e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	b29a      	uxth	r2, r3
 800678c:	8bfb      	ldrh	r3, [r7, #30]
 800678e:	4313      	orrs	r3, r2
 8006790:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	8bfa      	ldrh	r2, [r7, #30]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e055      	b.n	8006848 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067a2:	e051      	b.n	8006848 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067a8:	3b01      	subs	r3, #1
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	d821      	bhi.n	80067f2 <UART_SetConfig+0x3c6>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <UART_SetConfig+0x388>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067f3 	.word	0x080067f3
 80067c0:	080067e3 	.word	0x080067e3
 80067c4:	080067f3 	.word	0x080067f3
 80067c8:	080067f3 	.word	0x080067f3
 80067cc:	080067f3 	.word	0x080067f3
 80067d0:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe fb42 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80067d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067da:	e010      	b.n	80067fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b26      	ldr	r3, [pc, #152]	; (8006878 <UART_SetConfig+0x44c>)
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067e0:	e00d      	b.n	80067fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fe faa5 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067fc:	bf00      	nop
    }

    if (pclk != 0U)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d021      	beq.n	8006848 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <UART_SetConfig+0x448>)
 800680a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800680e:	461a      	mov	r2, r3
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	fbb3 f2f2 	udiv	r2, r3, r2
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	441a      	add	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	2b0f      	cmp	r3, #15
 800682e:	d908      	bls.n	8006842 <UART_SetConfig+0x416>
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d204      	bcs.n	8006842 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e002      	b.n	8006848 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2201      	movs	r2, #1
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2201      	movs	r2, #1
 8006854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006864:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006868:	4618      	mov	r0, r3
 800686a:	3730      	adds	r7, #48	; 0x30
 800686c:	46bd      	mov	sp, r7
 800686e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006872:	bf00      	nop
 8006874:	0800d784 	.word	0x0800d784
 8006878:	00f42400 	.word	0x00f42400

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d0:	f7fc f8f6 	bl	8002bc0 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10e      	bne.n	8006a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f82f 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e025      	b.n	8006a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f819 	bl	8006a56 <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00f      	b.n	8006a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b09c      	sub	sp, #112	; 0x70
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a66:	e0a9      	b.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a6e:	f000 80a5 	beq.w	8006bbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fc f8a5 	bl	8002bc0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d140      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e6      	bne.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e069      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d051      	beq.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b26:	d149      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
 8006b52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	613b      	str	r3, [r7, #16]
   return(result);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b84:	623a      	str	r2, [r7, #32]
 8006b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e5      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e010      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	f43f af46 	beq.w	8006a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3770      	adds	r7, #112	; 0x70
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b08f      	sub	sp, #60	; 0x3c
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e6      	bne.n	8006bee <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e5      	bne.n	8006c20 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006c5c:	bf00      	nop
 8006c5e:	373c      	adds	r7, #60	; 0x3c
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b095      	sub	sp, #84	; 0x54
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e6      	bne.n	8006c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e3      	bne.n	8006ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d118      	bne.n	8006d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006d28:	bf00      	nop
 8006d2a:	3754      	adds	r7, #84	; 0x54
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b090      	sub	sp, #64	; 0x40
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d137      	bne.n	8006dc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	623b      	str	r3, [r7, #32]
   return(result);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d78:	633a      	str	r2, [r7, #48]	; 0x30
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	69b9      	ldr	r1, [r7, #24]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	617b      	str	r3, [r7, #20]
   return(result);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dbe:	e002      	b.n	8006dc6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006dc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006dc2:	f7fb f853 	bl	8001e6c <HAL_UART_TxCpltCallback>
}
 8006dc6:	bf00      	nop
 8006dc8:	3740      	adds	r7, #64	; 0x40
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fb05 	bl	80063ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d109      	bne.n	8006e2a <UART_DMAError+0x40>
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b21      	cmp	r3, #33	; 0x21
 8006e1a:	d106      	bne.n	8006e2a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f7ff fede 	bl	8006be6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d109      	bne.n	8006e4c <UART_DMAError+0x62>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b22      	cmp	r3, #34	; 0x22
 8006e3c:	d106      	bne.n	8006e4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006e46:	6978      	ldr	r0, [r7, #20]
 8006e48:	f7ff ff0e 	bl	8006c68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e52:	f043 0210 	orr.w	r2, r3, #16
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5c:	6978      	ldr	r0, [r7, #20]
 8006e5e:	f7ff facf 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bf00      	nop
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fab9 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b088      	sub	sp, #32
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb2:	61fb      	str	r3, [r7, #28]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa ffc4 	bl	8001e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee4:	bf00      	nop
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e027      	b.n	8006f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2224      	movs	r2, #36	; 0x24
 8006f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e02d      	b.n	800700e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2224      	movs	r2, #36	; 0x24
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f850 	bl	8007094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800702a:	2302      	movs	r3, #2
 800702c:	e02d      	b.n	800708a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2224      	movs	r2, #36	; 0x24
 800703a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f812 	bl	8007094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d108      	bne.n	80070b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070b4:	e031      	b.n	800711a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070b6:	2308      	movs	r3, #8
 80070b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ba:	2308      	movs	r3, #8
 80070bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	0e5b      	lsrs	r3, r3, #25
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	0f5b      	lsrs	r3, r3, #29
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	7b3a      	ldrb	r2, [r7, #12]
 80070e2:	4911      	ldr	r1, [pc, #68]	; (8007128 <UARTEx_SetNbDataToProcess+0x94>)
 80070e4:	5c8a      	ldrb	r2, [r1, r2]
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ea:	7b3a      	ldrb	r2, [r7, #12]
 80070ec:	490f      	ldr	r1, [pc, #60]	; (800712c <UARTEx_SetNbDataToProcess+0x98>)
 80070ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	7b7a      	ldrb	r2, [r7, #13]
 8007100:	4909      	ldr	r1, [pc, #36]	; (8007128 <UARTEx_SetNbDataToProcess+0x94>)
 8007102:	5c8a      	ldrb	r2, [r1, r2]
 8007104:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007108:	7b7a      	ldrb	r2, [r7, #13]
 800710a:	4908      	ldr	r1, [pc, #32]	; (800712c <UARTEx_SetNbDataToProcess+0x98>)
 800710c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800710e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	0800d79c 	.word	0x0800d79c
 800712c:	0800d7a4 	.word	0x0800d7a4

08007130 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007138:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800713c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	b29b      	uxth	r3, r3
 800714a:	43db      	mvns	r3, r3
 800714c:	b29b      	uxth	r3, r3
 800714e:	4013      	ands	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007166:	b084      	sub	sp, #16
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	f107 0014 	add.w	r0, r7, #20
 8007174:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	b004      	add	sp, #16
 80071a6:	4770      	bx	lr

080071a8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	2218      	movs	r2, #24
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f943 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071c0:	233f      	movs	r3, #63	; 0x3f
 80071c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80071c4:	2381      	movs	r3, #129	; 0x81
 80071c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80071c8:	1dfb      	adds	r3, r7, #7
 80071ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80071cc:	2301      	movs	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	2100      	movs	r1, #0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fcfa 	bl	8008bd0 <hci_send_req>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	da01      	bge.n	80071e6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80071e2:	23ff      	movs	r3, #255	; 0xff
 80071e4:	e000      	b.n	80071e8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80071e6:	79fb      	ldrb	r3, [r7, #7]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80071f0:	b5b0      	push	{r4, r5, r7, lr}
 80071f2:	b0ce      	sub	sp, #312	; 0x138
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4605      	mov	r5, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007202:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007206:	462a      	mov	r2, r5
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800720e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007212:	4622      	mov	r2, r4
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800721a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800721e:	4602      	mov	r2, r0
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007226:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800722a:	460a      	mov	r2, r1
 800722c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800722e:	f107 0310 	add.w	r3, r7, #16
 8007232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007236:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800723a:	3308      	adds	r3, #8
 800723c:	f107 0210 	add.w	r2, r7, #16
 8007240:	4413      	add	r3, r2
 8007242:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007246:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800724a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800724e:	4413      	add	r3, r2
 8007250:	3309      	adds	r3, #9
 8007252:	f107 0210 	add.w	r2, r7, #16
 8007256:	4413      	add	r3, r2
 8007258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800725c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007260:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800726e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007272:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007276:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800727e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007282:	3301      	adds	r3, #1
 8007284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007288:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800728c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007290:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007294:	8812      	ldrh	r2, [r2, #0]
 8007296:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800729a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800729e:	3302      	adds	r3, #2
 80072a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80072a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072ac:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80072b0:	8812      	ldrh	r2, [r2, #0]
 80072b2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80072b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ba:	3302      	adds	r3, #2
 80072bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80072c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072c8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80072d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80072da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072de:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80072e2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80072e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e8:	3301      	adds	r3, #1
 80072ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80072ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80072f6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80072f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007306:	3308      	adds	r3, #8
 8007308:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800730c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f888 	bl	8008426 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007316:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800731a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800731e:	4413      	add	r3, r2
 8007320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007324:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007328:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800732c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800732e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007332:	3301      	adds	r3, #1
 8007334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007338:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800733c:	3301      	adds	r3, #1
 800733e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007342:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007346:	4618      	mov	r0, r3
 8007348:	f001 f86d 	bl	8008426 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800734c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007350:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007354:	4413      	add	r3, r2
 8007356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800735a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007362:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007368:	3302      	adds	r3, #2
 800736a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007376:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737c:	3302      	adds	r3, #2
 800737e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007386:	2218      	movs	r2, #24
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f85b 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007390:	233f      	movs	r3, #63	; 0x3f
 8007392:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007396:	2383      	movs	r3, #131	; 0x83
 8007398:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073ac:	f107 030f 	add.w	r3, r7, #15
 80073b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fc05 	bl	8008bd0 <hci_send_req>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	da01      	bge.n	80073d0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80073cc:	23ff      	movs	r3, #255	; 0xff
 80073ce:	e004      	b.n	80073da <aci_gap_set_discoverable+0x1ea>
  return status;
 80073d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80073d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80073d8:	781b      	ldrb	r3, [r3, #0]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bdb0      	pop	{r4, r5, r7, pc}

080073e4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b0cc      	sub	sp, #304	; 0x130
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4602      	mov	r2, r0
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80073f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80073f6:	f107 0310 	add.w	r3, r7, #16
 80073fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007418:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007424:	3301      	adds	r3, #1
 8007426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800742a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800742e:	2218      	movs	r2, #24
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f807 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007438:	233f      	movs	r3, #63	; 0x3f
 800743a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800743e:	2385      	movs	r3, #133	; 0x85
 8007440:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007444:	f107 0310 	add.w	r3, r7, #16
 8007448:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800744c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007454:	f107 030f 	add.w	r3, r7, #15
 8007458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800745c:	2301      	movs	r3, #1
 800745e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fbb1 	bl	8008bd0 <hci_send_req>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	da01      	bge.n	8007478 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007474:	23ff      	movs	r3, #255	; 0xff
 8007476:	e004      	b.n	8007482 <aci_gap_set_io_capability+0x9e>
  return status;
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007480:	781b      	ldrb	r3, [r3, #0]
}
 8007482:	4618      	mov	r0, r3
 8007484:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800748c:	b5b0      	push	{r4, r5, r7, lr}
 800748e:	b0cc      	sub	sp, #304	; 0x130
 8007490:	af00      	add	r7, sp, #0
 8007492:	4605      	mov	r5, r0
 8007494:	460c      	mov	r4, r1
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074a2:	462a      	mov	r2, r5
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074ae:	4622      	mov	r2, r4
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80074ba:	4602      	mov	r2, r0
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c6:	460a      	mov	r2, r1
 80074c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80074ca:	f107 0310 	add.w	r3, r7, #16
 80074ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074f8:	3301      	adds	r3, #1
 80074fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80074fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007506:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800750e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007512:	3301      	adds	r3, #1
 8007514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007520:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800752c:	3301      	adds	r3, #1
 800752e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800753a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007546:	3301      	adds	r3, #1
 8007548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800754c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007550:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007554:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800755a:	3301      	adds	r3, #1
 800755c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007564:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007568:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800756a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800756e:	3301      	adds	r3, #1
 8007570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007578:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800757c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800757e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007582:	3301      	adds	r3, #1
 8007584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007590:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007598:	3304      	adds	r3, #4
 800759a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800759e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80075a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80075a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ac:	3301      	adds	r3, #1
 80075ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075b6:	2218      	movs	r2, #24
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 ff43 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075c0:	233f      	movs	r3, #63	; 0x3f
 80075c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80075c6:	2386      	movs	r3, #134	; 0x86
 80075c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075dc:	f107 030f 	add.w	r3, r7, #15
 80075e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 faed 	bl	8008bd0 <hci_send_req>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da01      	bge.n	8007600 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80075fc:	23ff      	movs	r3, #255	; 0xff
 80075fe:	e004      	b.n	800760a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007608:	781b      	ldrb	r3, [r3, #0]
}
 800760a:	4618      	mov	r0, r3
 800760c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007610:	46bd      	mov	sp, r7
 8007612:	bdb0      	pop	{r4, r5, r7, pc}

08007614 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b0cd      	sub	sp, #308	; 0x134
 8007618:	af00      	add	r7, sp, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007624:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007632:	4622      	mov	r2, r4
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800763e:	4602      	mov	r2, r0
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800764a:	460a      	mov	r2, r1
 800764c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800764e:	f107 0310 	add.w	r3, r7, #16
 8007652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007656:	f107 0308 	add.w	r3, r7, #8
 800765a:	2207      	movs	r2, #7
 800765c:	2100      	movs	r1, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fef1 	bl	8008446 <Osal_MemSet>
  int index_input = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007672:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800767a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800767e:	3301      	adds	r3, #1
 8007680:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800768c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076a6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80076ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b2:	3301      	adds	r3, #1
 80076b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076bc:	2218      	movs	r2, #24
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fec0 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076c6:	233f      	movs	r3, #63	; 0x3f
 80076c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80076cc:	238a      	movs	r3, #138	; 0x8a
 80076ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076d2:	f107 0310 	add.w	r3, r7, #16
 80076d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80076e2:	f107 0308 	add.w	r3, r7, #8
 80076e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80076ea:	2307      	movs	r3, #7
 80076ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fa6a 	bl	8008bd0 <hci_send_req>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da01      	bge.n	8007706 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007702:	23ff      	movs	r3, #255	; 0xff
 8007704:	e02e      	b.n	8007764 <aci_gap_init+0x150>
  if ( resp.Status )
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <aci_gap_init+0x10c>
    return resp.Status;
 8007714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007718:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	e021      	b.n	8007764 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007728:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800772c:	b29a      	uxth	r2, r3
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007742:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007746:	b29a      	uxth	r2, r3
 8007748:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800774c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007756:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800775a:	b29a      	uxth	r2, r3
 800775c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007760:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}

0800776e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b0cc      	sub	sp, #304	; 0x130
 8007772:	af00      	add	r7, sp, #0
 8007774:	4602      	mov	r2, r0
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777e:	6019      	str	r1, [r3, #0]
 8007780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007784:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007788:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800778a:	f107 0310 	add.w	r3, r7, #16
 800778e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80077a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80077b0:	7812      	ldrb	r2, [r2, #0]
 80077b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077b8:	3301      	adds	r3, #1
 80077ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	1c58      	adds	r0, r3, #1
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d6:	6819      	ldr	r1, [r3, #0]
 80077d8:	f000 fe25 	bl	8008426 <Osal_MemCpy>
  index_input += AdvDataLen;
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077ea:	4413      	add	r3, r2
 80077ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077f4:	2218      	movs	r2, #24
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fe24 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077fe:	233f      	movs	r3, #63	; 0x3f
 8007800:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007804:	238e      	movs	r3, #142	; 0x8e
 8007806:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800780a:	f107 0310 	add.w	r3, r7, #16
 800780e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800781a:	f107 030f 	add.w	r3, r7, #15
 800781e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f9ce 	bl	8008bd0 <hci_send_req>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	da01      	bge.n	800783e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800783a:	23ff      	movs	r3, #255	; 0xff
 800783c:	e004      	b.n	8007848 <aci_gap_update_adv_data+0xda>
  return status;
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007846:	781b      	ldrb	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b088      	sub	sp, #32
 8007856:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	2218      	movs	r2, #24
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fdee 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 800786a:	233f      	movs	r3, #63	; 0x3f
 800786c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800786e:	2392      	movs	r3, #146	; 0x92
 8007870:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007876:	2301      	movs	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f9a5 	bl	8008bd0 <hci_send_req>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	da01      	bge.n	8007890 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800788c:	23ff      	movs	r3, #255	; 0xff
 800788e:	e000      	b.n	8007892 <aci_gap_configure_whitelist+0x40>
  return status;
 8007890:	79fb      	ldrb	r3, [r7, #7]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3720      	adds	r7, #32
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b0cc      	sub	sp, #304	; 0x130
 800789e:	af00      	add	r7, sp, #0
 80078a0:	4602      	mov	r2, r0
 80078a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078aa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80078ac:	f107 0310 	add.w	r3, r7, #16
 80078b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80078c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80078d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078da:	3302      	adds	r3, #2
 80078dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078e4:	2218      	movs	r2, #24
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fdac 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078ee:	233f      	movs	r3, #63	; 0x3f
 80078f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 80078f4:	2395      	movs	r3, #149	; 0x95
 80078f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078fa:	f107 0310 	add.w	r3, r7, #16
 80078fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800790a:	f107 030f 	add.w	r3, r7, #15
 800790e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007912:	2301      	movs	r3, #1
 8007914:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f001 f956 	bl	8008bd0 <hci_send_req>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	da01      	bge.n	800792e <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800792a:	23ff      	movs	r3, #255	; 0xff
 800792c:	e004      	b.n	8007938 <aci_gap_allow_rebond+0x9e>
  return status;
 800792e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007932:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007936:	781b      	ldrb	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b0cc      	sub	sp, #304	; 0x130
 8007946:	af00      	add	r7, sp, #0
 8007948:	4602      	mov	r2, r0
 800794a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007958:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800795c:	460a      	mov	r2, r1
 800795e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800797a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007982:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007986:	8812      	ldrh	r2, [r2, #0]
 8007988:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800798a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800798e:	3302      	adds	r3, #2
 8007990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007998:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800799c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80079a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079a8:	3301      	adds	r3, #1
 80079aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079b2:	2218      	movs	r2, #24
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fd45 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079bc:	233f      	movs	r3, #63	; 0x3f
 80079be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80079c2:	23a5      	movs	r3, #165	; 0xa5
 80079c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079d8:	f107 030f 	add.w	r3, r7, #15
 80079dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 f8ef 	bl	8008bd0 <hci_send_req>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da01      	bge.n	80079fc <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80079f8:	23ff      	movs	r3, #255	; 0xff
 80079fa:	e004      	b.n	8007a06 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a04:	781b      	ldrb	r3, [r3, #0]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	2218      	movs	r2, #24
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fd0f 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a28:	233f      	movs	r3, #63	; 0x3f
 8007a2a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007a2c:	f240 1301 	movw	r3, #257	; 0x101
 8007a30:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a32:	1dfb      	adds	r3, r7, #7
 8007a34:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	2100      	movs	r1, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f8c5 	bl	8008bd0 <hci_send_req>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da01      	bge.n	8007a50 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007a4c:	23ff      	movs	r3, #255	; 0xff
 8007a4e:	e000      	b.n	8007a52 <aci_gatt_init+0x42>
  return status;
 8007a50:	79fb      	ldrb	r3, [r7, #7]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007a5a:	b590      	push	{r4, r7, lr}
 8007a5c:	b0cf      	sub	sp, #316	; 0x13c
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	4604      	mov	r4, r0
 8007a62:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007a66:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007a6a:	6001      	str	r1, [r0, #0]
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a74:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007a78:	4622      	mov	r2, r4
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a80:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007a84:	4602      	mov	r2, r0
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a8c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a90:	460a      	mov	r2, r1
 8007a92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007a94:	f107 0310 	add.w	r3, r7, #16
 8007a98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007a9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007aa0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d00a      	beq.n	8007ac0 <aci_gatt_add_service+0x66>
 8007aaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007aae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d101      	bne.n	8007abc <aci_gatt_add_service+0x62>
 8007ab8:	2311      	movs	r3, #17
 8007aba:	e002      	b.n	8007ac2 <aci_gatt_add_service+0x68>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <aci_gatt_add_service+0x68>
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	f107 0210 	add.w	r2, r7, #16
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007acc:	f107 030c 	add.w	r3, r7, #12
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fcb6 	bl	8008446 <Osal_MemSet>
  int index_input = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ae4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007ae8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007af4:	3301      	adds	r3, #1
 8007af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007afa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007afe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d002      	beq.n	8007b0e <aci_gatt_add_service+0xb4>
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d004      	beq.n	8007b16 <aci_gatt_add_service+0xbc>
 8007b0c:	e007      	b.n	8007b1e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007b14:	e005      	b.n	8007b22 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007b16:	2310      	movs	r3, #16
 8007b18:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007b1c:	e001      	b.n	8007b22 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007b1e:	2397      	movs	r3, #151	; 0x97
 8007b20:	e06c      	b.n	8007bfc <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007b22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b26:	1c58      	adds	r0, r3, #1
 8007b28:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007b2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007b30:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	f000 fc76 	bl	8008426 <Osal_MemCpy>
    index_input += size;
 8007b3a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007b3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b50:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b66:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b6a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b76:	3301      	adds	r3, #1
 8007b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b80:	2218      	movs	r2, #24
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fc5e 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b8a:	233f      	movs	r3, #63	; 0x3f
 8007b8c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007b90:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007b94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b98:	f107 0310 	add.w	r3, r7, #16
 8007b9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007ba8:	f107 030c 	add.w	r3, r7, #12
 8007bac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f807 	bl	8008bd0 <hci_send_req>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da01      	bge.n	8007bcc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007bc8:	23ff      	movs	r3, #255	; 0xff
 8007bca:	e017      	b.n	8007bfc <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007bcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007bda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	e00a      	b.n	8007bfc <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007be6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007bf8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd90      	pop	{r4, r7, pc}

08007c06 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007c06:	b590      	push	{r4, r7, lr}
 8007c08:	b0d1      	sub	sp, #324	; 0x144
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	4608      	mov	r0, r1
 8007c10:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007c14:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007c18:	600a      	str	r2, [r1, #0]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c20:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007c24:	4622      	mov	r2, r4
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007c30:	4602      	mov	r2, r0
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c38:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007c3c:	460a      	mov	r2, r1
 8007c3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007c40:	f107 0318 	add.w	r3, r7, #24
 8007c44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007c48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c4c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d00a      	beq.n	8007c6c <aci_gatt_add_char+0x66>
 8007c56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c5a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d101      	bne.n	8007c68 <aci_gatt_add_char+0x62>
 8007c64:	2313      	movs	r3, #19
 8007c66:	e002      	b.n	8007c6e <aci_gatt_add_char+0x68>
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e000      	b.n	8007c6e <aci_gatt_add_char+0x68>
 8007c6c:	2305      	movs	r3, #5
 8007c6e:	f107 0218 	add.w	r2, r7, #24
 8007c72:	4413      	add	r3, r2
 8007c74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007c78:	f107 0314 	add.w	r3, r7, #20
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fbe0 	bl	8008446 <Osal_MemSet>
  int index_input = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007c8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007c90:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007c94:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007c98:	8812      	ldrh	r2, [r2, #0]
 8007c9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007ca6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007caa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007cae:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007cb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007cc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007cc4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d002      	beq.n	8007cd4 <aci_gatt_add_char+0xce>
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d004      	beq.n	8007cdc <aci_gatt_add_char+0xd6>
 8007cd2:	e007      	b.n	8007ce4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007cda:	e005      	b.n	8007ce8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007ce2:	e001      	b.n	8007ce8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007ce4:	2397      	movs	r3, #151	; 0x97
 8007ce6:	e091      	b.n	8007e0c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007ce8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007cec:	1cd8      	adds	r0, r3, #3
 8007cee:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007cf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007cf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007cfa:	6819      	ldr	r1, [r3, #0]
 8007cfc:	f000 fb93 	bl	8008426 <Osal_MemCpy>
    index_input += size;
 8007d00:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007d04:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007d08:	4413      	add	r3, r2
 8007d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d12:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007d16:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007d1a:	8812      	ldrh	r2, [r2, #0]
 8007d1c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007d1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d22:	3302      	adds	r3, #2
 8007d24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007d28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d2c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007d30:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007d32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d36:	3301      	adds	r3, #1
 8007d38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d40:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007d44:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007d46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007d50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d54:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007d58:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007d5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d68:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007d6c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007d6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d72:	3301      	adds	r3, #1
 8007d74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007d78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d7c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007d80:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007d82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d86:	3301      	adds	r3, #1
 8007d88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007d90:	2218      	movs	r2, #24
 8007d92:	2100      	movs	r1, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 fb56 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d9a:	233f      	movs	r3, #63	; 0x3f
 8007d9c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007da0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007da4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007da8:	f107 0318 	add.w	r3, r7, #24
 8007dac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007db4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 feff 	bl	8008bd0 <hci_send_req>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da01      	bge.n	8007ddc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007dd8:	23ff      	movs	r3, #255	; 0xff
 8007dda:	e017      	b.n	8007e0c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007ddc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007dea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	e00a      	b.n	8007e0c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007df6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007e08:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd90      	pop	{r4, r7, pc}

08007e16 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007e16:	b5b0      	push	{r4, r5, r7, lr}
 8007e18:	b0cc      	sub	sp, #304	; 0x130
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	4610      	mov	r0, r2
 8007e22:	4619      	mov	r1, r3
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e38:	4622      	mov	r2, r4
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e40:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007e44:	4602      	mov	r2, r0
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007e50:	460a      	mov	r2, r1
 8007e52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e76:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e7a:	8812      	ldrh	r2, [r2, #0]
 8007e7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e82:	3302      	adds	r3, #2
 8007e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e94:	8812      	ldrh	r2, [r2, #0]
 8007e96:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007eaa:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007eae:	7812      	ldrb	r2, [r2, #0]
 8007eb0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ec4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eda:	1d98      	adds	r0, r3, #6
 8007edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007eec:	f000 fa9b 	bl	8008426 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007efe:	4413      	add	r3, r2
 8007f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f08:	2218      	movs	r2, #24
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fa9a 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f12:	233f      	movs	r3, #63	; 0x3f
 8007f14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007f18:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007f1c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f20:	f107 0310 	add.w	r3, r7, #16
 8007f24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f30:	f107 030f 	add.w	r3, r7, #15
 8007f34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fe43 	bl	8008bd0 <hci_send_req>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da01      	bge.n	8007f54 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007f50:	23ff      	movs	r3, #255	; 0xff
 8007f52:	e004      	b.n	8007f5e <aci_gatt_update_char_value+0x148>
  return status;
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f5c:	781b      	ldrb	r3, [r3, #0]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bdb0      	pop	{r4, r5, r7, pc}

08007f68 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b0cc      	sub	sp, #304	; 0x130
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f80:	4602      	mov	r2, r0
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007f90:	f107 0310 	add.w	r3, r7, #16
 8007f94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fb2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fcc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fd0:	7812      	ldrb	r2, [r2, #0]
 8007fd2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fd8:	3301      	adds	r3, #1
 8007fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe2:	1c98      	adds	r0, r3, #2
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	f000 fa15 	bl	8008426 <Osal_MemCpy>
  index_input += Length;
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008014:	2218      	movs	r2, #24
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fa14 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 800801e:	233f      	movs	r3, #63	; 0x3f
 8008020:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008024:	230c      	movs	r3, #12
 8008026:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800802a:	f107 0310 	add.w	r3, r7, #16
 800802e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008036:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800803a:	f107 030f 	add.w	r3, r7, #15
 800803e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fdbe 	bl	8008bd0 <hci_send_req>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	da01      	bge.n	800805e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800805a:	23ff      	movs	r3, #255	; 0xff
 800805c:	e004      	b.n	8008068 <aci_hal_write_config_data+0x100>
  return status;
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008066:	781b      	ldrb	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b0cc      	sub	sp, #304	; 0x130
 8008076:	af00      	add	r7, sp, #0
 8008078:	4602      	mov	r2, r0
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008082:	701a      	strb	r2, [r3, #0]
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800808c:	460a      	mov	r2, r1
 800808e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008090:	f107 0310 	add.w	r3, r7, #16
 8008094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080b2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80080c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080cc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080d8:	3301      	adds	r3, #1
 80080da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080e2:	2218      	movs	r2, #24
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f9ad 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080ec:	233f      	movs	r3, #63	; 0x3f
 80080ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80080f2:	230f      	movs	r3, #15
 80080f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080f8:	f107 0310 	add.w	r3, r7, #16
 80080fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008104:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008108:	f107 030f 	add.w	r3, r7, #15
 800810c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008110:	2301      	movs	r3, #1
 8008112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008116:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fd57 	bl	8008bd0 <hci_send_req>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	da01      	bge.n	800812c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008128:	23ff      	movs	r3, #255	; 0xff
 800812a:	e004      	b.n	8008136 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008134:	781b      	ldrb	r3, [r3, #0]
}
 8008136:	4618      	mov	r0, r3
 8008138:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0cc      	sub	sp, #304	; 0x130
 8008144:	af00      	add	r7, sp, #0
 8008146:	4602      	mov	r2, r0
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008150:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800815a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800816c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008170:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008174:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008178:	8812      	ldrh	r2, [r2, #0]
 800817a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800817c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008180:	3302      	adds	r3, #2
 8008182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008186:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800818a:	2218      	movs	r2, #24
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f959 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008194:	233f      	movs	r3, #63	; 0x3f
 8008196:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800819a:	2318      	movs	r3, #24
 800819c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081b0:	f107 030f 	add.w	r3, r7, #15
 80081b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fd03 	bl	8008bd0 <hci_send_req>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da01      	bge.n	80081d4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80081d0:	23ff      	movs	r3, #255	; 0xff
 80081d2:	e004      	b.n	80081de <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80081dc:	781b      	ldrb	r3, [r3, #0]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	2218      	movs	r2, #24
 80081f8:	2100      	movs	r1, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f923 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x03;
 8008200:	2303      	movs	r3, #3
 8008202:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008204:	2303      	movs	r3, #3
 8008206:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008208:	1dfb      	adds	r3, r7, #7
 800820a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800820c:	2301      	movs	r3, #1
 800820e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008210:	f107 0308 	add.w	r3, r7, #8
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fcda 	bl	8008bd0 <hci_send_req>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	da01      	bge.n	8008226 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008222:	23ff      	movs	r3, #255	; 0xff
 8008224:	e000      	b.n	8008228 <hci_reset+0x40>
  return status;
 8008226:	79fb      	ldrb	r3, [r7, #7]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b0ce      	sub	sp, #312	; 0x138
 8008234:	af00      	add	r7, sp, #0
 8008236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	6019      	str	r1, [r3, #0]
 8008240:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008244:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800824e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008252:	4602      	mov	r2, r0
 8008254:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008256:	f107 0318 	add.w	r3, r7, #24
 800825a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800825e:	f107 0310 	add.w	r3, r7, #16
 8008262:	2205      	movs	r2, #5
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f8ed 	bl	8008446 <Osal_MemSet>
  int index_input = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008276:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800827a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800827e:	8812      	ldrh	r2, [r2, #0]
 8008280:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008286:	3302      	adds	r3, #2
 8008288:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800828c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008290:	2218      	movs	r2, #24
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f000 f8d6 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x08;
 800829a:	2308      	movs	r3, #8
 800829c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80082a0:	2330      	movs	r3, #48	; 0x30
 80082a2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80082a6:	f107 0318 	add.w	r3, r7, #24
 80082aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80082ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80082be:	2305      	movs	r3, #5
 80082c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fc80 	bl	8008bd0 <hci_send_req>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da01      	bge.n	80082da <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80082d6:	23ff      	movs	r3, #255	; 0xff
 80082d8:	e023      	b.n	8008322 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80082da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <hci_le_read_phy+0xc4>
    return resp.Status;
 80082e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	e016      	b.n	8008322 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 80082f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082fc:	78da      	ldrb	r2, [r3, #3]
 80082fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800830a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800830e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008312:	791a      	ldrb	r2, [r3, #4]
 8008314:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008318:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b0cd      	sub	sp, #308	; 0x134
 8008330:	af00      	add	r7, sp, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008340:	4622      	mov	r2, r4
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800834c:	4602      	mov	r2, r0
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008354:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008358:	460a      	mov	r2, r1
 800835a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800835c:	f107 0310 	add.w	r3, r7, #16
 8008360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008368:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800837e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800838a:	3301      	adds	r3, #1
 800838c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008394:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008398:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80083a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80083aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083b2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80083ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083be:	3301      	adds	r3, #1
 80083c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083c8:	2218      	movs	r2, #24
 80083ca:	2100      	movs	r1, #0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f83a 	bl	8008446 <Osal_MemSet>
  rq.ogf = 0x08;
 80083d2:	2308      	movs	r3, #8
 80083d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80083d8:	2331      	movs	r3, #49	; 0x31
 80083da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083de:	f107 0310 	add.w	r3, r7, #16
 80083e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083ee:	f107 030f 	add.w	r3, r7, #15
 80083f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fbe4 	bl	8008bd0 <hci_send_req>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	da01      	bge.n	8008412 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800840e:	23ff      	movs	r3, #255	; 0xff
 8008410:	e004      	b.n	800841c <hci_le_set_default_phy+0xf0>
  return status;
 8008412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008416:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800841a:	781b      	ldrb	r3, [r3, #0]
}
 800841c:	4618      	mov	r0, r3
 800841e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008422:	46bd      	mov	sp, r7
 8008424:	bd90      	pop	{r4, r7, pc}

08008426 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f003 fb08 	bl	800ba4c <memcpy>
 800843c:	4603      	mov	r3, r0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f003 fb06 	bl	800ba68 <memset>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008470:	2300      	movs	r3, #0
 8008472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3301      	adds	r3, #1
 800847a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2bff      	cmp	r3, #255	; 0xff
 8008482:	d158      	bne.n	8008536 <PeerToPeer_Event_Handler+0xce>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	3302      	adds	r3, #2
 8008488:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	f640 4301 	movw	r3, #3073	; 0xc01
 8008496:	429a      	cmp	r2, r3
 8008498:	d149      	bne.n	800852e <PeerToPeer_Event_Handler+0xc6>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	3302      	adds	r3, #2
 800849e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	885b      	ldrh	r3, [r3, #2]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <PeerToPeer_Event_Handler+0xdc>)
 80084aa:	889b      	ldrh	r3, [r3, #4]
 80084ac:	3302      	adds	r3, #2
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d118      	bne.n	80084e4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	7a1b      	ldrb	r3, [r3, #8]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80084c4:	2300      	movs	r3, #0
 80084c6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f002 fbf9 	bl	800acc4 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80084d2:	e02e      	b.n	8008532 <PeerToPeer_Event_Handler+0xca>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80084d4:	2301      	movs	r3, #1
 80084d6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4618      	mov	r0, r3
 80084de:	f002 fbf1 	bl	800acc4 <P2PS_STM_App_Notification>
        break;
 80084e2:	e026      	b.n	8008532 <PeerToPeer_Event_Handler+0xca>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	885b      	ldrh	r3, [r3, #2]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b15      	ldr	r3, [pc, #84]	; (8008544 <PeerToPeer_Event_Handler+0xdc>)
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	3301      	adds	r3, #1
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d11d      	bne.n	8008532 <PeerToPeer_Event_Handler+0xca>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 80084f6:	4814      	ldr	r0, [pc, #80]	; (8008548 <PeerToPeer_Event_Handler+0xe0>)
 80084f8:	f001 f812 	bl	8009520 <DbgTraceGetFileName>
 80084fc:	4601      	mov	r1, r0
 80084fe:	2395      	movs	r3, #149	; 0x95
 8008500:	4a12      	ldr	r2, [pc, #72]	; (800854c <PeerToPeer_Event_Handler+0xe4>)
 8008502:	4813      	ldr	r0, [pc, #76]	; (8008550 <PeerToPeer_Event_Handler+0xe8>)
 8008504:	f003 fab8 	bl	800ba78 <iprintf>
 8008508:	4812      	ldr	r0, [pc, #72]	; (8008554 <PeerToPeer_Event_Handler+0xec>)
 800850a:	f003 fb3b 	bl	800bb84 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800850e:	2303      	movs	r3, #3
 8008510:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	88db      	ldrh	r3, [r3, #6]
 8008516:	b29b      	uxth	r3, r3
 8008518:	b2db      	uxtb	r3, r3
 800851a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	3308      	adds	r3, #8
 8008520:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 8008522:	f107 0308 	add.w	r3, r7, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fbcc 	bl	800acc4 <P2PS_STM_App_Notification>
        break;
 800852c:	e001      	b.n	8008532 <PeerToPeer_Event_Handler+0xca>

        default:
          break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <PeerToPeer_Event_Handler+0xd0>
        break;
 8008532:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008534:	e000      	b.n	8008538 <PeerToPeer_Event_Handler+0xd0>

    default:
      break;
 8008536:	bf00      	nop
  }

  return(return_value);
 8008538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800853c:	4618      	mov	r0, r3
 800853e:	3728      	adds	r7, #40	; 0x28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000128 	.word	0x20000128
 8008548:	0800cdf8 	.word	0x0800cdf8
 800854c:	0800d7ac 	.word	0x0800d7ac
 8008550:	0800ce2c 	.word	0x0800ce2c
 8008554:	0800ce40 	.word	0x0800ce40

08008558 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800855e:	484a      	ldr	r0, [pc, #296]	; (8008688 <P2PS_STM_Init+0x130>)
 8008560:	f000 f96c 	bl	800883c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008564:	238f      	movs	r3, #143	; 0x8f
 8008566:	703b      	strb	r3, [r7, #0]
 8008568:	23e5      	movs	r3, #229	; 0xe5
 800856a:	707b      	strb	r3, [r7, #1]
 800856c:	23b3      	movs	r3, #179	; 0xb3
 800856e:	70bb      	strb	r3, [r7, #2]
 8008570:	23d5      	movs	r3, #213	; 0xd5
 8008572:	70fb      	strb	r3, [r7, #3]
 8008574:	232e      	movs	r3, #46	; 0x2e
 8008576:	713b      	strb	r3, [r7, #4]
 8008578:	237f      	movs	r3, #127	; 0x7f
 800857a:	717b      	strb	r3, [r7, #5]
 800857c:	234a      	movs	r3, #74	; 0x4a
 800857e:	71bb      	strb	r3, [r7, #6]
 8008580:	2398      	movs	r3, #152	; 0x98
 8008582:	71fb      	strb	r3, [r7, #7]
 8008584:	232a      	movs	r3, #42	; 0x2a
 8008586:	723b      	strb	r3, [r7, #8]
 8008588:	2348      	movs	r3, #72	; 0x48
 800858a:	727b      	strb	r3, [r7, #9]
 800858c:	237a      	movs	r3, #122	; 0x7a
 800858e:	72bb      	strb	r3, [r7, #10]
 8008590:	23cc      	movs	r3, #204	; 0xcc
 8008592:	72fb      	strb	r3, [r7, #11]
 8008594:	2340      	movs	r3, #64	; 0x40
 8008596:	733b      	strb	r3, [r7, #12]
 8008598:	23fe      	movs	r3, #254	; 0xfe
 800859a:	737b      	strb	r3, [r7, #13]
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80085a4:	4639      	mov	r1, r7
 80085a6:	4b39      	ldr	r3, [pc, #228]	; (800868c <P2PS_STM_Init+0x134>)
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2308      	movs	r3, #8
 80085ac:	2201      	movs	r2, #1
 80085ae:	2002      	movs	r0, #2
 80085b0:	f7ff fa53 	bl	8007a5a <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80085b4:	2319      	movs	r3, #25
 80085b6:	703b      	strb	r3, [r7, #0]
 80085b8:	23ed      	movs	r3, #237	; 0xed
 80085ba:	707b      	strb	r3, [r7, #1]
 80085bc:	2382      	movs	r3, #130	; 0x82
 80085be:	70bb      	strb	r3, [r7, #2]
 80085c0:	23ae      	movs	r3, #174	; 0xae
 80085c2:	70fb      	strb	r3, [r7, #3]
 80085c4:	23ed      	movs	r3, #237	; 0xed
 80085c6:	713b      	strb	r3, [r7, #4]
 80085c8:	2321      	movs	r3, #33	; 0x21
 80085ca:	717b      	strb	r3, [r7, #5]
 80085cc:	234c      	movs	r3, #76	; 0x4c
 80085ce:	71bb      	strb	r3, [r7, #6]
 80085d0:	239d      	movs	r3, #157	; 0x9d
 80085d2:	71fb      	strb	r3, [r7, #7]
 80085d4:	2341      	movs	r3, #65	; 0x41
 80085d6:	723b      	strb	r3, [r7, #8]
 80085d8:	2345      	movs	r3, #69	; 0x45
 80085da:	727b      	strb	r3, [r7, #9]
 80085dc:	2322      	movs	r3, #34	; 0x22
 80085de:	72bb      	strb	r3, [r7, #10]
 80085e0:	238e      	movs	r3, #142	; 0x8e
 80085e2:	72fb      	strb	r3, [r7, #11]
 80085e4:	2341      	movs	r3, #65	; 0x41
 80085e6:	733b      	strb	r3, [r7, #12]
 80085e8:	23fe      	movs	r3, #254	; 0xfe
 80085ea:	737b      	strb	r3, [r7, #13]
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80085f4:	4b25      	ldr	r3, [pc, #148]	; (800868c <P2PS_STM_Init+0x134>)
 80085f6:	8818      	ldrh	r0, [r3, #0]
 80085f8:	463a      	mov	r2, r7
 80085fa:	4b25      	ldr	r3, [pc, #148]	; (8008690 <P2PS_STM_Init+0x138>)
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	2301      	movs	r3, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	230a      	movs	r3, #10
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	2301      	movs	r3, #1
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	2300      	movs	r3, #0
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2306      	movs	r3, #6
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2302      	movs	r3, #2
 8008614:	2102      	movs	r1, #2
 8008616:	f7ff faf6 	bl	8007c06 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800861a:	2319      	movs	r3, #25
 800861c:	703b      	strb	r3, [r7, #0]
 800861e:	23ed      	movs	r3, #237	; 0xed
 8008620:	707b      	strb	r3, [r7, #1]
 8008622:	2382      	movs	r3, #130	; 0x82
 8008624:	70bb      	strb	r3, [r7, #2]
 8008626:	23ae      	movs	r3, #174	; 0xae
 8008628:	70fb      	strb	r3, [r7, #3]
 800862a:	23ed      	movs	r3, #237	; 0xed
 800862c:	713b      	strb	r3, [r7, #4]
 800862e:	2321      	movs	r3, #33	; 0x21
 8008630:	717b      	strb	r3, [r7, #5]
 8008632:	234c      	movs	r3, #76	; 0x4c
 8008634:	71bb      	strb	r3, [r7, #6]
 8008636:	239d      	movs	r3, #157	; 0x9d
 8008638:	71fb      	strb	r3, [r7, #7]
 800863a:	2341      	movs	r3, #65	; 0x41
 800863c:	723b      	strb	r3, [r7, #8]
 800863e:	2345      	movs	r3, #69	; 0x45
 8008640:	727b      	strb	r3, [r7, #9]
 8008642:	2322      	movs	r3, #34	; 0x22
 8008644:	72bb      	strb	r3, [r7, #10]
 8008646:	238e      	movs	r3, #142	; 0x8e
 8008648:	72fb      	strb	r3, [r7, #11]
 800864a:	2342      	movs	r3, #66	; 0x42
 800864c:	733b      	strb	r3, [r7, #12]
 800864e:	23fe      	movs	r3, #254	; 0xfe
 8008650:	737b      	strb	r3, [r7, #13]
 8008652:	2300      	movs	r3, #0
 8008654:	73bb      	strb	r3, [r7, #14]
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800865a:	4b0c      	ldr	r3, [pc, #48]	; (800868c <P2PS_STM_Init+0x134>)
 800865c:	8818      	ldrh	r0, [r3, #0]
 800865e:	463a      	mov	r2, r7
 8008660:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <P2PS_STM_Init+0x13c>)
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	2301      	movs	r3, #1
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	230a      	movs	r3, #10
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	2301      	movs	r3, #1
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	2300      	movs	r3, #0
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	2310      	movs	r3, #16
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2302      	movs	r3, #2
 800867a:	2102      	movs	r1, #2
 800867c:	f7ff fac3 	bl	8007c06 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 8008680:	bf00      	nop
}
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	08008469 	.word	0x08008469
 800868c:	20000128 	.word	0x20000128
 8008690:	2000012a 	.word	0x2000012a
 8008694:	2000012c 	.word	0x2000012c

08008698 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af02      	add	r7, sp, #8
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80086a4:	2392      	movs	r3, #146	; 0x92
 80086a6:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10c      	bne.n	80086cc <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <P2PS_STM_App_Update_Char+0x40>)
 80086b4:	8818      	ldrh	r0, [r3, #0]
 80086b6:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <P2PS_STM_App_Update_Char+0x40>)
 80086b8:	8899      	ldrh	r1, [r3, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2302      	movs	r3, #2
 80086c0:	2200      	movs	r2, #0
 80086c2:	f7ff fba8 	bl	8007e16 <aci_gatt_update_char_value>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);

      break;
 80086ca:	e000      	b.n	80086ce <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 80086cc:	bf00      	nop
  }

  return result;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000128 	.word	0x20000128

080086dc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  return;
 80086e0:	bf00      	nop
}
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80086ea:	b480      	push	{r7}
 80086ec:	af00      	add	r7, sp, #0
  return;
 80086ee:	bf00      	nop
}
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return;
 80086fc:	bf00      	nop
}
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008706:	b480      	push	{r7}
 8008708:	af00      	add	r7, sp, #0
  return;
 800870a:	bf00      	nop
}
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  return;
 8008718:	bf00      	nop
}
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008722:	b480      	push	{r7}
 8008724:	af00      	add	r7, sp, #0
  return;
 8008726:	bf00      	nop
}
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return;
 8008734:	bf00      	nop
}
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800873e:	b480      	push	{r7}
 8008740:	af00      	add	r7, sp, #0
  return;
 8008742:	bf00      	nop
}
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  return;
 8008750:	bf00      	nop
}
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800875a:	b480      	push	{r7}
 800875c:	af00      	add	r7, sp, #0
  return;
 800875e:	bf00      	nop
}
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return;
 800876c:	bf00      	nop
}
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008776:	b480      	push	{r7}
 8008778:	af00      	add	r7, sp, #0
  return;
 800877a:	bf00      	nop
}
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return;
 8008788:	bf00      	nop
}
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008792:	b480      	push	{r7}
 8008794:	af00      	add	r7, sp, #0
  return;
 8008796:	bf00      	nop
}
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  return;
 80087a4:	bf00      	nop
}
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80087ae:	b480      	push	{r7}
 80087b0:	af00      	add	r7, sp, #0
  return;
 80087b2:	bf00      	nop
}
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  return;
 80087c0:	bf00      	nop
}
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <SVCCTL_Init+0x18>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80087d6:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <SVCCTL_Init+0x1c>)
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80087dc:	f000 f806 	bl	80087ec <SVCCTL_SvcInit>

  return;
 80087e0:	bf00      	nop
}
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000130 	.word	0x20000130
 80087e8:	20000150 	.word	0x20000150

080087ec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  BAS_Init();
 80087f0:	f7ff ff74 	bl	80086dc <BAS_Init>

  BLS_Init();
 80087f4:	f7ff ff79 	bl	80086ea <BLS_Init>

  CRS_STM_Init();
 80087f8:	f7ff ff7e 	bl	80086f8 <CRS_STM_Init>

  DIS_Init();
 80087fc:	f7ff ff83 	bl	8008706 <DIS_Init>

  EDS_STM_Init();
 8008800:	f7ff ff88 	bl	8008714 <EDS_STM_Init>

  HIDS_Init();
 8008804:	f7ff ff8d 	bl	8008722 <HIDS_Init>

  HRS_Init();
 8008808:	f7ff ff92 	bl	8008730 <HRS_Init>

  HTS_Init();
 800880c:	f7ff ff97 	bl	800873e <HTS_Init>

  IAS_Init();
 8008810:	f7ff ff9c 	bl	800874c <IAS_Init>

  LLS_Init();
 8008814:	f7ff ffa1 	bl	800875a <LLS_Init>

  TPS_Init();
 8008818:	f7ff ffa6 	bl	8008768 <TPS_Init>

  MOTENV_STM_Init();
 800881c:	f7ff ffab 	bl	8008776 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008820:	f7ff fe9a 	bl	8008558 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008824:	f7ff ffae 	bl	8008784 <ZDD_STM_Init>

  OTAS_STM_Init();
 8008828:	f7ff ffb3 	bl	8008792 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800882c:	f7ff ffbf 	bl	80087ae <BVOPUS_STM_Init>

  MESH_Init();
 8008830:	f7ff ffb6 	bl	80087a0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008834:	f7ff ffc2 	bl	80087bc <SVCCTL_InitCustomSvc>
  
  return;
 8008838:	bf00      	nop
}
 800883a:	bd80      	pop	{r7, pc}

0800883c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <SVCCTL_RegisterSvcHandler+0x30>)
 8008846:	7f1b      	ldrb	r3, [r3, #28]
 8008848:	4619      	mov	r1, r3
 800884a:	4a08      	ldr	r2, [pc, #32]	; (800886c <SVCCTL_RegisterSvcHandler+0x30>)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <SVCCTL_RegisterSvcHandler+0x30>)
 8008854:	7f1b      	ldrb	r3, [r3, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	b2da      	uxtb	r2, r3
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <SVCCTL_RegisterSvcHandler+0x30>)
 800885c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800885e:	bf00      	nop
}
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000130 	.word	0x20000130

08008870 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3301      	adds	r3, #1
 800887c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2bff      	cmp	r3, #255	; 0xff
 8008888:	d125      	bne.n	80088d6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	3302      	adds	r3, #2
 800888e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800889a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800889e:	d118      	bne.n	80088d2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	757b      	strb	r3, [r7, #21]
 80088a4:	e00d      	b.n	80088c2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80088a6:	7d7b      	ldrb	r3, [r7, #21]
 80088a8:	4a1a      	ldr	r2, [pc, #104]	; (8008914 <SVCCTL_UserEvtRx+0xa4>)
 80088aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80088bc:	7d7b      	ldrb	r3, [r7, #21]
 80088be:	3301      	adds	r3, #1
 80088c0:	757b      	strb	r3, [r7, #21]
 80088c2:	4b14      	ldr	r3, [pc, #80]	; (8008914 <SVCCTL_UserEvtRx+0xa4>)
 80088c4:	7f1b      	ldrb	r3, [r3, #28]
 80088c6:	7d7a      	ldrb	r2, [r7, #21]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3ec      	bcc.n	80088a6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80088cc:	e002      	b.n	80088d4 <SVCCTL_UserEvtRx+0x64>
              break;
 80088ce:	bf00      	nop
          break;
 80088d0:	e000      	b.n	80088d4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80088d2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80088d4:	e000      	b.n	80088d8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80088d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d00f      	beq.n	80088fe <SVCCTL_UserEvtRx+0x8e>
 80088de:	2b02      	cmp	r3, #2
 80088e0:	dc10      	bgt.n	8008904 <SVCCTL_UserEvtRx+0x94>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <SVCCTL_UserEvtRx+0x7c>
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d006      	beq.n	80088f8 <SVCCTL_UserEvtRx+0x88>
 80088ea:	e00b      	b.n	8008904 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fc6d 	bl	800a1cc <SVCCTL_App_Notification>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75bb      	strb	r3, [r7, #22]
      break;
 80088f6:	e008      	b.n	800890a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75bb      	strb	r3, [r7, #22]
      break;
 80088fc:	e005      	b.n	800890a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80088fe:	2300      	movs	r3, #0
 8008900:	75bb      	strb	r3, [r7, #22]
      break;
 8008902:	e002      	b.n	800890a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008904:	2301      	movs	r3, #1
 8008906:	75bb      	strb	r3, [r7, #22]
      break;
 8008908:	bf00      	nop
  }

  return (return_status);
 800890a:	7dbb      	ldrb	r3, [r7, #22]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000130 	.word	0x20000130

08008918 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008920:	f107 030c 	add.w	r3, r7, #12
 8008924:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2125      	movs	r1, #37	; 0x25
 8008930:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008934:	f000 fae2 	bl	8008efc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	330b      	adds	r3, #11
 800893c:	78db      	ldrb	r3, [r3, #3]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b088      	sub	sp, #32
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800894e:	f107 030c 	add.w	r3, r7, #12
 8008952:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	210f      	movs	r1, #15
 800895e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008962:	f000 facb 	bl	8008efc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	330b      	adds	r3, #11
 800896a:	78db      	ldrb	r3, [r3, #3]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	210e      	movs	r1, #14
 8008988:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800898c:	f000 fab6 	bl	8008efc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	330b      	adds	r3, #11
 8008994:	78db      	ldrb	r3, [r3, #3]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3720      	adds	r7, #32
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b08b      	sub	sp, #44	; 0x2c
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80089c8:	4b4a      	ldr	r3, [pc, #296]	; (8008af4 <SHCI_GetWirelessFwInfo+0x154>)
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80089d0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80089da:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a44      	ldr	r2, [pc, #272]	; (8008af8 <SHCI_GetWirelessFwInfo+0x158>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d10f      	bne.n	8008a0c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e01a      	b.n	8008a42 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008a14:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008a18:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	0e1b      	lsrs	r3, r3, #24
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	091b      	lsrs	r3, r3, #4
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	0e1b      	lsrs	r3, r3, #24
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	0c1b      	lsrs	r3, r3, #16
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	0e1b      	lsrs	r3, r3, #24
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	0c1b      	lsrs	r3, r3, #16
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	0e1b      	lsrs	r3, r3, #24
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	372c      	adds	r7, #44	; 0x2c
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	58004000 	.word	0x58004000
 8008af8:	a94656b9 	.word	0xa94656b9

08008afc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <hci_init+0x30>)
 8008b0c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008b0e:	4a08      	ldr	r2, [pc, #32]	; (8008b30 <hci_init+0x34>)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008b14:	4806      	ldr	r0, [pc, #24]	; (8008b30 <hci_init+0x34>)
 8008b16:	f000 f973 	bl	8008e00 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f8d4 	bl	8008ccc <TlInit>

  return;
 8008b24:	bf00      	nop
}
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200006ac 	.word	0x200006ac
 8008b30:	20000684 	.word	0x20000684

08008b34 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008b3a:	4822      	ldr	r0, [pc, #136]	; (8008bc4 <hci_user_evt_proc+0x90>)
 8008b3c:	f000 fe06 	bl	800974c <LST_is_empty>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d12b      	bne.n	8008b9e <hci_user_evt_proc+0x6a>
 8008b46:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <hci_user_evt_proc+0x94>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d027      	beq.n	8008b9e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008b4e:	f107 030c 	add.w	r3, r7, #12
 8008b52:	4619      	mov	r1, r3
 8008b54:	481b      	ldr	r0, [pc, #108]	; (8008bc4 <hci_user_evt_proc+0x90>)
 8008b56:	f000 fe88 	bl	800986a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008b5a:	4b1c      	ldr	r3, [pc, #112]	; (8008bcc <hci_user_evt_proc+0x98>)
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00c      	beq.n	8008b7c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008b66:	2301      	movs	r3, #1
 8008b68:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008b6a:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <hci_user_evt_proc+0x98>)
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	1d3a      	adds	r2, r7, #4
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008b74:	793a      	ldrb	r2, [r7, #4]
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <hci_user_evt_proc+0x94>)
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <hci_user_evt_proc+0x94>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008b82:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <hci_user_evt_proc+0x94>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fc03 	bl	8009398 <TL_MM_EvtDone>
 8008b92:	e004      	b.n	8008b9e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4619      	mov	r1, r3
 8008b98:	480a      	ldr	r0, [pc, #40]	; (8008bc4 <hci_user_evt_proc+0x90>)
 8008b9a:	f000 fdf9 	bl	8009790 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008b9e:	4809      	ldr	r0, [pc, #36]	; (8008bc4 <hci_user_evt_proc+0x90>)
 8008ba0:	f000 fdd4 	bl	800974c <LST_is_empty>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d107      	bne.n	8008bba <hci_user_evt_proc+0x86>
 8008baa:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <hci_user_evt_proc+0x94>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008bb2:	4804      	ldr	r0, [pc, #16]	; (8008bc4 <hci_user_evt_proc+0x90>)
 8008bb4:	f002 f82c 	bl	800ac10 <hci_notify_asynch_evt>
  }


  return;
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
}
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000158 	.word	0x20000158
 8008bc8:	20000164 	.word	0x20000164
 8008bcc:	20000684 	.word	0x20000684

08008bd0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f000 f8cb 	bl	8008d78 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008be2:	2300      	movs	r3, #0
 8008be4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	b21b      	sxth	r3, r3
 8008bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bf0:	b21a      	sxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	029b      	lsls	r3, r3, #10
 8008bf8:	b21b      	sxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b21b      	sxth	r3, r3
 8008bfe:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	b2d9      	uxtb	r1, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	8bbb      	ldrh	r3, [r7, #28]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f88d 	bl	8008d2c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008c12:	e04e      	b.n	8008cb2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008c14:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008c18:	f002 f811 	bl	800ac3e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008c1c:	e043      	b.n	8008ca6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4619      	mov	r1, r3
 8008c24:	4828      	ldr	r0, [pc, #160]	; (8008cc8 <hci_send_req+0xf8>)
 8008c26:	f000 fe20 	bl	800986a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	7a5b      	ldrb	r3, [r3, #9]
 8008c2e:	2b0f      	cmp	r3, #15
 8008c30:	d114      	bne.n	8008c5c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	330b      	adds	r3, #11
 8008c36:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8bba      	ldrh	r2, [r7, #28]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d104      	bne.n	8008c4e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d027      	beq.n	8008ca6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008c56:	2301      	movs	r3, #1
 8008c58:	77fb      	strb	r3, [r7, #31]
 8008c5a:	e024      	b.n	8008ca6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	330b      	adds	r3, #11
 8008c60:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	8bba      	ldrh	r2, [r7, #28]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d114      	bne.n	8008c9a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7a9b      	ldrb	r3, [r3, #10]
 8008c74:	3b03      	subs	r3, #3
 8008c76:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	bfa8      	it	ge
 8008c82:	461a      	movge	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6918      	ldr	r0, [r3, #16]
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	1cd9      	adds	r1, r3, #3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f002 fed9 	bl	800ba4c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <hci_send_req+0xf8>)
 8008ca8:	f000 fd50 	bl	800974c <LST_is_empty>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0b5      	beq.n	8008c1e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008cb2:	7ffb      	ldrb	r3, [r7, #31]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ad      	beq.n	8008c14 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f000 f85d 	bl	8008d78 <NotifyCmdStatus>

  return 0;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	200006a4 	.word	0x200006a4

08008ccc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008cd4:	480f      	ldr	r0, [pc, #60]	; (8008d14 <TlInit+0x48>)
 8008cd6:	f000 fd29 	bl	800972c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008cda:	4a0f      	ldr	r2, [pc, #60]	; (8008d18 <TlInit+0x4c>)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008ce0:	480e      	ldr	r0, [pc, #56]	; (8008d1c <TlInit+0x50>)
 8008ce2:	f000 fd23 	bl	800972c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008ce6:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <TlInit+0x54>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <TlInit+0x58>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <TlInit+0x5c>)
 8008cfa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <TlInit+0x58>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f107 0208 	add.w	r2, r7, #8
 8008d04:	4610      	mov	r0, r2
 8008d06:	4798      	blx	r3
  }

  return;
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
}
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	200006a4 	.word	0x200006a4
 8008d18:	20000160 	.word	0x20000160
 8008d1c:	20000158 	.word	0x20000158
 8008d20:	20000164 	.word	0x20000164
 8008d24:	20000684 	.word	0x20000684
 8008d28:	08008db9 	.word	0x08008db9

08008d2c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	603a      	str	r2, [r7, #0]
 8008d36:	80fb      	strh	r3, [r7, #6]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <SendCmd+0x44>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	88fa      	ldrh	r2, [r7, #6]
 8008d42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008d46:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <SendCmd+0x44>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	797a      	ldrb	r2, [r7, #5]
 8008d4c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008d4e:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <SendCmd+0x44>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	330c      	adds	r3, #12
 8008d54:	797a      	ldrb	r2, [r7, #5]
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f002 fe77 	bl	800ba4c <memcpy>

  hciContext.io.Send(0,0);
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <SendCmd+0x48>)
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2100      	movs	r1, #0
 8008d64:	2000      	movs	r0, #0
 8008d66:	4798      	blx	r3

  return;
 8008d68:	bf00      	nop
}
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000160 	.word	0x20000160
 8008d74:	20000684 	.word	0x20000684

08008d78 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d108      	bne.n	8008d9a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <NotifyCmdStatus+0x3c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008d90:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <NotifyCmdStatus+0x3c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2000      	movs	r0, #0
 8008d96:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008d98:	e008      	b.n	8008dac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <NotifyCmdStatus+0x3c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <NotifyCmdStatus+0x3c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2001      	movs	r0, #1
 8008da8:	4798      	blx	r3
  return;
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
}
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200006ac 	.word	0x200006ac

08008db8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7a5b      	ldrb	r3, [r3, #9]
 8008dc4:	2b0f      	cmp	r3, #15
 8008dc6:	d003      	beq.n	8008dd0 <TlEvtReceived+0x18>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7a5b      	ldrb	r3, [r3, #9]
 8008dcc:	2b0e      	cmp	r3, #14
 8008dce:	d107      	bne.n	8008de0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4809      	ldr	r0, [pc, #36]	; (8008df8 <TlEvtReceived+0x40>)
 8008dd4:	f000 fd02 	bl	80097dc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f001 ff25 	bl	800ac28 <hci_cmd_resp_release>
 8008dde:	e006      	b.n	8008dee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4806      	ldr	r0, [pc, #24]	; (8008dfc <TlEvtReceived+0x44>)
 8008de4:	f000 fcfa 	bl	80097dc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008de8:	4804      	ldr	r0, [pc, #16]	; (8008dfc <TlEvtReceived+0x44>)
 8008dea:	f001 ff11 	bl	800ac10 <hci_notify_asynch_evt>
  }

  return;
 8008dee:	bf00      	nop
}
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200006a4 	.word	0x200006a4
 8008dfc:	20000158 	.word	0x20000158

08008e00 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a05      	ldr	r2, [pc, #20]	; (8008e20 <hci_register_io_bus+0x20>)
 8008e0c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a04      	ldr	r2, [pc, #16]	; (8008e24 <hci_register_io_bus+0x24>)
 8008e12:	611a      	str	r2, [r3, #16]

  return;
 8008e14:	bf00      	nop
}
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	08009111 	.word	0x08009111
 8008e24:	08009179 	.word	0x08009179

08008e28 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4a08      	ldr	r2, [pc, #32]	; (8008e58 <shci_init+0x30>)
 8008e38:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008e3a:	4a08      	ldr	r2, [pc, #32]	; (8008e5c <shci_init+0x34>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008e40:	4806      	ldr	r0, [pc, #24]	; (8008e5c <shci_init+0x34>)
 8008e42:	f000 f911 	bl	8009068 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f894 	bl	8008f78 <TlInit>

  return;
 8008e50:	bf00      	nop
}
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	200006d0 	.word	0x200006d0
 8008e5c:	200006b0 	.word	0x200006b0

08008e60 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008e66:	4822      	ldr	r0, [pc, #136]	; (8008ef0 <shci_user_evt_proc+0x90>)
 8008e68:	f000 fc70 	bl	800974c <LST_is_empty>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12b      	bne.n	8008eca <shci_user_evt_proc+0x6a>
 8008e72:	4b20      	ldr	r3, [pc, #128]	; (8008ef4 <shci_user_evt_proc+0x94>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d027      	beq.n	8008eca <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	4619      	mov	r1, r3
 8008e80:	481b      	ldr	r0, [pc, #108]	; (8008ef0 <shci_user_evt_proc+0x90>)
 8008e82:	f000 fcf2 	bl	800986a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008e86:	4b1c      	ldr	r3, [pc, #112]	; (8008ef8 <shci_user_evt_proc+0x98>)
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008e92:	2301      	movs	r3, #1
 8008e94:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008e96:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <shci_user_evt_proc+0x98>)
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	1d3a      	adds	r2, r7, #4
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008ea0:	793a      	ldrb	r2, [r7, #4]
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <shci_user_evt_proc+0x94>)
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008ea8:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <shci_user_evt_proc+0x94>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008eae:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <shci_user_evt_proc+0x94>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fa6d 	bl	8009398 <TL_MM_EvtDone>
 8008ebe:	e004      	b.n	8008eca <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	480a      	ldr	r0, [pc, #40]	; (8008ef0 <shci_user_evt_proc+0x90>)
 8008ec6:	f000 fc63 	bl	8009790 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008eca:	4809      	ldr	r0, [pc, #36]	; (8008ef0 <shci_user_evt_proc+0x90>)
 8008ecc:	f000 fc3e 	bl	800974c <LST_is_empty>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d107      	bne.n	8008ee6 <shci_user_evt_proc+0x86>
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <shci_user_evt_proc+0x94>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008ede:	4804      	ldr	r0, [pc, #16]	; (8008ef0 <shci_user_evt_proc+0x90>)
 8008ee0:	f7f8 f8af 	bl	8001042 <shci_notify_asynch_evt>
  }


  return;
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
}
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000168 	.word	0x20000168
 8008ef4:	20000178 	.word	0x20000178
 8008ef8:	200006b0 	.word	0x200006b0

08008efc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60ba      	str	r2, [r7, #8]
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	4603      	mov	r3, r0
 8008f08:	81fb      	strh	r3, [r7, #14]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f000 f864 	bl	8008fdc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <shci_send+0x74>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	89fa      	ldrh	r2, [r7, #14]
 8008f1a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008f1e:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <shci_send+0x74>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	7b7a      	ldrb	r2, [r7, #13]
 8008f24:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008f26:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <shci_send+0x74>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	7b7a      	ldrb	r2, [r7, #13]
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 fd8b 	bl	800ba4c <memcpy>

  shciContext.io.Send(0,0);
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <shci_send+0x78>)
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008f40:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008f44:	f7f8 f894 	bl	8001070 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f103 0008 	add.w	r0, r3, #8
 8008f4e:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <shci_send+0x74>)
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <shci_send+0x74>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	3303      	adds	r3, #3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f002 fd76 	bl	800ba4c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008f60:	2001      	movs	r0, #1
 8008f62:	f000 f83b 	bl	8008fdc <Cmd_SetStatus>

  return;
 8008f66:	bf00      	nop
}
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000174 	.word	0x20000174
 8008f74:	200006b0 	.word	0x200006b0

08008f78 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008f80:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <TlInit+0x4c>)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008f86:	4810      	ldr	r0, [pc, #64]	; (8008fc8 <TlInit+0x50>)
 8008f88:	f000 fbd0 	bl	800972c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f000 f825 	bl	8008fdc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008f92:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <TlInit+0x54>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <TlInit+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00c      	beq.n	8008fba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <TlInit+0x5c>)
 8008fa6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <TlInit+0x60>)
 8008faa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008fac:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <TlInit+0x58>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f107 020c 	add.w	r2, r7, #12
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
  }

  return;
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
}
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000174 	.word	0x20000174
 8008fc8:	20000168 	.word	0x20000168
 8008fcc:	20000178 	.word	0x20000178
 8008fd0:	200006b0 	.word	0x200006b0
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009045 	.word	0x08009045

08008fdc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10b      	bne.n	8009004 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <Cmd_SetStatus+0x48>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <Cmd_SetStatus+0x48>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	; (8009028 <Cmd_SetStatus+0x4c>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009002:	e00b      	b.n	800901c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009004:	4b08      	ldr	r3, [pc, #32]	; (8009028 <Cmd_SetStatus+0x4c>)
 8009006:	2201      	movs	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800900a:	4b06      	ldr	r3, [pc, #24]	; (8009024 <Cmd_SetStatus+0x48>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009012:	4b04      	ldr	r3, [pc, #16]	; (8009024 <Cmd_SetStatus+0x48>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2001      	movs	r0, #1
 8009018:	4798      	blx	r3
  return;
 800901a:	bf00      	nop
 800901c:	bf00      	nop
}
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	200006d0 	.word	0x200006d0
 8009028:	20000170 	.word	0x20000170

0800902c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009034:	2000      	movs	r0, #0
 8009036:	f7f8 f810 	bl	800105a <shci_cmd_resp_release>

  return;
 800903a:	bf00      	nop
}
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	4805      	ldr	r0, [pc, #20]	; (8009064 <TlUserEvtReceived+0x20>)
 8009050:	f000 fbc4 	bl	80097dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009054:	4803      	ldr	r0, [pc, #12]	; (8009064 <TlUserEvtReceived+0x20>)
 8009056:	f7f7 fff4 	bl	8001042 <shci_notify_asynch_evt>

  return;
 800905a:	bf00      	nop
}
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000168 	.word	0x20000168

08009068 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a05      	ldr	r2, [pc, #20]	; (8009088 <shci_register_io_bus+0x20>)
 8009074:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a04      	ldr	r2, [pc, #16]	; (800908c <shci_register_io_bus+0x24>)
 800907a:	611a      	str	r2, [r3, #16]

  return;
 800907c:	bf00      	nop
}
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	08009225 	.word	0x08009225
 800908c:	08009279 	.word	0x08009279

08009090 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009094:	f002 f96e 	bl	800b374 <HW_IPCC_Enable>

  return;
 8009098:	bf00      	nop
}
 800909a:	bd80      	pop	{r7, pc}

0800909c <TL_Init>:


void TL_Init( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80090a0:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <TL_Init+0x48>)
 80090a2:	4a11      	ldr	r2, [pc, #68]	; (80090e8 <TL_Init+0x4c>)
 80090a4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80090a6:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <TL_Init+0x48>)
 80090a8:	4a10      	ldr	r2, [pc, #64]	; (80090ec <TL_Init+0x50>)
 80090aa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <TL_Init+0x48>)
 80090ae:	4a10      	ldr	r2, [pc, #64]	; (80090f0 <TL_Init+0x54>)
 80090b0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <TL_Init+0x48>)
 80090b4:	4a0f      	ldr	r2, [pc, #60]	; (80090f4 <TL_Init+0x58>)
 80090b6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <TL_Init+0x48>)
 80090ba:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <TL_Init+0x5c>)
 80090bc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <TL_Init+0x48>)
 80090c0:	4a0e      	ldr	r2, [pc, #56]	; (80090fc <TL_Init+0x60>)
 80090c2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <TL_Init+0x48>)
 80090c6:	4a0e      	ldr	r2, [pc, #56]	; (8009100 <TL_Init+0x64>)
 80090c8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <TL_Init+0x48>)
 80090cc:	4a0d      	ldr	r2, [pc, #52]	; (8009104 <TL_Init+0x68>)
 80090ce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80090d0:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <TL_Init+0x48>)
 80090d2:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <TL_Init+0x6c>)
 80090d4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80090d6:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <TL_Init+0x48>)
 80090d8:	4a0c      	ldr	r2, [pc, #48]	; (800910c <TL_Init+0x70>)
 80090da:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80090dc:	f002 f95e 	bl	800b39c <HW_IPCC_Init>

  return;
 80090e0:	bf00      	nop
}
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20030000 	.word	0x20030000
 80090e8:	20030028 	.word	0x20030028
 80090ec:	20030048 	.word	0x20030048
 80090f0:	20030058 	.word	0x20030058
 80090f4:	20030064 	.word	0x20030064
 80090f8:	2003006c 	.word	0x2003006c
 80090fc:	20030074 	.word	0x20030074
 8009100:	2003007c 	.word	0x2003007c
 8009104:	20030098 	.word	0x20030098
 8009108:	2003009c 	.word	0x2003009c
 800910c:	200300a8 	.word	0x200300a8

08009110 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800911c:	4811      	ldr	r0, [pc, #68]	; (8009164 <TL_BLE_Init+0x54>)
 800911e:	f000 fb05 	bl	800972c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009122:	4b11      	ldr	r3, [pc, #68]	; (8009168 <TL_BLE_Init+0x58>)
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a0c      	ldr	r2, [pc, #48]	; (800916c <TL_BLE_Init+0x5c>)
 800913c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a08      	ldr	r2, [pc, #32]	; (8009164 <TL_BLE_Init+0x54>)
 8009142:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009144:	f002 f940 	bl	800b3c8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a08      	ldr	r2, [pc, #32]	; (8009170 <TL_BLE_Init+0x60>)
 800914e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4a07      	ldr	r2, [pc, #28]	; (8009174 <TL_BLE_Init+0x64>)
 8009156:	6013      	str	r3, [r2, #0]

  return 0;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200300c4 	.word	0x200300c4
 8009168:	20030000 	.word	0x20030000
 800916c:	20030a48 	.word	0x20030a48
 8009170:	200006dc 	.word	0x200006dc
 8009174:	200006e0 	.word	0x200006e0

08009178 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <TL_BLE_SendCmd+0x34>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2201      	movs	r2, #1
 800918c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800918e:	4b07      	ldr	r3, [pc, #28]	; (80091ac <TL_BLE_SendCmd+0x34>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4619      	mov	r1, r3
 8009196:	2001      	movs	r0, #1
 8009198:	f000 f96c 	bl	8009474 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800919c:	f002 f91e 	bl	800b3dc <HW_IPCC_BLE_SendCmd>

  return 0;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20030000 	.word	0x20030000

080091b0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80091b6:	e01c      	b.n	80091f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80091b8:	1d3b      	adds	r3, r7, #4
 80091ba:	4619      	mov	r1, r3
 80091bc:	4812      	ldr	r0, [pc, #72]	; (8009208 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80091be:	f000 fb54 	bl	800986a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7a5b      	ldrb	r3, [r3, #9]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d003      	beq.n	80091d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7a5b      	ldrb	r3, [r3, #9]
 80091ce:	2b0e      	cmp	r3, #14
 80091d0:	d105      	bne.n	80091de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4619      	mov	r1, r3
 80091d6:	2002      	movs	r0, #2
 80091d8:	f000 f94c 	bl	8009474 <OutputDbgTrace>
 80091dc:	e004      	b.n	80091e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4619      	mov	r1, r3
 80091e2:	2003      	movs	r0, #3
 80091e4:	f000 f946 	bl	8009474 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80091e8:	4b08      	ldr	r3, [pc, #32]	; (800920c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4610      	mov	r0, r2
 80091f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80091f2:	4805      	ldr	r0, [pc, #20]	; (8009208 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80091f4:	f000 faaa 	bl	800974c <LST_is_empty>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0dc      	beq.n	80091b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80091fe:	bf00      	nop
}
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200300c4 	.word	0x200300c4
 800920c:	200006dc 	.word	0x200006dc

08009210 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4798      	blx	r3

  return;
 800921a:	bf00      	nop
}
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200006e0 	.word	0x200006e0

08009224 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009230:	480d      	ldr	r0, [pc, #52]	; (8009268 <TL_SYS_Init+0x44>)
 8009232:	f000 fa7b 	bl	800972c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <TL_SYS_Init+0x48>)
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4a08      	ldr	r2, [pc, #32]	; (8009268 <TL_SYS_Init+0x44>)
 8009248:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800924a:	f002 f8e9 	bl	800b420 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a07      	ldr	r2, [pc, #28]	; (8009270 <TL_SYS_Init+0x4c>)
 8009254:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	4a06      	ldr	r2, [pc, #24]	; (8009274 <TL_SYS_Init+0x50>)
 800925c:	6013      	str	r3, [r2, #0]

  return 0;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	200300cc 	.word	0x200300cc
 800926c:	20030000 	.word	0x20030000
 8009270:	200006e4 	.word	0x200006e4
 8009274:	200006e8 	.word	0x200006e8

08009278 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009284:	4b09      	ldr	r3, [pc, #36]	; (80092ac <TL_SYS_SendCmd+0x34>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2210      	movs	r2, #16
 800928c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800928e:	4b07      	ldr	r3, [pc, #28]	; (80092ac <TL_SYS_SendCmd+0x34>)
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4619      	mov	r1, r3
 8009296:	2004      	movs	r0, #4
 8009298:	f000 f8ec 	bl	8009474 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800929c:	f002 f8ca 	bl	800b434 <HW_IPCC_SYS_SendCmd>

  return 0;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20030000 	.word	0x20030000

080092b0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80092b4:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4619      	mov	r1, r3
 80092bc:	2005      	movs	r0, #5
 80092be:	f000 f8d9 	bl	8009474 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80092c8:	68d2      	ldr	r2, [r2, #12]
 80092ca:	6812      	ldr	r2, [r2, #0]
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3

  return;
 80092d0:	bf00      	nop
}
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20030000 	.word	0x20030000
 80092d8:	200006e4 	.word	0x200006e4

080092dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80092e2:	e00e      	b.n	8009302 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80092e4:	1d3b      	adds	r3, r7, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	480b      	ldr	r0, [pc, #44]	; (8009318 <HW_IPCC_SYS_EvtNot+0x3c>)
 80092ea:	f000 fabe 	bl	800986a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2006      	movs	r0, #6
 80092f4:	f000 f8be 	bl	8009474 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <HW_IPCC_SYS_EvtNot+0x40>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4610      	mov	r0, r2
 8009300:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009302:	4805      	ldr	r0, [pc, #20]	; (8009318 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009304:	f000 fa22 	bl	800974c <LST_is_empty>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0ea      	beq.n	80092e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800930e:	bf00      	nop
}
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200300cc 	.word	0x200300cc
 800931c:	200006e8 	.word	0x200006e8

08009320 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009328:	4817      	ldr	r0, [pc, #92]	; (8009388 <TL_MM_Init+0x68>)
 800932a:	f000 f9ff 	bl	800972c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800932e:	4817      	ldr	r0, [pc, #92]	; (800938c <TL_MM_Init+0x6c>)
 8009330:	f000 f9fc 	bl	800972c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009334:	4b16      	ldr	r3, [pc, #88]	; (8009390 <TL_MM_Init+0x70>)
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	4a16      	ldr	r2, [pc, #88]	; (8009394 <TL_MM_Init+0x74>)
 800933a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <TL_MM_Init+0x74>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6892      	ldr	r2, [r2, #8]
 8009344:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <TL_MM_Init+0x74>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68d2      	ldr	r2, [r2, #12]
 800934e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <TL_MM_Init+0x74>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a0c      	ldr	r2, [pc, #48]	; (8009388 <TL_MM_Init+0x68>)
 8009356:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009358:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <TL_MM_Init+0x74>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <TL_MM_Init+0x74>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6852      	ldr	r2, [r2, #4]
 800936a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <TL_MM_Init+0x74>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6912      	ldr	r2, [r2, #16]
 8009374:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009376:	4b07      	ldr	r3, [pc, #28]	; (8009394 <TL_MM_Init+0x74>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6952      	ldr	r2, [r2, #20]
 800937e:	619a      	str	r2, [r3, #24]

  return;
 8009380:	bf00      	nop
}
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200300b4 	.word	0x200300b4
 800938c:	200006d4 	.word	0x200006d4
 8009390:	20030000 	.word	0x20030000
 8009394:	200006ec 	.word	0x200006ec

08009398 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4807      	ldr	r0, [pc, #28]	; (80093c0 <TL_MM_EvtDone+0x28>)
 80093a4:	f000 fa1a 	bl	80097dc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	2000      	movs	r0, #0
 80093ac:	f000 f862 	bl	8009474 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80093b0:	4804      	ldr	r0, [pc, #16]	; (80093c4 <TL_MM_EvtDone+0x2c>)
 80093b2:	f002 f865 	bl	800b480 <HW_IPCC_MM_SendFreeBuf>

  return;
 80093b6:	bf00      	nop
}
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	200006d4 	.word	0x200006d4
 80093c4:	080093c9 	.word	0x080093c9

080093c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80093ce:	e00c      	b.n	80093ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80093d0:	1d3b      	adds	r3, r7, #4
 80093d2:	4619      	mov	r1, r3
 80093d4:	480a      	ldr	r0, [pc, #40]	; (8009400 <SendFreeBuf+0x38>)
 80093d6:	f000 fa48 	bl	800986a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80093da:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <SendFreeBuf+0x3c>)
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f9f9 	bl	80097dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80093ea:	4805      	ldr	r0, [pc, #20]	; (8009400 <SendFreeBuf+0x38>)
 80093ec:	f000 f9ae 	bl	800974c <LST_is_empty>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ec      	beq.n	80093d0 <SendFreeBuf+0x8>
  }

  return;
 80093f6:	bf00      	nop
}
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200006d4 	.word	0x200006d4
 8009404:	20030000 	.word	0x20030000

08009408 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <TL_TRACES_Init+0x1c>)
 800940e:	f000 f98d 	bl	800972c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <TL_TRACES_Init+0x20>)
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	4a03      	ldr	r2, [pc, #12]	; (8009424 <TL_TRACES_Init+0x1c>)
 8009418:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800941a:	f002 f867 	bl	800b4ec <HW_IPCC_TRACES_Init>

  return;
 800941e:	bf00      	nop
}
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200300bc 	.word	0x200300bc
 8009428:	20030000 	.word	0x20030000

0800942c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009432:	e008      	b.n	8009446 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4808      	ldr	r0, [pc, #32]	; (800945c <HW_IPCC_TRACES_EvtNot+0x30>)
 800943a:	f000 fa16 	bl	800986a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f80d 	bl	8009460 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009446:	4805      	ldr	r0, [pc, #20]	; (800945c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009448:	f000 f980 	bl	800974c <LST_is_empty>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0f0      	beq.n	8009434 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009452:	bf00      	nop
}
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200300bc 	.word	0x200300bc

08009460 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	6039      	str	r1, [r7, #0]
 800947e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	2b06      	cmp	r3, #6
 8009484:	d845      	bhi.n	8009512 <OutputDbgTrace+0x9e>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <OutputDbgTrace+0x18>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094a9 	.word	0x080094a9
 8009490:	080094cd 	.word	0x080094cd
 8009494:	080094d3 	.word	0x080094d3
 8009498:	080094e7 	.word	0x080094e7
 800949c:	080094f3 	.word	0x080094f3
 80094a0:	080094f9 	.word	0x080094f9
 80094a4:	08009507 	.word	0x08009507
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7a5b      	ldrb	r3, [r3, #9]
 80094b0:	2bff      	cmp	r3, #255	; 0xff
 80094b2:	d005      	beq.n	80094c0 <OutputDbgTrace+0x4c>
 80094b4:	2bff      	cmp	r3, #255	; 0xff
 80094b6:	dc05      	bgt.n	80094c4 <OutputDbgTrace+0x50>
 80094b8:	2b0e      	cmp	r3, #14
 80094ba:	d005      	beq.n	80094c8 <OutputDbgTrace+0x54>
 80094bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80094be:	e001      	b.n	80094c4 <OutputDbgTrace+0x50>
          break;
 80094c0:	bf00      	nop
 80094c2:	e027      	b.n	8009514 <OutputDbgTrace+0xa0>
          break;
 80094c4:	bf00      	nop
 80094c6:	e025      	b.n	8009514 <OutputDbgTrace+0xa0>
          break;
 80094c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80094ca:	e023      	b.n	8009514 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80094d0:	e020      	b.n	8009514 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7a5b      	ldrb	r3, [r3, #9]
 80094da:	2b0e      	cmp	r3, #14
 80094dc:	d001      	beq.n	80094e2 <OutputDbgTrace+0x6e>
 80094de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80094e0:	e000      	b.n	80094e4 <OutputDbgTrace+0x70>
          break;
 80094e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094e4:	e016      	b.n	8009514 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	7a5b      	ldrb	r3, [r3, #9]
 80094ee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094f0:	e010      	b.n	8009514 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80094f6:	e00d      	b.n	8009514 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	7a5b      	ldrb	r3, [r3, #9]
 8009500:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009502:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009504:	e006      	b.n	8009514 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	7a5b      	ldrb	r3, [r3, #9]
 800950e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009510:	e000      	b.n	8009514 <OutputDbgTrace+0xa0>

    default:
      break;
 8009512:	bf00      	nop
  }

  return;
 8009514:	bf00      	nop
}
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800952c:	215c      	movs	r1, #92	; 0x5c
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 fb30 	bl	800bb94 <strrchr>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800953a:	215c      	movs	r1, #92	; 0x5c
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f002 fb29 	bl	800bb94 <strrchr>
 8009542:	4603      	mov	r3, r0
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e00d      	b.n	8009566 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800954a:	212f      	movs	r1, #47	; 0x2f
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fb21 	bl	800bb94 <strrchr>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8009558:	212f      	movs	r1, #47	; 0x2f
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f002 fb1a 	bl	800bb94 <strrchr>
 8009560:	4603      	mov	r3, r0
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009566:	68fb      	ldr	r3, [r7, #12]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009576:	f3ef 8310 	mrs	r3, PRIMASK
 800957a:	60fb      	str	r3, [r7, #12]
  return(result);
 800957c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800957e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009580:	b672      	cpsid	i
}
 8009582:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009584:	1cbb      	adds	r3, r7, #2
 8009586:	4619      	mov	r1, r3
 8009588:	4812      	ldr	r0, [pc, #72]	; (80095d4 <DbgTrace_TxCpltCallback+0x64>)
 800958a:	f000 fbe6 	bl	8009d5a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800958e:	1cbb      	adds	r3, r7, #2
 8009590:	4619      	mov	r1, r3
 8009592:	4810      	ldr	r0, [pc, #64]	; (80095d4 <DbgTrace_TxCpltCallback+0x64>)
 8009594:	f000 fcd2 	bl	8009f3c <CircularQueue_Sense>
 8009598:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <DbgTrace_TxCpltCallback+0x4a>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f383 8810 	msr	PRIMASK, r3
}
 80095aa:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80095ac:	887b      	ldrh	r3, [r7, #2]
 80095ae:	4a0a      	ldr	r2, [pc, #40]	; (80095d8 <DbgTrace_TxCpltCallback+0x68>)
 80095b0:	4619      	mov	r1, r3
 80095b2:	6938      	ldr	r0, [r7, #16]
 80095b4:	f7f7 f8e7 	bl	8000786 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80095b8:	e008      	b.n	80095cc <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <DbgTrace_TxCpltCallback+0x6c>)
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	bf00      	nop
}
 80095cc:	bf00      	nop
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200006f0 	.word	0x200006f0
 80095d8:	08009571 	.word	0x08009571
 80095dc:	2000000d 	.word	0x2000000d

080095e0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80095e6:	f7f7 f8c8 	bl	800077a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80095ea:	2302      	movs	r3, #2
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095f4:	4903      	ldr	r1, [pc, #12]	; (8009604 <DbgTraceInit+0x24>)
 80095f6:	4804      	ldr	r0, [pc, #16]	; (8009608 <DbgTraceInit+0x28>)
 80095f8:	f000 f956 	bl	80098a8 <CircularQueue_Init>
#endif 
#endif
  return;
 80095fc:	bf00      	nop
}
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000710 	.word	0x20000710
 8009608:	200006f0 	.word	0x200006f0

0800960c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f805 	bl	800962c <DbgTraceWrite>
 8009622:	4603      	mov	r3, r0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08a      	sub	sp, #40	; 0x28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800963c:	f3ef 8310 	mrs	r3, PRIMASK
 8009640:	61bb      	str	r3, [r7, #24]
  return(result);
 8009642:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009644:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964c:	d102      	bne.n	8009654 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800964e:	2300      	movs	r3, #0
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
 8009652:	e037      	b.n	80096c4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d006      	beq.n	8009668 <DbgTraceWrite+0x3c>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d003      	beq.n	8009668 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
 8009666:	e02d      	b.n	80096c4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d02a      	beq.n	80096c4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009672:	b672      	cpsid	i
}
 8009674:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	b29a      	uxth	r2, r3
 800967a:	2301      	movs	r3, #1
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	4814      	ldr	r0, [pc, #80]	; (80096d0 <DbgTraceWrite+0xa4>)
 8009680:	f000 f944 	bl	800990c <CircularQueue_Add>
 8009684:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d015      	beq.n	80096b8 <DbgTraceWrite+0x8c>
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <DbgTraceWrite+0xa8>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d010      	beq.n	80096b8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <DbgTraceWrite+0xa8>)
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f383 8810 	msr	PRIMASK, r3
}
 80096a6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4a0a      	ldr	r2, [pc, #40]	; (80096d8 <DbgTraceWrite+0xac>)
 80096ae:	4619      	mov	r1, r3
 80096b0:	69f8      	ldr	r0, [r7, #28]
 80096b2:	f7f7 f868 	bl	8000786 <DbgOutputTraces>
 80096b6:	e005      	b.n	80096c4 <DbgTraceWrite+0x98>
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3728      	adds	r7, #40	; 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200006f0 	.word	0x200006f0
 80096d4:	2000000d 	.word	0x2000000d
 80096d8:	08009571 	.word	0x08009571

080096dc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80096e6:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <OTP_Read+0x48>)
 80096e8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096ea:	e002      	b.n	80096f2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3b08      	subs	r3, #8
 80096f0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3307      	adds	r3, #7
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	79fa      	ldrb	r2, [r7, #7]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d003      	beq.n	8009706 <OTP_Read+0x2a>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a09      	ldr	r2, [pc, #36]	; (8009728 <OTP_Read+0x4c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d1f2      	bne.n	80096ec <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3307      	adds	r3, #7
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	429a      	cmp	r2, r3
 8009710:	d001      	beq.n	8009716 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009716:	68fb      	ldr	r3, [r7, #12]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	1fff73f8 	.word	0x1fff73f8
 8009728:	1fff7000 	.word	0x1fff7000

0800972c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009754:	f3ef 8310 	mrs	r3, PRIMASK
 8009758:	60fb      	str	r3, [r7, #12]
  return(result);
 800975a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800975c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800975e:	b672      	cpsid	i
}
 8009760:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	429a      	cmp	r2, r3
 800976a:	d102      	bne.n	8009772 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	75fb      	strb	r3, [r7, #23]
 8009770:	e001      	b.n	8009776 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009772:	2300      	movs	r3, #0
 8009774:	75fb      	strb	r3, [r7, #23]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f383 8810 	msr	PRIMASK, r3
}
 8009780:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
}
 8009784:	4618      	mov	r0, r3
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979a:	f3ef 8310 	mrs	r3, PRIMASK
 800979e:	60fb      	str	r3, [r7, #12]
  return(result);
 80097a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097a4:	b672      	cpsid	i
}
 80097a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	605a      	str	r2, [r3, #4]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f383 8810 	msr	PRIMASK, r3
}
 80097ce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097f0:	b672      	cpsid	i
}
 80097f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f383 8810 	msr	PRIMASK, r3
}
 800981a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800981c:	bf00      	nop
 800981e:	371c      	adds	r7, #28
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009830:	f3ef 8310 	mrs	r3, PRIMASK
 8009834:	60fb      	str	r3, [r7, #12]
  return(result);
 8009836:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800983a:	b672      	cpsid	i
}
 800983c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6812      	ldr	r2, [r2, #0]
 8009846:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6852      	ldr	r2, [r2, #4]
 8009850:	605a      	str	r2, [r3, #4]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b086      	sub	sp, #24
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009874:	f3ef 8310 	mrs	r3, PRIMASK
 8009878:	60fb      	str	r3, [r7, #12]
  return(result);
 800987a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800987c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800987e:	b672      	cpsid	i
}
 8009880:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff ffca 	bl	8009828 <LST_remove_node>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f383 8810 	msr	PRIMASK, r3
}
 800989e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098a0:	bf00      	nop
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	887a      	ldrh	r2, [r7, #2]
 80098de:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	7e3a      	ldrb	r2, [r7, #24]
 80098e4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80098e6:	7e3b      	ldrb	r3, [r7, #24]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <CircularQueue_Init+0x56>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	891b      	ldrh	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80098f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098fc:	e000      	b.n	8009900 <CircularQueue_Init+0x58>
  }
  return 0;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08e      	sub	sp, #56	; 0x38
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800991c:	2300      	movs	r3, #0
 800991e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009920:	2300      	movs	r3, #0
 8009922:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009924:	2300      	movs	r3, #0
 8009926:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009928:	2300      	movs	r3, #0
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009930:	2300      	movs	r3, #0
 8009932:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009934:	2300      	movs	r3, #0
 8009936:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <CircularQueue_Add+0x38>
 8009940:	2302      	movs	r3, #2
 8009942:	e000      	b.n	8009946 <CircularQueue_Add+0x3a>
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d02a      	beq.n	80099a6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	891b      	ldrh	r3, [r3, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d123      	bne.n	80099a0 <CircularQueue_Add+0x94>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4413      	add	r3, r2
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6819      	ldr	r1, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	1c58      	adds	r0, r3, #1
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4298      	cmp	r0, r3
 8009976:	d306      	bcc.n	8009986 <CircularQueue_Add+0x7a>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6918      	ldr	r0, [r3, #16]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	1ac3      	subs	r3, r0, r3
 8009982:	3301      	adds	r3, #1
 8009984:	e002      	b.n	800998c <CircularQueue_Add+0x80>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	3301      	adds	r3, #1
 800998c:	440b      	add	r3, r1
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	b29b      	uxth	r3, r3
 8009996:	4413      	add	r3, r2
 8009998:	b29b      	uxth	r3, r3
 800999a:	3302      	adds	r3, #2
 800999c:	b29b      	uxth	r3, r3
 800999e:	e001      	b.n	80099a4 <CircularQueue_Add+0x98>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	891b      	ldrh	r3, [r3, #8]
 80099a4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	891b      	ldrh	r3, [r3, #8]
 80099b2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691a      	ldr	r2, [r3, #16]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d307      	bcc.n	80099d0 <CircularQueue_Add+0xc4>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6919      	ldr	r1, [r3, #16]
 80099c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ca:	440b      	add	r3, r1
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	e000      	b.n	80099d2 <CircularQueue_Add+0xc6>
 80099d0:	2300      	movs	r3, #0
 80099d2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80099d4:	88fa      	ldrh	r2, [r7, #6]
 80099d6:	7ffb      	ldrb	r3, [r7, #31]
 80099d8:	4413      	add	r3, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d80b      	bhi.n	8009a00 <CircularQueue_Add+0xf4>
 80099e8:	88fa      	ldrh	r2, [r7, #6]
 80099ea:	7ffb      	ldrb	r3, [r7, #31]
 80099ec:	4413      	add	r3, r2
 80099ee:	461a      	mov	r2, r3
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80099f6:	fb01 f202 	mul.w	r2, r1, r2
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	e000      	b.n	8009a02 <CircularQueue_Add+0xf6>
 8009a00:	2300      	movs	r3, #0
 8009a02:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009a04:	7dfa      	ldrb	r2, [r7, #23]
 8009a06:	7ffb      	ldrb	r3, [r7, #31]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	bf8c      	ite	hi
 8009a0c:	2301      	movhi	r3, #1
 8009a0e:	2300      	movls	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009a14:	7fbb      	ldrb	r3, [r7, #30]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <CircularQueue_Add+0x120>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	7f1b      	ldrb	r3, [r3, #28]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <CircularQueue_Add+0x120>
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	e000      	b.n	8009a2e <CircularQueue_Add+0x122>
 8009a2c:	8bbb      	ldrh	r3, [r7, #28]
 8009a2e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009a30:	7fbb      	ldrb	r3, [r7, #30]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d008      	beq.n	8009a48 <CircularQueue_Add+0x13c>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	7f1b      	ldrb	r3, [r3, #28]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <CircularQueue_Add+0x13c>
 8009a42:	7ffb      	ldrb	r3, [r7, #31]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	e000      	b.n	8009a4a <CircularQueue_Add+0x13e>
 8009a48:	8bbb      	ldrh	r3, [r7, #28]
 8009a4a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009a4c:	88fb      	ldrh	r3, [r7, #6]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 817e 	beq.w	8009d50 <CircularQueue_Add+0x444>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	695a      	ldr	r2, [r3, #20]
 8009a58:	88f9      	ldrh	r1, [r7, #6]
 8009a5a:	7ffb      	ldrb	r3, [r7, #31]
 8009a5c:	440b      	add	r3, r1
 8009a5e:	4619      	mov	r1, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	fb01 f303 	mul.w	r3, r1, r3
 8009a66:	441a      	add	r2, r3
 8009a68:	8bbb      	ldrh	r3, [r7, #28]
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	f200 816d 	bhi.w	8009d50 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009a76:	2300      	movs	r3, #0
 8009a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a7a:	e14a      	b.n	8009d12 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	691a      	ldr	r2, [r3, #16]
 8009a80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a82:	441a      	add	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d307      	bcc.n	8009a9c <CircularQueue_Add+0x190>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a92:	441a      	add	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	e003      	b.n	8009aa4 <CircularQueue_Add+0x198>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009aa2:	4413      	add	r3, r2
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	891b      	ldrh	r3, [r3, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d130      	bne.n	8009b18 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	1c59      	adds	r1, r3, #1
 8009abe:	6339      	str	r1, [r7, #48]	; 0x30
 8009ac0:	4413      	add	r3, r2
 8009ac2:	88fa      	ldrh	r2, [r7, #6]
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d304      	bcc.n	8009adc <CircularQueue_Add+0x1d0>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	e000      	b.n	8009ade <CircularQueue_Add+0x1d2>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009ae0:	88fb      	ldrh	r3, [r7, #6]
 8009ae2:	0a1b      	lsrs	r3, r3, #8
 8009ae4:	b298      	uxth	r0, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	1c59      	adds	r1, r3, #1
 8009aee:	6339      	str	r1, [r7, #48]	; 0x30
 8009af0:	4413      	add	r3, r2
 8009af2:	b2c2      	uxtb	r2, r0
 8009af4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d304      	bcc.n	8009b0a <CircularQueue_Add+0x1fe>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	e000      	b.n	8009b0c <CircularQueue_Add+0x200>
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	1c9a      	adds	r2, r3, #2
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009b18:	88fa      	ldrh	r2, [r7, #6]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	1acb      	subs	r3, r1, r3
 8009b22:	4293      	cmp	r3, r2
 8009b24:	bf28      	it	cs
 8009b26:	4613      	movcs	r3, r2
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009b2a:	88fb      	ldrh	r3, [r7, #6]
 8009b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d007      	beq.n	8009b42 <CircularQueue_Add+0x236>
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d225      	bcs.n	8009b86 <CircularQueue_Add+0x27a>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	7f1b      	ldrb	r3, [r3, #28]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d121      	bne.n	8009b86 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	18d0      	adds	r0, r2, r3
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4e:	fb02 f303 	mul.w	r3, r2, r3
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	4413      	add	r3, r2
 8009b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b58:	4619      	mov	r1, r3
 8009b5a:	f001 ff77 	bl	800ba4c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	441a      	add	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009b72:	88fa      	ldrh	r2, [r7, #6]
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	4413      	add	r3, r2
 8009b82:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009b84:	e0a4      	b.n	8009cd0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 80a1 	beq.w	8009cd0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	7f1b      	ldrb	r3, [r3, #28]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d03a      	beq.n	8009c10 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	891b      	ldrh	r3, [r3, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10d      	bne.n	8009bbe <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	3b02      	subs	r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	22ff      	movs	r2, #255	; 0xff
 8009bae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4413      	add	r3, r2
 8009bba:	22ff      	movs	r2, #255	; 0xff
 8009bbc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	695a      	ldr	r2, [r3, #20]
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	441a      	add	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009bce:	88fb      	ldrh	r3, [r7, #6]
 8009bd0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	891b      	ldrh	r3, [r3, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d16f      	bne.n	8009cbe <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	1c59      	adds	r1, r3, #1
 8009be6:	6339      	str	r1, [r7, #48]	; 0x30
 8009be8:	4413      	add	r3, r2
 8009bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	0a18      	lsrs	r0, r3, #8
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	1c59      	adds	r1, r3, #1
 8009bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8009bfe:	4413      	add	r3, r2
 8009c00:	b2c2      	uxtb	r2, r0
 8009c02:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	1c9a      	adds	r2, r3, #2
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	615a      	str	r2, [r3, #20]
 8009c0e:	e056      	b.n	8009cbe <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	7f1b      	ldrb	r3, [r3, #28]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d050      	beq.n	8009cbe <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	891b      	ldrh	r3, [r3, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d14a      	bne.n	8009cba <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	3b02      	subs	r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	0a19      	lsrs	r1, r3, #8
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	4413      	add	r3, r2
 8009c42:	b2ca      	uxtb	r2, r1
 8009c44:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	18d0      	adds	r0, r2, r3
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	4413      	add	r3, r2
 8009c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f001 fef5 	bl	800ba4c <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	695a      	ldr	r2, [r3, #20]
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	441a      	add	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009c84:	2300      	movs	r3, #0
 8009c86:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	1c59      	adds	r1, r3, #1
 8009c90:	6339      	str	r1, [r7, #48]	; 0x30
 8009c92:	4413      	add	r3, r2
 8009c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	0a18      	lsrs	r0, r3, #8
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	1c59      	adds	r1, r3, #1
 8009ca6:	6339      	str	r1, [r7, #48]	; 0x30
 8009ca8:	4413      	add	r3, r2
 8009caa:	b2c2      	uxtb	r2, r0
 8009cac:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	1c9a      	adds	r2, r3, #2
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	615a      	str	r2, [r3, #20]
 8009cb8:	e001      	b.n	8009cbe <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e049      	b.n	8009d52 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4413      	add	r3, r2
 8009cc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d015      	beq.n	8009d02 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	18d0      	adds	r0, r2, r3
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce2:	fb03 f202 	mul.w	r2, r3, r2
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	4413      	add	r3, r2
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	4413      	add	r3, r2
 8009cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f001 feab 	bl	800ba4c <memcpy>
        q->byteCount += NbBytesToCopy;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	695a      	ldr	r2, [r3, #20]
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	441a      	add	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	3301      	adds	r3, #1
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	f4ff aeb0 	bcc.w	8009a7c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6919      	ldr	r1, [r3, #16]
 8009d24:	7ffb      	ldrb	r3, [r7, #31]
 8009d26:	4419      	add	r1, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	4299      	cmp	r1, r3
 8009d2e:	d307      	bcc.n	8009d40 <CircularQueue_Add+0x434>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6919      	ldr	r1, [r3, #16]
 8009d34:	7ffb      	ldrb	r3, [r7, #31]
 8009d36:	4419      	add	r1, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	1acb      	subs	r3, r1, r3
 8009d3e:	e003      	b.n	8009d48 <CircularQueue_Add+0x43c>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6919      	ldr	r1, [r3, #16]
 8009d44:	7ffb      	ldrb	r3, [r7, #31]
 8009d46:	440b      	add	r3, r1
 8009d48:	4413      	add	r3, r2
 8009d4a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	e000      	b.n	8009d52 <CircularQueue_Add+0x446>
    return NULL;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3738      	adds	r7, #56	; 0x38
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	891b      	ldrh	r3, [r3, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <CircularQueue_Remove+0x1e>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e000      	b.n	8009d7a <CircularQueue_Remove+0x20>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80cc 	beq.w	8009f22 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	891b      	ldrh	r3, [r3, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d121      	bne.n	8009dd6 <CircularQueue_Remove+0x7c>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	1c58      	adds	r0, r3, #1
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	4298      	cmp	r0, r3
 8009db0:	d306      	bcc.n	8009dc0 <CircularQueue_Remove+0x66>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68d8      	ldr	r0, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	1ac3      	subs	r3, r0, r3
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	e002      	b.n	8009dc6 <CircularQueue_Remove+0x6c>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	440b      	add	r3, r1
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	e001      	b.n	8009dda <CircularQueue_Remove+0x80>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	891b      	ldrh	r3, [r3, #8]
 8009dda:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7f1b      	ldrb	r3, [r3, #28]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d057      	beq.n	8009e98 <CircularQueue_Remove+0x13e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	7f1b      	ldrb	r3, [r3, #28]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d151      	bne.n	8009e98 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009df4:	897b      	ldrh	r3, [r7, #10]
 8009df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d103      	bne.n	8009e06 <CircularQueue_Remove+0xac>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	891b      	ldrh	r3, [r3, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d012      	beq.n	8009e2c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68da      	ldr	r2, [r3, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d942      	bls.n	8009e98 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	891b      	ldrh	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d03e      	beq.n	8009e98 <CircularQueue_Remove+0x13e>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	8912      	ldrh	r2, [r2, #8]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d235      	bcs.n	8009e98 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	695a      	ldr	r2, [r3, #20]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68d9      	ldr	r1, [r3, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	1acb      	subs	r3, r1, r3
 8009e3a:	441a      	add	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	891b      	ldrh	r3, [r3, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d121      	bne.n	8009e92 <CircularQueue_Remove+0x138>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6819      	ldr	r1, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	1c58      	adds	r0, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	4298      	cmp	r0, r3
 8009e6c:	d306      	bcc.n	8009e7c <CircularQueue_Remove+0x122>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68d8      	ldr	r0, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	1ac3      	subs	r3, r0, r3
 8009e78:	3301      	adds	r3, #1
 8009e7a:	e002      	b.n	8009e82 <CircularQueue_Remove+0x128>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	440b      	add	r3, r1
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4413      	add	r3, r2
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	e001      	b.n	8009e96 <CircularQueue_Remove+0x13c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	891b      	ldrh	r3, [r3, #8]
 8009e96:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68d9      	ldr	r1, [r3, #12]
 8009ea0:	7a7b      	ldrb	r3, [r7, #9]
 8009ea2:	4419      	add	r1, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d307      	bcc.n	8009ebc <CircularQueue_Remove+0x162>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68d9      	ldr	r1, [r3, #12]
 8009eb0:	7a7b      	ldrb	r3, [r7, #9]
 8009eb2:	4419      	add	r1, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	1acb      	subs	r3, r1, r3
 8009eba:	e003      	b.n	8009ec4 <CircularQueue_Remove+0x16a>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68d9      	ldr	r1, [r3, #12]
 8009ec0:	7a7b      	ldrb	r3, [r7, #9]
 8009ec2:	440b      	add	r3, r1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	8979      	ldrh	r1, [r7, #10]
 8009ece:	7a7a      	ldrb	r2, [r7, #9]
 8009ed0:	440a      	add	r2, r1
 8009ed2:	1a9a      	subs	r2, r3, r2
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01b      	beq.n	8009f18 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	897b      	ldrh	r3, [r7, #10]
 8009ee6:	441a      	add	r2, r3
 8009ee8:	7a7b      	ldrb	r3, [r7, #9]
 8009eea:	441a      	add	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d309      	bcc.n	8009f08 <CircularQueue_Remove+0x1ae>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68da      	ldr	r2, [r3, #12]
 8009ef8:	897b      	ldrh	r3, [r7, #10]
 8009efa:	441a      	add	r2, r3
 8009efc:	7a7b      	ldrb	r3, [r7, #9]
 8009efe:	441a      	add	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	e005      	b.n	8009f14 <CircularQueue_Remove+0x1ba>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	897b      	ldrh	r3, [r7, #10]
 8009f0e:	441a      	add	r2, r3
 8009f10:	7a7b      	ldrb	r3, [r7, #9]
 8009f12:	4413      	add	r3, r2
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	1e5a      	subs	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	897a      	ldrh	r2, [r7, #10]
 8009f2c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	891b      	ldrh	r3, [r3, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <CircularQueue_Sense+0x1e>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e000      	b.n	8009f5c <CircularQueue_Sense+0x20>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8090 	beq.w	800a090 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	891b      	ldrh	r3, [r3, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d121      	bne.n	8009fc2 <CircularQueue_Sense+0x86>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6819      	ldr	r1, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	1c58      	adds	r0, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	d306      	bcc.n	8009fac <CircularQueue_Sense+0x70>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68d8      	ldr	r0, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	1ac3      	subs	r3, r0, r3
 8009fa8:	3301      	adds	r3, #1
 8009faa:	e002      	b.n	8009fb2 <CircularQueue_Sense+0x76>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	440b      	add	r3, r1
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	021b      	lsls	r3, r3, #8
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	e001      	b.n	8009fc6 <CircularQueue_Sense+0x8a>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7f1b      	ldrb	r3, [r3, #28]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d048      	beq.n	800a066 <CircularQueue_Sense+0x12a>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7f1b      	ldrb	r3, [r3, #28]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d142      	bne.n	800a066 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009fe0:	8a7b      	ldrh	r3, [r7, #18]
 8009fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d103      	bne.n	8009ff2 <CircularQueue_Sense+0xb6>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	891b      	ldrh	r3, [r3, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d012      	beq.n	800a018 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d933      	bls.n	800a066 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	891b      	ldrh	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d02f      	beq.n	800a066 <CircularQueue_Sense+0x12a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	8912      	ldrh	r2, [r2, #8]
 800a014:	4293      	cmp	r3, r2
 800a016:	d226      	bcs.n	800a066 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	891b      	ldrh	r3, [r3, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11d      	bne.n	800a060 <CircularQueue_Sense+0x124>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	1c58      	adds	r0, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4298      	cmp	r0, r3
 800a03e:	d305      	bcc.n	800a04c <CircularQueue_Sense+0x110>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	1ac3      	subs	r3, r0, r3
 800a048:	3301      	adds	r3, #1
 800a04a:	e001      	b.n	800a050 <CircularQueue_Sense+0x114>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	440b      	add	r3, r1
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4413      	add	r3, r2
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	e001      	b.n	800a064 <CircularQueue_Sense+0x128>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	891b      	ldrh	r3, [r3, #8]
 800a064:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	7af9      	ldrb	r1, [r7, #11]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4419      	add	r1, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	4299      	cmp	r1, r3
 800a076:	d306      	bcc.n	800a086 <CircularQueue_Sense+0x14a>
 800a078:	7af9      	ldrb	r1, [r7, #11]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4419      	add	r1, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	1acb      	subs	r3, r1, r3
 800a084:	e002      	b.n	800a08c <CircularQueue_Sense+0x150>
 800a086:	7af9      	ldrb	r1, [r7, #11]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	440b      	add	r3, r1
 800a08c:	4413      	add	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	8a7a      	ldrh	r2, [r7, #18]
 800a09a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a09c:	697b      	ldr	r3, [r7, #20]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
	...

0800a0ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a0b0:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <LL_FLASH_GetUDN+0x14>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	1fff7580 	.word	0x1fff7580

0800a0c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a0c8:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <LL_FLASH_GetDeviceID+0x14>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	1fff7584 	.word	0x1fff7584

0800a0dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a0e0:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <LL_FLASH_GetSTCompanyID+0x14>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	0a1b      	lsrs	r3, r3, #8
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	1fff7584 	.word	0x1fff7584

0800a0f4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800a0f4:	b5b0      	push	{r4, r5, r7, lr}
 800a0f6:	b08e      	sub	sp, #56	; 0x38
 800a0f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a0fa:	4b2a      	ldr	r3, [pc, #168]	; (800a1a4 <APP_BLE_Init+0xb0>)
 800a0fc:	1d3c      	adds	r4, r7, #4
 800a0fe:	461d      	mov	r5, r3
 800a100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a10a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800a110:	f000 fb12 	bl	800a738 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a114:	2101      	movs	r1, #1
 800a116:	2002      	movs	r0, #2
 800a118:	f001 fa10 	bl	800b53c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a11c:	4a22      	ldr	r2, [pc, #136]	; (800a1a8 <APP_BLE_Init+0xb4>)
 800a11e:	2100      	movs	r1, #0
 800a120:	2002      	movs	r0, #2
 800a122:	f001 fb25 	bl	800b770 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe fbf5 	bl	8008918 <SHCI_C2_BLE_Init>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800a134:	f7f8 f99c 	bl	8002470 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a138:	f000 fb14 	bl	800a764 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a13c:	f7fe fb46 	bl	80087cc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a140:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <APP_BLE_Init+0xb8>)
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a148:	4b18      	ldr	r3, [pc, #96]	; (800a1ac <APP_BLE_Init+0xb8>)
 800a14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a14e:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a150:	4a17      	ldr	r2, [pc, #92]	; (800a1b0 <APP_BLE_Init+0xbc>)
 800a152:	2100      	movs	r1, #0
 800a154:	2001      	movs	r0, #1
 800a156:	f001 fb0b 	bl	800b770 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800a15a:	2006      	movs	r0, #6
 800a15c:	f7fd fff0 	bl	8008140 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800a160:	f000 ff80 	bl	800b064 <P2PS_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800a164:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <APP_BLE_Init+0xc0>)
 800a166:	2200      	movs	r2, #0
 800a168:	4913      	ldr	r1, [pc, #76]	; (800a1b8 <APP_BLE_Init+0xc4>)
 800a16a:	2000      	movs	r0, #0
 800a16c:	f7f7 fc9c 	bl	8001aa8 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800a170:	4b12      	ldr	r3, [pc, #72]	; (800a1bc <APP_BLE_Init+0xc8>)
 800a172:	2200      	movs	r2, #0
 800a174:	4912      	ldr	r1, [pc, #72]	; (800a1c0 <APP_BLE_Init+0xcc>)
 800a176:	2000      	movs	r0, #0
 800a178:	f7f7 fc96 	bl	8001aa8 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a17c:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <APP_BLE_Init+0xb8>)
 800a17e:	2200      	movs	r2, #0
 800a180:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a182:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <APP_BLE_Init+0xb8>)
 800a184:	2200      	movs	r2, #0
 800a186:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800a188:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <APP_BLE_Init+0xd0>)
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800a18e:	4b0e      	ldr	r3, [pc, #56]	; (800a1c8 <APP_BLE_Init+0xd4>)
 800a190:	22a0      	movs	r2, #160	; 0xa0
 800a192:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800a194:	2001      	movs	r0, #1
 800a196:	f000 fb99 	bl	800a8cc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800a19a:	bf00      	nop
}
 800a19c:	3738      	adds	r7, #56	; 0x38
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800ce68 	.word	0x0800ce68
 800a1a8:	08008b35 	.word	0x08008b35
 800a1ac:	2000017c 	.word	0x2000017c
 800a1b0:	0800ab39 	.word	0x0800ab39
 800a1b4:	0800abe9 	.word	0x0800abe9
 800a1b8:	200001fd 	.word	0x200001fd
 800a1bc:	0800abf9 	.word	0x0800abf9
 800a1c0:	200001fe 	.word	0x200001fe
 800a1c4:	20000200 	.word	0x20000200
 800a1c8:	20000202 	.word	0x20000202

0800a1cc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a1d4:	2392      	movs	r3, #146	; 0x92
 800a1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2bff      	cmp	r3, #255	; 0xff
 800a1e6:	f000 8113 	beq.w	800a410 <SVCCTL_App_Notification+0x244>
 800a1ea:	2bff      	cmp	r3, #255	; 0xff
 800a1ec:	f300 8278 	bgt.w	800a6e0 <SVCCTL_App_Notification+0x514>
 800a1f0:	2b05      	cmp	r3, #5
 800a1f2:	d002      	beq.n	800a1fa <SVCCTL_App_Notification+0x2e>
 800a1f4:	2b3e      	cmp	r3, #62	; 0x3e
 800a1f6:	d02d      	beq.n	800a254 <SVCCTL_App_Notification+0x88>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a1f8:	e272      	b.n	800a6e0 <SVCCTL_App_Notification+0x514>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	3302      	adds	r3, #2
 800a1fe:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a206:	b29a      	uxth	r2, r3
 800a208:	4bb4      	ldr	r3, [pc, #720]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a20a:	8adb      	ldrh	r3, [r3, #22]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d113      	bne.n	800a238 <SVCCTL_App_Notification+0x6c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a210:	4bb2      	ldr	r3, [pc, #712]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a212:	2200      	movs	r2, #0
 800a214:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a216:	4bb1      	ldr	r3, [pc, #708]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800a21e:	48b0      	ldr	r0, [pc, #704]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a220:	f7ff f97e 	bl	8009520 <DbgTraceGetFileName>
 800a224:	4601      	mov	r1, r0
 800a226:	f240 2315 	movw	r3, #533	; 0x215
 800a22a:	4aae      	ldr	r2, [pc, #696]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a22c:	48ae      	ldr	r0, [pc, #696]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a22e:	f001 fc23 	bl	800ba78 <iprintf>
 800a232:	48ae      	ldr	r0, [pc, #696]	; (800a4ec <SVCCTL_App_Notification+0x320>)
 800a234:	f001 fca6 	bl	800bb84 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800a238:	2001      	movs	r0, #1
 800a23a:	f000 fb47 	bl	800a8cc <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800a23e:	4bac      	ldr	r3, [pc, #688]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a240:	2201      	movs	r2, #1
 800a242:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a244:	4ba5      	ldr	r3, [pc, #660]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a246:	8ada      	ldrh	r2, [r3, #22]
 800a248:	4ba9      	ldr	r3, [pc, #676]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a24a:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800a24c:	48a8      	ldr	r0, [pc, #672]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a24e:	f000 fef5 	bl	800b03c <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a252:	e248      	b.n	800a6e6 <SVCCTL_App_Notification+0x51a>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	3302      	adds	r3, #2
 800a258:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b0c      	cmp	r3, #12
 800a260:	d016      	beq.n	800a290 <SVCCTL_App_Notification+0xc4>
 800a262:	2b0c      	cmp	r3, #12
 800a264:	f300 80d2 	bgt.w	800a40c <SVCCTL_App_Notification+0x240>
 800a268:	2b01      	cmp	r3, #1
 800a26a:	f000 8095 	beq.w	800a398 <SVCCTL_App_Notification+0x1cc>
 800a26e:	2b03      	cmp	r3, #3
 800a270:	f040 80cc 	bne.w	800a40c <SVCCTL_App_Notification+0x240>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800a274:	489a      	ldr	r0, [pc, #616]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a276:	f7ff f953 	bl	8009520 <DbgTraceGetFileName>
 800a27a:	4601      	mov	r1, r0
 800a27c:	f240 2331 	movw	r3, #561	; 0x231
 800a280:	4a98      	ldr	r2, [pc, #608]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a282:	4899      	ldr	r0, [pc, #612]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a284:	f001 fbf8 	bl	800ba78 <iprintf>
 800a288:	489a      	ldr	r0, [pc, #616]	; (800a4f4 <SVCCTL_App_Notification+0x328>)
 800a28a:	f001 fc7b 	bl	800bb84 <puts>
          break;
 800a28e:	e0be      	b.n	800a40e <SVCCTL_App_Notification+0x242>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800a290:	4893      	ldr	r0, [pc, #588]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a292:	f7ff f945 	bl	8009520 <DbgTraceGetFileName>
 800a296:	4601      	mov	r1, r0
 800a298:	f44f 730e 	mov.w	r3, #568	; 0x238
 800a29c:	4a91      	ldr	r2, [pc, #580]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a29e:	4892      	ldr	r0, [pc, #584]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a2a0:	f001 fbea 	bl	800ba78 <iprintf>
 800a2a4:	4894      	ldr	r0, [pc, #592]	; (800a4f8 <SVCCTL_App_Notification+0x32c>)
 800a2a6:	f001 fc6d 	bl	800bb84 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10d      	bne.n	800a2d4 <SVCCTL_App_Notification+0x108>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800a2b8:	4889      	ldr	r0, [pc, #548]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a2ba:	f7ff f931 	bl	8009520 <DbgTraceGetFileName>
 800a2be:	4601      	mov	r1, r0
 800a2c0:	f44f 730f 	mov.w	r3, #572	; 0x23c
 800a2c4:	4a87      	ldr	r2, [pc, #540]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a2c6:	4888      	ldr	r0, [pc, #544]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a2c8:	f001 fbd6 	bl	800ba78 <iprintf>
 800a2cc:	488b      	ldr	r0, [pc, #556]	; (800a4fc <SVCCTL_App_Notification+0x330>)
 800a2ce:	f001 fc59 	bl	800bb84 <puts>
 800a2d2:	e00c      	b.n	800a2ee <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 800a2d4:	4882      	ldr	r0, [pc, #520]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a2d6:	f7ff f923 	bl	8009520 <DbgTraceGetFileName>
 800a2da:	4601      	mov	r1, r0
 800a2dc:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a2e0:	4a80      	ldr	r2, [pc, #512]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a2e2:	4881      	ldr	r0, [pc, #516]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a2e4:	f001 fbc8 	bl	800ba78 <iprintf>
 800a2e8:	4885      	ldr	r0, [pc, #532]	; (800a500 <SVCCTL_App_Notification+0x334>)
 800a2ea:	f001 fc4b 	bl	800bb84 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800a2ee:	4b7b      	ldr	r3, [pc, #492]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a2f0:	8adb      	ldrh	r3, [r3, #22]
 800a2f2:	f107 020e 	add.w	r2, r7, #14
 800a2f6:	f107 010f 	add.w	r1, r7, #15
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd ff98 	bl	8008230 <hci_le_read_phy>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 800a306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d136      	bne.n	800a37c <SVCCTL_App_Notification+0x1b0>
            APP_DBG_MSG("Read_PHY success \n");
 800a30e:	4874      	ldr	r0, [pc, #464]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a310:	f7ff f906 	bl	8009520 <DbgTraceGetFileName>
 800a314:	4601      	mov	r1, r0
 800a316:	f240 2346 	movw	r3, #582	; 0x246
 800a31a:	4a72      	ldr	r2, [pc, #456]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a31c:	4872      	ldr	r0, [pc, #456]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a31e:	f001 fbab 	bl	800ba78 <iprintf>
 800a322:	4878      	ldr	r0, [pc, #480]	; (800a504 <SVCCTL_App_Notification+0x338>)
 800a324:	f001 fc2e 	bl	800bb84 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d114      	bne.n	800a358 <SVCCTL_App_Notification+0x18c>
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	2b02      	cmp	r3, #2
 800a332:	d111      	bne.n	800a358 <SVCCTL_App_Notification+0x18c>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800a334:	486a      	ldr	r0, [pc, #424]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a336:	f7ff f8f3 	bl	8009520 <DbgTraceGetFileName>
 800a33a:	4601      	mov	r1, r0
 800a33c:	f240 234a 	movw	r3, #586	; 0x24a
 800a340:	4a68      	ldr	r2, [pc, #416]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a342:	4869      	ldr	r0, [pc, #420]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a344:	f001 fb98 	bl	800ba78 <iprintf>
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4619      	mov	r1, r3
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
 800a34e:	461a      	mov	r2, r3
 800a350:	486d      	ldr	r0, [pc, #436]	; (800a508 <SVCCTL_App_Notification+0x33c>)
 800a352:	f001 fb91 	bl	800ba78 <iprintf>
          break;
 800a356:	e05a      	b.n	800a40e <SVCCTL_App_Notification+0x242>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800a358:	4861      	ldr	r0, [pc, #388]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a35a:	f7ff f8e1 	bl	8009520 <DbgTraceGetFileName>
 800a35e:	4601      	mov	r1, r0
 800a360:	f240 234e 	movw	r3, #590	; 0x24e
 800a364:	4a5f      	ldr	r2, [pc, #380]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a366:	4860      	ldr	r0, [pc, #384]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a368:	f001 fb86 	bl	800ba78 <iprintf>
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	4619      	mov	r1, r3
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	461a      	mov	r2, r3
 800a374:	4864      	ldr	r0, [pc, #400]	; (800a508 <SVCCTL_App_Notification+0x33c>)
 800a376:	f001 fb7f 	bl	800ba78 <iprintf>
          break;
 800a37a:	e048      	b.n	800a40e <SVCCTL_App_Notification+0x242>
            APP_DBG_MSG("Read conf not succeess \n");
 800a37c:	4858      	ldr	r0, [pc, #352]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a37e:	f7ff f8cf 	bl	8009520 <DbgTraceGetFileName>
 800a382:	4601      	mov	r1, r0
 800a384:	f240 2353 	movw	r3, #595	; 0x253
 800a388:	4a56      	ldr	r2, [pc, #344]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a38a:	4857      	ldr	r0, [pc, #348]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a38c:	f001 fb74 	bl	800ba78 <iprintf>
 800a390:	485e      	ldr	r0, [pc, #376]	; (800a50c <SVCCTL_App_Notification+0x340>)
 800a392:	f001 fbf7 	bl	800bb84 <puts>
          break;
 800a396:	e03a      	b.n	800a40e <SVCCTL_App_Notification+0x242>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	3301      	adds	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800a39e:	4b4f      	ldr	r3, [pc, #316]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f7 fbf9 	bl	8001b9c <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 800a3aa:	484d      	ldr	r0, [pc, #308]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a3ac:	f7ff f8b8 	bl	8009520 <DbgTraceGetFileName>
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	f44f 7319 	mov.w	r3, #612	; 0x264
 800a3b6:	4a4b      	ldr	r2, [pc, #300]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a3b8:	484b      	ldr	r0, [pc, #300]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a3ba:	f001 fb5d 	bl	800ba78 <iprintf>
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4851      	ldr	r0, [pc, #324]	; (800a510 <SVCCTL_App_Notification+0x344>)
 800a3ca:	f001 fb55 	bl	800ba78 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a3ce:	4b43      	ldr	r3, [pc, #268]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d104      	bne.n	800a3e2 <SVCCTL_App_Notification+0x216>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a3d8:	4b40      	ldr	r3, [pc, #256]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3da:	2206      	movs	r2, #6
 800a3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a3e0:	e003      	b.n	800a3ea <SVCCTL_App_Notification+0x21e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a3e2:	4b3e      	ldr	r3, [pc, #248]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	4b3a      	ldr	r3, [pc, #232]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3f4:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800a3f6:	4b3e      	ldr	r3, [pc, #248]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a3fc:	4b37      	ldr	r3, [pc, #220]	; (800a4dc <SVCCTL_App_Notification+0x310>)
 800a3fe:	8ada      	ldrh	r2, [r3, #22]
 800a400:	4b3b      	ldr	r3, [pc, #236]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a402:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800a404:	483a      	ldr	r0, [pc, #232]	; (800a4f0 <SVCCTL_App_Notification+0x324>)
 800a406:	f000 fe19 	bl	800b03c <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a40a:	e000      	b.n	800a40e <SVCCTL_App_Notification+0x242>
          break;
 800a40c:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800a40e:	e16a      	b.n	800a6e6 <SVCCTL_App_Notification+0x51a>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	3302      	adds	r3, #2
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a420:	f000 815c 	beq.w	800a6dc <SVCCTL_App_Notification+0x510>
 800a424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a428:	f300 815c 	bgt.w	800a6e4 <SVCCTL_App_Notification+0x518>
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	f000 8148 	beq.w	800a6c2 <SVCCTL_App_Notification+0x4f6>
 800a432:	2b04      	cmp	r3, #4
 800a434:	f2c0 8156 	blt.w	800a6e4 <SVCCTL_App_Notification+0x518>
 800a438:	f240 420a 	movw	r2, #1034	; 0x40a
 800a43c:	4293      	cmp	r3, r2
 800a43e:	f300 8151 	bgt.w	800a6e4 <SVCCTL_App_Notification+0x518>
 800a442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a446:	f2c0 814d 	blt.w	800a6e4 <SVCCTL_App_Notification+0x518>
 800a44a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a44e:	2b0a      	cmp	r3, #10
 800a450:	f200 8148 	bhi.w	800a6e4 <SVCCTL_App_Notification+0x518>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <SVCCTL_App_Notification+0x290>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	0800a641 	.word	0x0800a641
 800a464:	0800a4a5 	.word	0x0800a4a5
 800a468:	0800a521 	.word	0x0800a521
 800a46c:	0800a53d 	.word	0x0800a53d
 800a470:	0800a559 	.word	0x0800a559
 800a474:	0800a6e5 	.word	0x0800a6e5
 800a478:	0800a6a7 	.word	0x0800a6a7
 800a47c:	0800a599 	.word	0x0800a599
 800a480:	0800a5d1 	.word	0x0800a5d1
 800a484:	0800a5b5 	.word	0x0800a5b5
      APP_DBG_MSG("\r\n\r** ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800a488:	4815      	ldr	r0, [pc, #84]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a48a:	f7ff f849 	bl	8009520 <DbgTraceGetFileName>
 800a48e:	4601      	mov	r1, r0
 800a490:	f240 2393 	movw	r3, #659	; 0x293
 800a494:	4a13      	ldr	r2, [pc, #76]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a496:	4814      	ldr	r0, [pc, #80]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a498:	f001 faee 	bl	800ba78 <iprintf>
 800a49c:	481d      	ldr	r0, [pc, #116]	; (800a514 <SVCCTL_App_Notification+0x348>)
 800a49e:	f001 fb71 	bl	800bb84 <puts>
        break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800a4a2:	e11c      	b.n	800a6de <SVCCTL_App_Notification+0x512>
      APP_DBG_MSG("\r\n\r** ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800a4a4:	480e      	ldr	r0, [pc, #56]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a4a6:	f7ff f83b 	bl	8009520 <DbgTraceGetFileName>
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	f240 2396 	movw	r3, #662	; 0x296
 800a4b0:	4a0c      	ldr	r2, [pc, #48]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a4b2:	480d      	ldr	r0, [pc, #52]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a4b4:	f001 fae0 	bl	800ba78 <iprintf>
 800a4b8:	4817      	ldr	r0, [pc, #92]	; (800a518 <SVCCTL_App_Notification+0x34c>)
 800a4ba:	f001 fb63 	bl	800bb84 <puts>
      APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800a4be:	4808      	ldr	r0, [pc, #32]	; (800a4e0 <SVCCTL_App_Notification+0x314>)
 800a4c0:	f7ff f82e 	bl	8009520 <DbgTraceGetFileName>
 800a4c4:	4601      	mov	r1, r0
 800a4c6:	f240 239a 	movw	r3, #666	; 0x29a
 800a4ca:	4a06      	ldr	r2, [pc, #24]	; (800a4e4 <SVCCTL_App_Notification+0x318>)
 800a4cc:	4806      	ldr	r0, [pc, #24]	; (800a4e8 <SVCCTL_App_Notification+0x31c>)
 800a4ce:	f001 fad3 	bl	800ba78 <iprintf>
 800a4d2:	4812      	ldr	r0, [pc, #72]	; (800a51c <SVCCTL_App_Notification+0x350>)
 800a4d4:	f001 fb56 	bl	800bb84 <puts>
        break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800a4d8:	e101      	b.n	800a6de <SVCCTL_App_Notification+0x512>
 800a4da:	bf00      	nop
 800a4dc:	2000017c 	.word	0x2000017c
 800a4e0:	0800ce9c 	.word	0x0800ce9c
 800a4e4:	0800d7f8 	.word	0x0800d7f8
 800a4e8:	0800ceb8 	.word	0x0800ceb8
 800a4ec:	0800cecc 	.word	0x0800cecc
 800a4f0:	20001718 	.word	0x20001718
 800a4f4:	0800cef4 	.word	0x0800cef4
 800a4f8:	0800cf20 	.word	0x0800cf20
 800a4fc:	0800cf3c 	.word	0x0800cf3c
 800a500:	0800cf60 	.word	0x0800cf60
 800a504:	0800cf88 	.word	0x0800cf88
 800a508:	0800cf9c 	.word	0x0800cf9c
 800a50c:	0800cfb8 	.word	0x0800cfb8
 800a510:	0800cfd0 	.word	0x0800cfd0
 800a514:	0800d014 	.word	0x0800d014
 800a518:	0800d044 	.word	0x0800d044
 800a51c:	0800d06c 	.word	0x0800d06c
      APP_DBG_MSG("\r\n\r** ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE \n");
 800a520:	4873      	ldr	r0, [pc, #460]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a522:	f7fe fffd 	bl	8009520 <DbgTraceGetFileName>
 800a526:	4601      	mov	r1, r0
 800a528:	f240 239d 	movw	r3, #669	; 0x29d
 800a52c:	4a71      	ldr	r2, [pc, #452]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a52e:	4872      	ldr	r0, [pc, #456]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a530:	f001 faa2 	bl	800ba78 <iprintf>
 800a534:	4871      	ldr	r0, [pc, #452]	; (800a6fc <SVCCTL_App_Notification+0x530>)
 800a536:	f001 fb25 	bl	800bb84 <puts>
        break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800a53a:	e0d0      	b.n	800a6de <SVCCTL_App_Notification+0x512>
      APP_DBG_MSG("\r\n\r** ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 800a53c:	486c      	ldr	r0, [pc, #432]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a53e:	f7fe ffef 	bl	8009520 <DbgTraceGetFileName>
 800a542:	4601      	mov	r1, r0
 800a544:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800a548:	4a6a      	ldr	r2, [pc, #424]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a54a:	486b      	ldr	r0, [pc, #428]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a54c:	f001 fa94 	bl	800ba78 <iprintf>
 800a550:	486b      	ldr	r0, [pc, #428]	; (800a700 <SVCCTL_App_Notification+0x534>)
 800a552:	f001 fb17 	bl	800bb84 <puts>
        break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 800a556:	e0c2      	b.n	800a6de <SVCCTL_App_Notification+0x512>
      APP_DBG_MSG("\r\n\r** ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800a558:	4865      	ldr	r0, [pc, #404]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a55a:	f7fe ffe1 	bl	8009520 <DbgTraceGetFileName>
 800a55e:	4601      	mov	r1, r0
 800a560:	f240 23a3 	movw	r3, #675	; 0x2a3
 800a564:	4a63      	ldr	r2, [pc, #396]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a566:	4864      	ldr	r0, [pc, #400]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a568:	f001 fa86 	bl	800ba78 <iprintf>
 800a56c:	4865      	ldr	r0, [pc, #404]	; (800a704 <SVCCTL_App_Notification+0x538>)
 800a56e:	f001 fb09 	bl	800bb84 <puts>
        aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a572:	4b65      	ldr	r3, [pc, #404]	; (800a708 <SVCCTL_App_Notification+0x53c>)
 800a574:	8adb      	ldrh	r3, [r3, #22]
 800a576:	4618      	mov	r0, r3
 800a578:	f7fd f98f 	bl	800789a <aci_gap_allow_rebond>
      APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 800a57c:	485c      	ldr	r0, [pc, #368]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a57e:	f7fe ffcf 	bl	8009520 <DbgTraceGetFileName>
 800a582:	4601      	mov	r1, r0
 800a584:	f240 23a5 	movw	r3, #677	; 0x2a5
 800a588:	4a5a      	ldr	r2, [pc, #360]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a58a:	485b      	ldr	r0, [pc, #364]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a58c:	f001 fa74 	bl	800ba78 <iprintf>
 800a590:	485e      	ldr	r0, [pc, #376]	; (800a70c <SVCCTL_App_Notification+0x540>)
 800a592:	f001 faf7 	bl	800bb84 <puts>
        break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800a596:	e0a2      	b.n	800a6de <SVCCTL_App_Notification+0x512>
       APP_DBG_MSG("\r\n\r** ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800a598:	4855      	ldr	r0, [pc, #340]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a59a:	f7fe ffc1 	bl	8009520 <DbgTraceGetFileName>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800a5a4:	4a53      	ldr	r2, [pc, #332]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a5a6:	4854      	ldr	r0, [pc, #336]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a5a8:	f001 fa66 	bl	800ba78 <iprintf>
 800a5ac:	4858      	ldr	r0, [pc, #352]	; (800a710 <SVCCTL_App_Notification+0x544>)
 800a5ae:	f001 fae9 	bl	800bb84 <puts>
        break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800a5b2:	e094      	b.n	800a6de <SVCCTL_App_Notification+0x512>
       APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800a5b4:	484e      	ldr	r0, [pc, #312]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a5b6:	f7fe ffb3 	bl	8009520 <DbgTraceGetFileName>
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	f240 23ab 	movw	r3, #683	; 0x2ab
 800a5c0:	4a4c      	ldr	r2, [pc, #304]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a5c2:	484d      	ldr	r0, [pc, #308]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a5c4:	f001 fa58 	bl	800ba78 <iprintf>
 800a5c8:	4852      	ldr	r0, [pc, #328]	; (800a714 <SVCCTL_App_Notification+0x548>)
 800a5ca:	f001 fadb 	bl	800bb84 <puts>
        break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */
 800a5ce:	e086      	b.n	800a6de <SVCCTL_App_Notification+0x512>
        APP_DBG_MSG("numeric_value = %ld\n",
 800a5d0:	4847      	ldr	r0, [pc, #284]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a5d2:	f7fe ffa5 	bl	8009520 <DbgTraceGetFileName>
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	f240 23ae 	movw	r3, #686	; 0x2ae
 800a5dc:	4a45      	ldr	r2, [pc, #276]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a5de:	4846      	ldr	r0, [pc, #280]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a5e0:	f001 fa4a 	bl	800ba78 <iprintf>
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	484a      	ldr	r0, [pc, #296]	; (800a718 <SVCCTL_App_Notification+0x54c>)
 800a5f0:	f001 fa42 	bl	800ba78 <iprintf>
        APP_DBG_MSG("Hex_value = %lx\n",
 800a5f4:	483e      	ldr	r0, [pc, #248]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a5f6:	f7fe ff93 	bl	8009520 <DbgTraceGetFileName>
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 800a600:	4a3c      	ldr	r2, [pc, #240]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a602:	483d      	ldr	r0, [pc, #244]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a604:	f001 fa38 	bl	800ba78 <iprintf>
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	3302      	adds	r3, #2
 800a60c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a610:	4619      	mov	r1, r3
 800a612:	4842      	ldr	r0, [pc, #264]	; (800a71c <SVCCTL_App_Notification+0x550>)
 800a614:	f001 fa30 	bl	800ba78 <iprintf>
        aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800a618:	4b3b      	ldr	r3, [pc, #236]	; (800a708 <SVCCTL_App_Notification+0x53c>)
 800a61a:	8adb      	ldrh	r3, [r3, #22]
 800a61c:	2101      	movs	r1, #1
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd f98f 	bl	8007942 <aci_gap_numeric_comparison_value_confirm_yesno>
        APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800a624:	4832      	ldr	r0, [pc, #200]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a626:	f7fe ff7b 	bl	8009520 <DbgTraceGetFileName>
 800a62a:	4601      	mov	r1, r0
 800a62c:	f240 23b3 	movw	r3, #691	; 0x2b3
 800a630:	4a30      	ldr	r2, [pc, #192]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a632:	4831      	ldr	r0, [pc, #196]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a634:	f001 fa20 	bl	800ba78 <iprintf>
 800a638:	4839      	ldr	r0, [pc, #228]	; (800a720 <SVCCTL_App_Notification+0x554>)
 800a63a:	f001 faa3 	bl	800bb84 <puts>
    break;
 800a63e:	e04e      	b.n	800a6de <SVCCTL_App_Notification+0x512>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	3302      	adds	r3, #2
 800a644:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 800a646:	482a      	ldr	r0, [pc, #168]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a648:	f7fe ff6a 	bl	8009520 <DbgTraceGetFileName>
 800a64c:	4601      	mov	r1, r0
 800a64e:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 800a652:	4a28      	ldr	r2, [pc, #160]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a654:	4828      	ldr	r0, [pc, #160]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a656:	f001 fa0f 	bl	800ba78 <iprintf>
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	789b      	ldrb	r3, [r3, #2]
 800a65e:	4619      	mov	r1, r3
 800a660:	4830      	ldr	r0, [pc, #192]	; (800a724 <SVCCTL_App_Notification+0x558>)
 800a662:	f001 fa09 	bl	800ba78 <iprintf>
          if (pairing_complete->Status == 0)
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	789b      	ldrb	r3, [r3, #2]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10d      	bne.n	800a68a <SVCCTL_App_Notification+0x4be>
            APP_DBG_MSG("\r\n\r** Pairing OK \n");
 800a66e:	4820      	ldr	r0, [pc, #128]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a670:	f7fe ff56 	bl	8009520 <DbgTraceGetFileName>
 800a674:	4601      	mov	r1, r0
 800a676:	f240 23bb 	movw	r3, #699	; 0x2bb
 800a67a:	4a1e      	ldr	r2, [pc, #120]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a67c:	481e      	ldr	r0, [pc, #120]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a67e:	f001 f9fb 	bl	800ba78 <iprintf>
 800a682:	4829      	ldr	r0, [pc, #164]	; (800a728 <SVCCTL_App_Notification+0x55c>)
 800a684:	f001 fa7e 	bl	800bb84 <puts>
         break;
 800a688:	e029      	b.n	800a6de <SVCCTL_App_Notification+0x512>
            APP_DBG_MSG("\r\n\r** Pairing KO \n");
 800a68a:	4819      	ldr	r0, [pc, #100]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a68c:	f7fe ff48 	bl	8009520 <DbgTraceGetFileName>
 800a690:	4601      	mov	r1, r0
 800a692:	f240 23bf 	movw	r3, #703	; 0x2bf
 800a696:	4a17      	ldr	r2, [pc, #92]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a698:	4817      	ldr	r0, [pc, #92]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a69a:	f001 f9ed 	bl	800ba78 <iprintf>
 800a69e:	4823      	ldr	r0, [pc, #140]	; (800a72c <SVCCTL_App_Notification+0x560>)
 800a6a0:	f001 fa70 	bl	800bb84 <puts>
         break;
 800a6a4:	e01b      	b.n	800a6de <SVCCTL_App_Notification+0x512>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 800a6a6:	4812      	ldr	r0, [pc, #72]	; (800a6f0 <SVCCTL_App_Notification+0x524>)
 800a6a8:	f7fe ff3a 	bl	8009520 <DbgTraceGetFileName>
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 800a6b2:	4a10      	ldr	r2, [pc, #64]	; (800a6f4 <SVCCTL_App_Notification+0x528>)
 800a6b4:	4810      	ldr	r0, [pc, #64]	; (800a6f8 <SVCCTL_App_Notification+0x52c>)
 800a6b6:	f001 f9df 	bl	800ba78 <iprintf>
 800a6ba:	481d      	ldr	r0, [pc, #116]	; (800a730 <SVCCTL_App_Notification+0x564>)
 800a6bc:	f001 fa62 	bl	800bb84 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800a6c0:	e00d      	b.n	800a6de <SVCCTL_App_Notification+0x512>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	481b      	ldr	r0, [pc, #108]	; (800a734 <SVCCTL_App_Notification+0x568>)
 800a6c8:	f7f9 f8fe 	bl	80038c8 <HAL_GPIO_WritePin>
            HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <SVCCTL_App_Notification+0x53c>)
 800a6ce:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a6d2:	210a      	movs	r1, #10
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7f7 faed 	bl	8001cb4 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800a6da:	e000      	b.n	800a6de <SVCCTL_App_Notification+0x512>
      break;
 800a6dc:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a6de:	e001      	b.n	800a6e4 <SVCCTL_App_Notification+0x518>
      break;
 800a6e0:	bf00      	nop
 800a6e2:	e000      	b.n	800a6e6 <SVCCTL_App_Notification+0x51a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a6e4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a6e6:	2301      	movs	r3, #1
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3730      	adds	r7, #48	; 0x30
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	0800ce9c 	.word	0x0800ce9c
 800a6f4:	0800d7f8 	.word	0x0800d7f8
 800a6f8:	0800ceb8 	.word	0x0800ceb8
 800a6fc:	0800d08c 	.word	0x0800d08c
 800a700:	0800d0b8 	.word	0x0800d0b8
 800a704:	0800d0ec 	.word	0x0800d0ec
 800a708:	2000017c 	.word	0x2000017c
 800a70c:	0800d110 	.word	0x0800d110
 800a710:	0800d12c 	.word	0x0800d12c
 800a714:	0800d158 	.word	0x0800d158
 800a718:	0800d188 	.word	0x0800d188
 800a71c:	0800d1a0 	.word	0x0800d1a0
 800a720:	0800d1b4 	.word	0x0800d1b4
 800a724:	0800d1f0 	.word	0x0800d1f0
 800a728:	0800d250 	.word	0x0800d250
 800a72c:	0800d264 	.word	0x0800d264
 800a730:	0800d278 	.word	0x0800d278
 800a734:	48000400 	.word	0x48000400

0800a738 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800a73e:	4b06      	ldr	r3, [pc, #24]	; (800a758 <Ble_Tl_Init+0x20>)
 800a740:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800a742:	4b06      	ldr	r3, [pc, #24]	; (800a75c <Ble_Tl_Init+0x24>)
 800a744:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800a746:	463b      	mov	r3, r7
 800a748:	4619      	mov	r1, r3
 800a74a:	4805      	ldr	r0, [pc, #20]	; (800a760 <Ble_Tl_Init+0x28>)
 800a74c:	f7fe f9d6 	bl	8008afc <hci_init>

  return;
 800a750:	bf00      	nop
}
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	200300d4 	.word	0x200300d4
 800a75c:	0800ac8d 	.word	0x0800ac8d
 800a760:	0800ac55 	.word	0x0800ac55

0800a764 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800a764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a766:	b08d      	sub	sp, #52	; 0x34
 800a768:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800a76a:	2300      	movs	r3, #0
 800a76c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800a76e:	f7fd fd3b 	bl	80081e8 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800a772:	f000 f99d 	bl	800aab0 <BleGetBdAddress>
 800a776:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	2106      	movs	r1, #6
 800a77c:	2000      	movs	r0, #0
 800a77e:	f7fd fbf3 	bl	8007f68 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	795a      	ldrb	r2, [r3, #5]
 800a786:	4b4b      	ldr	r3, [pc, #300]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a788:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	791a      	ldrb	r2, [r3, #4]
 800a78e:	4b49      	ldr	r3, [pc, #292]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a790:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	78da      	ldrb	r2, [r3, #3]
 800a796:	4b47      	ldr	r3, [pc, #284]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a798:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	789a      	ldrb	r2, [r3, #2]
 800a79e:	4b45      	ldr	r3, [pc, #276]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a7a0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	785a      	ldrb	r2, [r3, #1]
 800a7a6:	4b43      	ldr	r3, [pc, #268]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a7a8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	781a      	ldrb	r2, [r3, #0]
 800a7ae:	4b41      	ldr	r3, [pc, #260]	; (800a8b4 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800a7b0:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800a7b2:	4a41      	ldr	r2, [pc, #260]	; (800a8b8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800a7b4:	2110      	movs	r1, #16
 800a7b6:	2018      	movs	r0, #24
 800a7b8:	f7fd fbd6 	bl	8007f68 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800a7bc:	4a3f      	ldr	r2, [pc, #252]	; (800a8bc <Ble_Hci_Gap_Gatt_Init+0x158>)
 800a7be:	2110      	movs	r1, #16
 800a7c0:	2008      	movs	r0, #8
 800a7c2:	f7fd fbd1 	bl	8007f68 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a7c6:	2118      	movs	r1, #24
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f7fd fc52 	bl	8008072 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800a7ce:	f7fd f91f 	bl	8007a10 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800a7d6:	7cfb      	ldrb	r3, [r7, #19]
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800a7de:	7cfb      	ldrb	r3, [r7, #19]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01d      	beq.n	800a820 <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = "P2PSRV1";
 800a7e4:	4b36      	ldr	r3, [pc, #216]	; (800a8c0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800a7e6:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 800a7e8:	f107 020a 	add.w	r2, r7, #10
 800a7ec:	7cf8      	ldrb	r0, [r7, #19]
 800a7ee:	1dbb      	adds	r3, r7, #6
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	2207      	movs	r2, #7
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	f7fc ff09 	bl	8007614 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800a802:	897c      	ldrh	r4, [r7, #10]
 800a804:	893d      	ldrh	r5, [r7, #8]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7f5 fcba 	bl	8000180 <strlen>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4613      	mov	r3, r2
 800a816:	2200      	movs	r2, #0
 800a818:	4629      	mov	r1, r5
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7fd fafb 	bl	8007e16 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800a820:	8978      	ldrh	r0, [r7, #10]
 800a822:	88f9      	ldrh	r1, [r7, #6]
 800a824:	1d3b      	adds	r3, r7, #4
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2302      	movs	r3, #2
 800a82a:	2200      	movs	r2, #0
 800a82c:	f7fd faf3 	bl	8007e16 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800a830:	2202      	movs	r2, #2
 800a832:	2102      	movs	r1, #2
 800a834:	2000      	movs	r0, #0
 800a836:	f7fd fd79 	bl	800832c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a83a:	4b22      	ldr	r3, [pc, #136]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a840:	4b20      	ldr	r3, [pc, #128]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	4618      	mov	r0, r3
 800a846:	f7fc fdcd 	bl	80073e4 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a84a:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a850:	4b1c      	ldr	r3, [pc, #112]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a852:	2208      	movs	r2, #8
 800a854:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a856:	4b1b      	ldr	r3, [pc, #108]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a858:	2210      	movs	r2, #16
 800a85a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a85c:	4b19      	ldr	r3, [pc, #100]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a85e:	2200      	movs	r2, #0
 800a860:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a862:	4b18      	ldr	r3, [pc, #96]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a864:	4a18      	ldr	r2, [pc, #96]	; (800a8c8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800a866:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a868:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a86e:	4b15      	ldr	r3, [pc, #84]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a870:	789c      	ldrb	r4, [r3, #2]
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a874:	785d      	ldrb	r5, [r3, #1]
 800a876:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a878:	791b      	ldrb	r3, [r3, #4]
 800a87a:	4a12      	ldr	r2, [pc, #72]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a87c:	7952      	ldrb	r2, [r2, #5]
 800a87e:	4911      	ldr	r1, [pc, #68]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a880:	78c9      	ldrb	r1, [r1, #3]
 800a882:	4810      	ldr	r0, [pc, #64]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a884:	6880      	ldr	r0, [r0, #8]
 800a886:	2600      	movs	r6, #0
 800a888:	9604      	str	r6, [sp, #16]
 800a88a:	9003      	str	r0, [sp, #12]
 800a88c:	9102      	str	r1, [sp, #8]
 800a88e:	9201      	str	r2, [sp, #4]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	2201      	movs	r2, #1
 800a896:	4629      	mov	r1, r5
 800a898:	4620      	mov	r0, r4
 800a89a:	f7fc fdf7 	bl	800748c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a8a0:	789b      	ldrb	r3, [r3, #2]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 800a8a6:	f7fc ffd4 	bl	8007852 <aci_gap_configure_whitelist>
   }
}
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20000010 	.word	0x20000010
 800a8b8:	0800d7d0 	.word	0x0800d7d0
 800a8bc:	0800d7e0 	.word	0x0800d7e0
 800a8c0:	0800d2a0 	.word	0x0800d2a0
 800a8c4:	2000017c 	.word	0x2000017c
 800a8c8:	0001b207 	.word	0x0001b207

0800a8cc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af08      	add	r7, sp, #32
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a8d6:	2392      	movs	r3, #146	; 0x92
 800a8d8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d106      	bne.n	800a8ee <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800a8e0:	4b62      	ldr	r3, [pc, #392]	; (800aa6c <Adv_Request+0x1a0>)
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800a8e6:	4b62      	ldr	r3, [pc, #392]	; (800aa70 <Adv_Request+0x1a4>)
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	81bb      	strh	r3, [r7, #12]
 800a8ec:	e005      	b.n	800a8fa <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800a8ee:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800a8f2:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800a8f4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a8f8:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800a8fa:	4b5e      	ldr	r3, [pc, #376]	; (800aa74 <Adv_Request+0x1a8>)
 800a8fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a900:	4618      	mov	r0, r3
 800a902:	f7f7 f94b 	bl	8001b9c <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800a906:	485c      	ldr	r0, [pc, #368]	; (800aa78 <Adv_Request+0x1ac>)
 800a908:	f7fe fe0a 	bl	8009520 <DbgTraceGetFileName>
 800a90c:	4601      	mov	r1, r0
 800a90e:	f240 33de 	movw	r3, #990	; 0x3de
 800a912:	4a5a      	ldr	r2, [pc, #360]	; (800aa7c <Adv_Request+0x1b0>)
 800a914:	485a      	ldr	r0, [pc, #360]	; (800aa80 <Adv_Request+0x1b4>)
 800a916:	f001 f8af 	bl	800ba78 <iprintf>
 800a91a:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <Adv_Request+0x1a8>)
 800a91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a920:	4619      	mov	r1, r3
 800a922:	4858      	ldr	r0, [pc, #352]	; (800aa84 <Adv_Request+0x1b8>)
 800a924:	f001 f8a8 	bl	800ba78 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d12d      	bne.n	800a98a <Adv_Request+0xbe>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800a92e:	4b51      	ldr	r3, [pc, #324]	; (800aa74 <Adv_Request+0x1a8>)
 800a930:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a934:	2b01      	cmp	r3, #1
 800a936:	d004      	beq.n	800a942 <Adv_Request+0x76>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800a938:	4b4e      	ldr	r3, [pc, #312]	; (800aa74 <Adv_Request+0x1a8>)
 800a93a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d123      	bne.n	800a98a <Adv_Request+0xbe>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800a942:	f7fc fc31 	bl	80071a8 <aci_gap_set_non_discoverable>
 800a946:	4603      	mov	r3, r0
 800a948:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10d      	bne.n	800a96c <Adv_Request+0xa0>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 800a950:	4849      	ldr	r0, [pc, #292]	; (800aa78 <Adv_Request+0x1ac>)
 800a952:	f7fe fde5 	bl	8009520 <DbgTraceGetFileName>
 800a956:	4601      	mov	r1, r0
 800a958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a95c:	4a47      	ldr	r2, [pc, #284]	; (800aa7c <Adv_Request+0x1b0>)
 800a95e:	4848      	ldr	r0, [pc, #288]	; (800aa80 <Adv_Request+0x1b4>)
 800a960:	f001 f88a 	bl	800ba78 <iprintf>
 800a964:	4848      	ldr	r0, [pc, #288]	; (800aa88 <Adv_Request+0x1bc>)
 800a966:	f001 f90d 	bl	800bb84 <puts>
 800a96a:	e00e      	b.n	800a98a <Adv_Request+0xbe>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800a96c:	4842      	ldr	r0, [pc, #264]	; (800aa78 <Adv_Request+0x1ac>)
 800a96e:	f7fe fdd7 	bl	8009520 <DbgTraceGetFileName>
 800a972:	4601      	mov	r1, r0
 800a974:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
 800a978:	4a40      	ldr	r2, [pc, #256]	; (800aa7c <Adv_Request+0x1b0>)
 800a97a:	4841      	ldr	r0, [pc, #260]	; (800aa80 <Adv_Request+0x1b4>)
 800a97c:	f001 f87c 	bl	800ba78 <iprintf>
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	4619      	mov	r1, r3
 800a984:	4841      	ldr	r0, [pc, #260]	; (800aa8c <Adv_Request+0x1c0>)
 800a986:	f001 f877 	bl	800ba78 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800a98a:	4a3a      	ldr	r2, [pc, #232]	; (800aa74 <Adv_Request+0x1a8>)
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800a992:	4b38      	ldr	r3, [pc, #224]	; (800aa74 <Adv_Request+0x1a8>)
 800a994:	7e1b      	ldrb	r3, [r3, #24]
 800a996:	89ba      	ldrh	r2, [r7, #12]
 800a998:	89f9      	ldrh	r1, [r7, #14]
 800a99a:	2000      	movs	r0, #0
 800a99c:	9006      	str	r0, [sp, #24]
 800a99e:	2000      	movs	r0, #0
 800a9a0:	9005      	str	r0, [sp, #20]
 800a9a2:	483b      	ldr	r0, [pc, #236]	; (800aa90 <Adv_Request+0x1c4>)
 800a9a4:	9004      	str	r0, [sp, #16]
 800a9a6:	9303      	str	r3, [sp, #12]
 800a9a8:	4b3a      	ldr	r3, [pc, #232]	; (800aa94 <Adv_Request+0x1c8>)
 800a9aa:	9302      	str	r3, [sp, #8]
 800a9ac:	2308      	movs	r3, #8
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f7fc fc1a 	bl	80071f0 <aci_gap_set_discoverable>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800a9c0:	4935      	ldr	r1, [pc, #212]	; (800aa98 <Adv_Request+0x1cc>)
 800a9c2:	200e      	movs	r0, #14
 800a9c4:	f7fc fed3 	bl	800776e <aci_gap_update_adv_data>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d125      	bne.n	800aa1e <Adv_Request+0x152>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d114      	bne.n	800aa02 <Adv_Request+0x136>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800a9d8:	4827      	ldr	r0, [pc, #156]	; (800aa78 <Adv_Request+0x1ac>)
 800a9da:	f7fe fda1 	bl	8009520 <DbgTraceGetFileName>
 800a9de:	4601      	mov	r1, r0
 800a9e0:	f240 4305 	movw	r3, #1029	; 0x405
 800a9e4:	4a25      	ldr	r2, [pc, #148]	; (800aa7c <Adv_Request+0x1b0>)
 800a9e6:	4826      	ldr	r0, [pc, #152]	; (800aa80 <Adv_Request+0x1b4>)
 800a9e8:	f001 f846 	bl	800ba78 <iprintf>
 800a9ec:	482b      	ldr	r0, [pc, #172]	; (800aa9c <Adv_Request+0x1d0>)
 800a9ee:	f001 f8c9 	bl	800bb84 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800a9f2:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <Adv_Request+0x1a8>)
 800a9f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9f8:	4929      	ldr	r1, [pc, #164]	; (800aaa0 <Adv_Request+0x1d4>)
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f7 f95a 	bl	8001cb4 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800aa00:	e030      	b.n	800aa64 <Adv_Request+0x198>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800aa02:	481d      	ldr	r0, [pc, #116]	; (800aa78 <Adv_Request+0x1ac>)
 800aa04:	f7fe fd8c 	bl	8009520 <DbgTraceGetFileName>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	f240 430b 	movw	r3, #1035	; 0x40b
 800aa0e:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <Adv_Request+0x1b0>)
 800aa10:	481b      	ldr	r0, [pc, #108]	; (800aa80 <Adv_Request+0x1b4>)
 800aa12:	f001 f831 	bl	800ba78 <iprintf>
 800aa16:	4823      	ldr	r0, [pc, #140]	; (800aaa4 <Adv_Request+0x1d8>)
 800aa18:	f001 f8b4 	bl	800bb84 <puts>
  return;
 800aa1c:	e022      	b.n	800aa64 <Adv_Request+0x198>
      if (New_Status == APP_BLE_FAST_ADV)
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d10f      	bne.n	800aa44 <Adv_Request+0x178>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800aa24:	4814      	ldr	r0, [pc, #80]	; (800aa78 <Adv_Request+0x1ac>)
 800aa26:	f7fe fd7b 	bl	8009520 <DbgTraceGetFileName>
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	f240 4312 	movw	r3, #1042	; 0x412
 800aa30:	4a12      	ldr	r2, [pc, #72]	; (800aa7c <Adv_Request+0x1b0>)
 800aa32:	4813      	ldr	r0, [pc, #76]	; (800aa80 <Adv_Request+0x1b4>)
 800aa34:	f001 f820 	bl	800ba78 <iprintf>
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	481a      	ldr	r0, [pc, #104]	; (800aaa8 <Adv_Request+0x1dc>)
 800aa3e:	f001 f81b 	bl	800ba78 <iprintf>
  return;
 800aa42:	e00f      	b.n	800aa64 <Adv_Request+0x198>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800aa44:	480c      	ldr	r0, [pc, #48]	; (800aa78 <Adv_Request+0x1ac>)
 800aa46:	f7fe fd6b 	bl	8009520 <DbgTraceGetFileName>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	f240 4316 	movw	r3, #1046	; 0x416
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <Adv_Request+0x1b0>)
 800aa52:	480b      	ldr	r0, [pc, #44]	; (800aa80 <Adv_Request+0x1b4>)
 800aa54:	f001 f810 	bl	800ba78 <iprintf>
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4813      	ldr	r0, [pc, #76]	; (800aaac <Adv_Request+0x1e0>)
 800aa5e:	f001 f80b 	bl	800ba78 <iprintf>
  return;
 800aa62:	bf00      	nop
}
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000200 	.word	0x20000200
 800aa70:	20000202 	.word	0x20000202
 800aa74:	2000017c 	.word	0x2000017c
 800aa78:	0800ce9c 	.word	0x0800ce9c
 800aa7c:	0800d810 	.word	0x0800d810
 800aa80:	0800ceb8 	.word	0x0800ceb8
 800aa84:	0800d2a8 	.word	0x0800d2a8
 800aa88:	0800d2c4 	.word	0x0800d2c4
 800aa8c:	0800d2e8 	.word	0x0800d2e8
 800aa90:	20000195 	.word	0x20000195
 800aa94:	0800d7f0 	.word	0x0800d7f0
 800aa98:	20000010 	.word	0x20000010
 800aa9c:	0800d310 	.word	0x0800d310
 800aaa0:	0001e046 	.word	0x0001e046
 800aaa4:	0800d338 	.word	0x0800d338
 800aaa8:	0800d364 	.word	0x0800d364
 800aaac:	0800d394 	.word	0x0800d394

0800aab0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800aab6:	f7ff faf9 	bl	800a0ac <LL_FLASH_GetUDN>
 800aaba:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aac2:	d023      	beq.n	800ab0c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800aac4:	f7ff fb0a 	bl	800a0dc <LL_FLASH_GetSTCompanyID>
 800aac8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800aaca:	f7ff fafb 	bl	800a0c4 <LL_FLASH_GetDeviceID>
 800aace:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <BleGetBdAddress+0x80>)
 800aad6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <BleGetBdAddress+0x80>)
 800aae0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <BleGetBdAddress+0x80>)
 800aae8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <BleGetBdAddress+0x80>)
 800aaf0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	0a1b      	lsrs	r3, r3, #8
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <BleGetBdAddress+0x80>)
 800aafa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <BleGetBdAddress+0x80>)
 800ab04:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <BleGetBdAddress+0x80>)
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	e00b      	b.n	800ab24 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f7fe fde5 	bl	80096dc <OTP_Read>
 800ab12:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e001      	b.n	800ab24 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <BleGetBdAddress+0x84>)
 800ab22:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800ab24:	697b      	ldr	r3, [r7, #20]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	20001710 	.word	0x20001710
 800ab34:	0800d7c8 	.word	0x0800d7c8

0800ab38 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2101      	movs	r1, #1
 800ab42:	4821      	ldr	r0, [pc, #132]	; (800abc8 <Adv_Cancel+0x90>)
 800ab44:	f7f8 fec0 	bl	80038c8 <HAL_GPIO_WritePin>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ab48:	4b20      	ldr	r3, [pc, #128]	; (800abcc <Adv_Cancel+0x94>)
 800ab4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab4e:	2b05      	cmp	r3, #5
 800ab50:	d035      	beq.n	800abbe <Adv_Cancel+0x86>

  {

    tBleStatus result = 0x00;
 800ab52:	2300      	movs	r3, #0
 800ab54:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800ab56:	f7fc fb27 	bl	80071a8 <aci_gap_set_non_discoverable>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <Adv_Cancel+0x94>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d11a      	bne.n	800aba2 <Adv_Cancel+0x6a>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800ab6c:	4818      	ldr	r0, [pc, #96]	; (800abd0 <Adv_Cancel+0x98>)
 800ab6e:	f7fe fcd7 	bl	8009520 <DbgTraceGetFileName>
 800ab72:	4601      	mov	r1, r0
 800ab74:	f240 4367 	movw	r3, #1127	; 0x467
 800ab78:	4a16      	ldr	r2, [pc, #88]	; (800abd4 <Adv_Cancel+0x9c>)
 800ab7a:	4817      	ldr	r0, [pc, #92]	; (800abd8 <Adv_Cancel+0xa0>)
 800ab7c:	f000 ff7c 	bl	800ba78 <iprintf>
 800ab80:	4816      	ldr	r0, [pc, #88]	; (800abdc <Adv_Cancel+0xa4>)
 800ab82:	f000 ff79 	bl	800ba78 <iprintf>
 800ab86:	4812      	ldr	r0, [pc, #72]	; (800abd0 <Adv_Cancel+0x98>)
 800ab88:	f7fe fcca 	bl	8009520 <DbgTraceGetFileName>
 800ab8c:	4601      	mov	r1, r0
 800ab8e:	f240 4367 	movw	r3, #1127	; 0x467
 800ab92:	4a10      	ldr	r2, [pc, #64]	; (800abd4 <Adv_Cancel+0x9c>)
 800ab94:	4810      	ldr	r0, [pc, #64]	; (800abd8 <Adv_Cancel+0xa0>)
 800ab96:	f000 ff6f 	bl	800ba78 <iprintf>
 800ab9a:	4811      	ldr	r0, [pc, #68]	; (800abe0 <Adv_Cancel+0xa8>)
 800ab9c:	f000 ff6c 	bl	800ba78 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800aba0:	e00d      	b.n	800abbe <Adv_Cancel+0x86>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800aba2:	480b      	ldr	r0, [pc, #44]	; (800abd0 <Adv_Cancel+0x98>)
 800aba4:	f7fe fcbc 	bl	8009520 <DbgTraceGetFileName>
 800aba8:	4601      	mov	r1, r0
 800abaa:	f240 436b 	movw	r3, #1131	; 0x46b
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <Adv_Cancel+0x9c>)
 800abb0:	4809      	ldr	r0, [pc, #36]	; (800abd8 <Adv_Cancel+0xa0>)
 800abb2:	f000 ff61 	bl	800ba78 <iprintf>
 800abb6:	480b      	ldr	r0, [pc, #44]	; (800abe4 <Adv_Cancel+0xac>)
 800abb8:	f000 ff5e 	bl	800ba78 <iprintf>
  return;
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
}
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	48000400 	.word	0x48000400
 800abcc:	2000017c 	.word	0x2000017c
 800abd0:	0800ce9c 	.word	0x0800ce9c
 800abd4:	0800d81c 	.word	0x0800d81c
 800abd8:	0800ceb8 	.word	0x0800ceb8
 800abdc:	0800d3c8 	.word	0x0800d3c8
 800abe0:	0800d3d0 	.word	0x0800d3d0
 800abe4:	0800d3ec 	.word	0x0800d3ec

0800abe8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800abec:	2100      	movs	r1, #0
 800abee:	2001      	movs	r0, #1
 800abf0:	f000 fde0 	bl	800b7b4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800abf4:	bf00      	nop
}
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800abf8:	b580      	push	{r7, lr}
 800abfa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800abfc:	2200      	movs	r2, #0
 800abfe:	2101      	movs	r1, #1
 800ac00:	4802      	ldr	r0, [pc, #8]	; (800ac0c <Switch_OFF_GPIO+0x14>)
 800ac02:	f7f8 fe61 	bl	80038c8 <HAL_GPIO_WritePin>
/* USER CODE END Switch_OFF_GPIO */
}
 800ac06:	bf00      	nop
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	48000400 	.word	0x48000400

0800ac10 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2002      	movs	r0, #2
 800ac1c:	f000 fdca 	bl	800b7b4 <UTIL_SEQ_SetTask>
  return;
 800ac20:	bf00      	nop
}
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ac30:	2001      	movs	r0, #1
 800ac32:	f000 fe2b 	bl	800b88c <UTIL_SEQ_SetEvt>
  return;
 800ac36:	bf00      	nop
}
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ac46:	2001      	movs	r0, #1
 800ac48:	f000 fe40 	bl	800b8cc <UTIL_SEQ_WaitEvt>
  return;
 800ac4c:	bf00      	nop
}
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	3308      	adds	r3, #8
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fd fe02 	bl	8008870 <SVCCTL_UserEvtRx>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ac70:	7afb      	ldrb	r3, [r7, #11]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ac7c:	e003      	b.n	800ac86 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	701a      	strb	r2, [r3, #0]
  return;
 800ac84:	bf00      	nop
}
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <BLE_StatusNot+0x16>
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d006      	beq.n	800acae <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800aca0:	e00b      	b.n	800acba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800aca2:	2303      	movs	r3, #3
 800aca4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 fdb0 	bl	800b80c <UTIL_SEQ_PauseTask>
      break;
 800acac:	e005      	b.n	800acba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800acae:	2303      	movs	r3, #3
 800acb0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fdca 	bl	800b84c <UTIL_SEQ_ResumeTask>
      break;
 800acb8:	bf00      	nop
  }
  return;
 800acba:	bf00      	nop
}
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d03f      	beq.n	800ad54 <P2PS_STM_App_Notification+0x90>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	f300 8190 	bgt.w	800affa <P2PS_STM_App_Notification+0x336>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <P2PS_STM_App_Notification+0x20>
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d01c      	beq.n	800ad1c <P2PS_STM_App_Notification+0x58>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800ace2:	e18a      	b.n	800affa <P2PS_STM_App_Notification+0x336>
        P2P_Server_App_Context.Notification_Status = 1;
 800ace4:	4bc8      	ldr	r3, [pc, #800]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 800acea:	48c8      	ldr	r0, [pc, #800]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800acec:	f7fe fc18 	bl	8009520 <DbgTraceGetFileName>
 800acf0:	4601      	mov	r1, r0
 800acf2:	2364      	movs	r3, #100	; 0x64
 800acf4:	4ac6      	ldr	r2, [pc, #792]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800acf6:	48c7      	ldr	r0, [pc, #796]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800acf8:	f000 febe 	bl	800ba78 <iprintf>
 800acfc:	48c6      	ldr	r0, [pc, #792]	; (800b018 <P2PS_STM_App_Notification+0x354>)
 800acfe:	f000 ff41 	bl	800bb84 <puts>
        APP_DBG_MSG(" \n\r");
 800ad02:	48c2      	ldr	r0, [pc, #776]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800ad04:	f7fe fc0c 	bl	8009520 <DbgTraceGetFileName>
 800ad08:	4601      	mov	r1, r0
 800ad0a:	2365      	movs	r3, #101	; 0x65
 800ad0c:	4ac0      	ldr	r2, [pc, #768]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800ad0e:	48c1      	ldr	r0, [pc, #772]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800ad10:	f000 feb2 	bl	800ba78 <iprintf>
 800ad14:	48c1      	ldr	r0, [pc, #772]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800ad16:	f000 feaf 	bl	800ba78 <iprintf>
      break;
 800ad1a:	e171      	b.n	800b000 <P2PS_STM_App_Notification+0x33c>
        P2P_Server_App_Context.Notification_Status = 0;
 800ad1c:	4bba      	ldr	r3, [pc, #744]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800ad22:	48ba      	ldr	r0, [pc, #744]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800ad24:	f7fe fbfc 	bl	8009520 <DbgTraceGetFileName>
 800ad28:	4601      	mov	r1, r0
 800ad2a:	236e      	movs	r3, #110	; 0x6e
 800ad2c:	4ab8      	ldr	r2, [pc, #736]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800ad2e:	48b9      	ldr	r0, [pc, #740]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800ad30:	f000 fea2 	bl	800ba78 <iprintf>
 800ad34:	48ba      	ldr	r0, [pc, #744]	; (800b020 <P2PS_STM_App_Notification+0x35c>)
 800ad36:	f000 ff25 	bl	800bb84 <puts>
        APP_DBG_MSG(" \n\r");
 800ad3a:	48b4      	ldr	r0, [pc, #720]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800ad3c:	f7fe fbf0 	bl	8009520 <DbgTraceGetFileName>
 800ad40:	4601      	mov	r1, r0
 800ad42:	236f      	movs	r3, #111	; 0x6f
 800ad44:	4ab2      	ldr	r2, [pc, #712]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800ad46:	48b3      	ldr	r0, [pc, #716]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800ad48:	f000 fe96 	bl	800ba78 <iprintf>
 800ad4c:	48b3      	ldr	r0, [pc, #716]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800ad4e:	f000 fe93 	bl	800ba78 <iprintf>
      break;
 800ad52:	e155      	b.n	800b000 <P2PS_STM_App_Notification+0x33c>
        if(pNotification->DataTransfered.pPayload[0] == 0x00)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f040 814f 	bne.w	800affe <P2PS_STM_App_Notification+0x33a>
          if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	3301      	adds	r3, #1
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d13f      	bne.n	800adec <P2PS_STM_App_Notification+0x128>
        	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, SET);
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	2120      	movs	r1, #32
 800ad70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad74:	f7f8 fda8 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, SET);
 800ad78:	2201      	movs	r2, #1
 800ad7a:	2140      	movs	r1, #64	; 0x40
 800ad7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad80:	f7f8 fda2 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800ad84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad88:	f7f6 f91a 	bl	8000fc0 <HAL_Delay>
        	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, RESET);
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2120      	movs	r1, #32
 800ad90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad94:	f7f8 fd98 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, RESET);
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2140      	movs	r1, #64	; 0x40
 800ad9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ada0:	f7f8 fd92 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800ada4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ada8:	f7f6 f90a 	bl	8000fc0 <HAL_Delay>
            APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED RED Toggle\n");
 800adac:	4897      	ldr	r0, [pc, #604]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800adae:	f7fe fbb7 	bl	8009520 <DbgTraceGetFileName>
 800adb2:	4601      	mov	r1, r0
 800adb4:	2381      	movs	r3, #129	; 0x81
 800adb6:	4a96      	ldr	r2, [pc, #600]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800adb8:	4896      	ldr	r0, [pc, #600]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800adba:	f000 fe5d 	bl	800ba78 <iprintf>
 800adbe:	4899      	ldr	r0, [pc, #612]	; (800b024 <P2PS_STM_App_Notification+0x360>)
 800adc0:	f000 fee0 	bl	800bb84 <puts>
            APP_DBG_MSG(" \n\r");
 800adc4:	4891      	ldr	r0, [pc, #580]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800adc6:	f7fe fbab 	bl	8009520 <DbgTraceGetFileName>
 800adca:	4601      	mov	r1, r0
 800adcc:	2382      	movs	r3, #130	; 0x82
 800adce:	4a90      	ldr	r2, [pc, #576]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800add0:	4890      	ldr	r0, [pc, #576]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800add2:	f000 fe51 	bl	800ba78 <iprintf>
 800add6:	4891      	ldr	r0, [pc, #580]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800add8:	f000 fe4e 	bl	800ba78 <iprintf>
            P2P_Server_App_Context.LedControl.Led = 0x01;
 800addc:	4b8a      	ldr	r3, [pc, #552]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800adde:	2201      	movs	r2, #1
 800ade0:	709a      	strb	r2, [r3, #2]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.LedControl.Led);
 800ade2:	4991      	ldr	r1, [pc, #580]	; (800b028 <P2PS_STM_App_Notification+0x364>)
 800ade4:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800ade8:	f7fd fc56 	bl	8008698 <P2PS_STM_App_Update_Char>
          if(pNotification->DataTransfered.pPayload[1] == 0x02)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	3301      	adds	r3, #1
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d13f      	bne.n	800ae78 <P2PS_STM_App_Notification+0x1b4>
        	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, SET);
 800adf8:	2201      	movs	r2, #1
 800adfa:	2180      	movs	r1, #128	; 0x80
 800adfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae00:	f7f8 fd62 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, SET);
 800ae04:	2201      	movs	r2, #1
 800ae06:	2110      	movs	r1, #16
 800ae08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae0c:	f7f8 fd5c 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800ae10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae14:	f7f6 f8d4 	bl	8000fc0 <HAL_Delay>
        	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, RESET);
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2180      	movs	r1, #128	; 0x80
 800ae1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae20:	f7f8 fd52 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, RESET);
 800ae24:	2200      	movs	r2, #0
 800ae26:	2110      	movs	r1, #16
 800ae28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae2c:	f7f8 fd4c 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800ae30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae34:	f7f6 f8c4 	bl	8000fc0 <HAL_Delay>
            APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED BLUE Toggle\n");
 800ae38:	4874      	ldr	r0, [pc, #464]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800ae3a:	f7fe fb71 	bl	8009520 <DbgTraceGetFileName>
 800ae3e:	4601      	mov	r1, r0
 800ae40:	238e      	movs	r3, #142	; 0x8e
 800ae42:	4a73      	ldr	r2, [pc, #460]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800ae44:	4873      	ldr	r0, [pc, #460]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800ae46:	f000 fe17 	bl	800ba78 <iprintf>
 800ae4a:	4878      	ldr	r0, [pc, #480]	; (800b02c <P2PS_STM_App_Notification+0x368>)
 800ae4c:	f000 fe9a 	bl	800bb84 <puts>
            APP_DBG_MSG(" \n\r");
 800ae50:	486e      	ldr	r0, [pc, #440]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800ae52:	f7fe fb65 	bl	8009520 <DbgTraceGetFileName>
 800ae56:	4601      	mov	r1, r0
 800ae58:	238f      	movs	r3, #143	; 0x8f
 800ae5a:	4a6d      	ldr	r2, [pc, #436]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800ae5c:	486d      	ldr	r0, [pc, #436]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800ae5e:	f000 fe0b 	bl	800ba78 <iprintf>
 800ae62:	486e      	ldr	r0, [pc, #440]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800ae64:	f000 fe08 	bl	800ba78 <iprintf>
            P2P_Server_App_Context.LedControl.Led = 0x02;
 800ae68:	4b67      	ldr	r3, [pc, #412]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	709a      	strb	r2, [r3, #2]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.LedControl.Led);
 800ae6e:	496e      	ldr	r1, [pc, #440]	; (800b028 <P2PS_STM_App_Notification+0x364>)
 800ae70:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800ae74:	f7fd fc10 	bl	8008698 <P2PS_STM_App_Update_Char>
          if(pNotification->DataTransfered.pPayload[1] == 0x03)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	d141      	bne.n	800af08 <P2PS_STM_App_Notification+0x244>
        	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, SET);
 800ae84:	2201      	movs	r2, #1
 800ae86:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae8e:	f7f8 fd1b 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, SET);
 800ae92:	2201      	movs	r2, #1
 800ae94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae98:	4865      	ldr	r0, [pc, #404]	; (800b030 <P2PS_STM_App_Notification+0x36c>)
 800ae9a:	f7f8 fd15 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800ae9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aea2:	f7f6 f88d 	bl	8000fc0 <HAL_Delay>
        	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, RESET);
 800aea6:	2200      	movs	r2, #0
 800aea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aeac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aeb0:	f7f8 fd0a 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, RESET);
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aeba:	485d      	ldr	r0, [pc, #372]	; (800b030 <P2PS_STM_App_Notification+0x36c>)
 800aebc:	f7f8 fd04 	bl	80038c8 <HAL_GPIO_WritePin>
        	HAL_Delay(1000);
 800aec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aec4:	f7f6 f87c 	bl	8000fc0 <HAL_Delay>
            APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED GREEN Toggle\n");
 800aec8:	4850      	ldr	r0, [pc, #320]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800aeca:	f7fe fb29 	bl	8009520 <DbgTraceGetFileName>
 800aece:	4601      	mov	r1, r0
 800aed0:	239b      	movs	r3, #155	; 0x9b
 800aed2:	4a4f      	ldr	r2, [pc, #316]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800aed4:	484f      	ldr	r0, [pc, #316]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800aed6:	f000 fdcf 	bl	800ba78 <iprintf>
 800aeda:	4856      	ldr	r0, [pc, #344]	; (800b034 <P2PS_STM_App_Notification+0x370>)
 800aedc:	f000 fe52 	bl	800bb84 <puts>
            APP_DBG_MSG(" \n\r");
 800aee0:	484a      	ldr	r0, [pc, #296]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800aee2:	f7fe fb1d 	bl	8009520 <DbgTraceGetFileName>
 800aee6:	4601      	mov	r1, r0
 800aee8:	239c      	movs	r3, #156	; 0x9c
 800aeea:	4a49      	ldr	r2, [pc, #292]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800aeec:	4849      	ldr	r0, [pc, #292]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800aeee:	f000 fdc3 	bl	800ba78 <iprintf>
 800aef2:	484a      	ldr	r0, [pc, #296]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800aef4:	f000 fdc0 	bl	800ba78 <iprintf>
            P2P_Server_App_Context.LedControl.Led = 0x03;
 800aef8:	4b43      	ldr	r3, [pc, #268]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800aefa:	2203      	movs	r2, #3
 800aefc:	709a      	strb	r2, [r3, #2]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.LedControl.Led);
 800aefe:	494a      	ldr	r1, [pc, #296]	; (800b028 <P2PS_STM_App_Notification+0x364>)
 800af00:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800af04:	f7fd fbc8 	bl	8008698 <P2PS_STM_App_Update_Char>
          if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	3301      	adds	r3, #1
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d174      	bne.n	800affe <P2PS_STM_App_Notification+0x33a>
            HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, SET);
 800af14:	2201      	movs	r2, #1
 800af16:	2120      	movs	r1, #32
 800af18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af1c:	f7f8 fcd4 	bl	80038c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, SET);
 800af20:	2201      	movs	r2, #1
 800af22:	2140      	movs	r1, #64	; 0x40
 800af24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af28:	f7f8 fcce 	bl	80038c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, SET);
 800af2c:	2201      	movs	r2, #1
 800af2e:	2180      	movs	r1, #128	; 0x80
 800af30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af34:	f7f8 fcc8 	bl	80038c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, SET);
 800af38:	2201      	movs	r2, #1
 800af3a:	2110      	movs	r1, #16
 800af3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af40:	f7f8 fcc2 	bl	80038c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, SET);
 800af44:	2201      	movs	r2, #1
 800af46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af4e:	f7f8 fcbb 	bl	80038c8 <HAL_GPIO_WritePin>
           	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, SET);
 800af52:	2201      	movs	r2, #1
 800af54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af58:	4835      	ldr	r0, [pc, #212]	; (800b030 <P2PS_STM_App_Notification+0x36c>)
 800af5a:	f7f8 fcb5 	bl	80038c8 <HAL_GPIO_WritePin>
           	HAL_Delay(1000);
 800af5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af62:	f7f6 f82d 	bl	8000fc0 <HAL_Delay>
        	HAL_GPIO_WritePin(Led_Red_1_GPIO_Port, Led_Red_1_Pin, RESET);
 800af66:	2200      	movs	r2, #0
 800af68:	2120      	movs	r1, #32
 800af6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af6e:	f7f8 fcab 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_GPIO_WritePin(Led_Red_2_GPIO_Port, Led_Red_2_Pin, RESET);
 800af72:	2200      	movs	r2, #0
 800af74:	2140      	movs	r1, #64	; 0x40
 800af76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af7a:	f7f8 fca5 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_GPIO_WritePin(Led_Blue_1_GPIO_Port, Led_Blue_1_Pin, RESET);
 800af7e:	2200      	movs	r2, #0
 800af80:	2180      	movs	r1, #128	; 0x80
 800af82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af86:	f7f8 fc9f 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_GPIO_WritePin(Led_Blue_2_GPIO_Port, Led_Blue_2_Pin, RESET);
 800af8a:	2200      	movs	r2, #0
 800af8c:	2110      	movs	r1, #16
 800af8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af92:	f7f8 fc99 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_GPIO_WritePin(Led_Green_1_GPIO_Port, Led_Green_1_Pin, RESET);
 800af96:	2200      	movs	r2, #0
 800af98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800afa0:	f7f8 fc92 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_GPIO_WritePin(Led_Green_2_GPIO_Port, Led_Green_2_Pin, RESET);
 800afa4:	2200      	movs	r2, #0
 800afa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800afaa:	4821      	ldr	r0, [pc, #132]	; (800b030 <P2PS_STM_App_Notification+0x36c>)
 800afac:	f7f8 fc8c 	bl	80038c8 <HAL_GPIO_WritePin>
          	HAL_Delay(1000);
 800afb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800afb4:	f7f6 f804 	bl	8000fc0 <HAL_Delay>
            APP_DBG_MSG("-- P2P APPLICATION SERVER  : All LEDs Toggle\n");
 800afb8:	4814      	ldr	r0, [pc, #80]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800afba:	f7fe fab1 	bl	8009520 <DbgTraceGetFileName>
 800afbe:	4601      	mov	r1, r0
 800afc0:	23b0      	movs	r3, #176	; 0xb0
 800afc2:	4a13      	ldr	r2, [pc, #76]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800afc4:	4813      	ldr	r0, [pc, #76]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800afc6:	f000 fd57 	bl	800ba78 <iprintf>
 800afca:	481b      	ldr	r0, [pc, #108]	; (800b038 <P2PS_STM_App_Notification+0x374>)
 800afcc:	f000 fdda 	bl	800bb84 <puts>
            APP_DBG_MSG(" \n\r");
 800afd0:	480e      	ldr	r0, [pc, #56]	; (800b00c <P2PS_STM_App_Notification+0x348>)
 800afd2:	f7fe faa5 	bl	8009520 <DbgTraceGetFileName>
 800afd6:	4601      	mov	r1, r0
 800afd8:	23b1      	movs	r3, #177	; 0xb1
 800afda:	4a0d      	ldr	r2, [pc, #52]	; (800b010 <P2PS_STM_App_Notification+0x34c>)
 800afdc:	480d      	ldr	r0, [pc, #52]	; (800b014 <P2PS_STM_App_Notification+0x350>)
 800afde:	f000 fd4b 	bl	800ba78 <iprintf>
 800afe2:	480e      	ldr	r0, [pc, #56]	; (800b01c <P2PS_STM_App_Notification+0x358>)
 800afe4:	f000 fd48 	bl	800ba78 <iprintf>
            P2P_Server_App_Context.LedControl.Led = 0x00;
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <P2PS_STM_App_Notification+0x344>)
 800afea:	2200      	movs	r2, #0
 800afec:	709a      	strb	r2, [r3, #2]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.LedControl.Led);
 800afee:	490e      	ldr	r1, [pc, #56]	; (800b028 <P2PS_STM_App_Notification+0x364>)
 800aff0:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800aff4:	f7fd fb50 	bl	8008698 <P2PS_STM_App_Update_Char>
      break;
 800aff8:	e001      	b.n	800affe <P2PS_STM_App_Notification+0x33a>
      break;
 800affa:	bf00      	nop
 800affc:	e000      	b.n	800b000 <P2PS_STM_App_Notification+0x33c>
      break;
 800affe:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800b000:	bf00      	nop
}
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20000204 	.word	0x20000204
 800b00c:	0800d410 	.word	0x0800d410
 800b010:	0800d828 	.word	0x0800d828
 800b014:	0800d434 	.word	0x0800d434
 800b018:	0800d448 	.word	0x0800d448
 800b01c:	0800d47c 	.word	0x0800d47c
 800b020:	0800d480 	.word	0x0800d480
 800b024:	0800d4b4 	.word	0x0800d4b4
 800b028:	20000206 	.word	0x20000206
 800b02c:	0800d4e0 	.word	0x0800d4e0
 800b030:	48000800 	.word	0x48000800
 800b034:	0800d510 	.word	0x0800d510
 800b038:	0800d540 	.word	0x0800d540

0800b03c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <P2PS_APP_Notification+0x16>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d002      	beq.n	800b056 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800b050:	e002      	b.n	800b058 <P2PS_APP_Notification+0x1c>
    break;
 800b052:	bf00      	nop
 800b054:	e000      	b.n	800b058 <P2PS_APP_Notification+0x1c>
    break;
 800b056:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800b058:	bf00      	nop
}
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	P2P_Server_App_Context.Notification_Status=0;
 800b068:	4b03      	ldr	r3, [pc, #12]	; (800b078 <P2PS_APP_Init+0x14>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
/* USER CODE END P2PS_APP_Init */
  return;
 800b06e:	bf00      	nop
}
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20000204 	.word	0x20000204

0800b07c <LL_PWR_EnableBootC2>:
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b080:	4b05      	ldr	r3, [pc, #20]	; (800b098 <LL_PWR_EnableBootC2+0x1c>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	4a04      	ldr	r2, [pc, #16]	; (800b098 <LL_PWR_EnableBootC2+0x1c>)
 800b086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b08a:	60d3      	str	r3, [r2, #12]
}
 800b08c:	bf00      	nop
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	58000400 	.word	0x58000400

0800b09c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b0a4:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b0a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b0aa:	4905      	ldr	r1, [pc, #20]	; (800b0c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	58000800 	.word	0x58000800

0800b0c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b0cc:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b0ce:	6a1a      	ldr	r2, [r3, #32]
 800b0d0:	4904      	ldr	r1, [pc, #16]	; (800b0e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	620b      	str	r3, [r1, #32]
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	58000800 	.word	0x58000800

0800b0e8 <LL_AHB3_GRP1_EnableClock>:
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b0f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b10c:	68fb      	ldr	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b126:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b12a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4313      	orrs	r3, r2
 800b132:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b13a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4013      	ands	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b144:	68fb      	ldr	r3, [r7, #12]
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <LL_C1_IPCC_EnableIT_TXF>:
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	601a      	str	r2, [r3, #0]
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <LL_C1_IPCC_EnableIT_RXO>:
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f043 0201 	orr.w	r2, r3, #1
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	601a      	str	r2, [r3, #0]
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	041b      	lsls	r3, r3, #16
 800b1a4:	43db      	mvns	r3, r3
 800b1a6:	401a      	ands	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	041b      	lsls	r3, r3, #16
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	605a      	str	r2, [r3, #4]
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	609a      	str	r2, [r3, #8]
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <LL_C1_IPCC_SetFlag_CHx>:
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	041a      	lsls	r2, r3, #16
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	609a      	str	r2, [r3, #8]
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	4013      	ands	r3, r2
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d101      	bne.n	800b256 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69da      	ldr	r2, [r3, #28]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	4013      	ands	r3, r2
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d101      	bne.n	800b280 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e000      	b.n	800b282 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
	...

0800b290 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b294:	2102      	movs	r1, #2
 800b296:	4819      	ldr	r0, [pc, #100]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b298:	f7ff ffe4 	bl	800b264 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d009      	beq.n	800b2b6 <HW_IPCC_Rx_Handler+0x26>
 800b2a2:	4b16      	ldr	r3, [pc, #88]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	43db      	mvns	r3, r3
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b2b0:	f000 f8da 	bl	800b468 <HW_IPCC_SYS_EvtHandler>
 800b2b4:	e01f      	b.n	800b2f6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4810      	ldr	r0, [pc, #64]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b2ba:	f7ff ffd3 	bl	800b264 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d008      	beq.n	800b2d6 <HW_IPCC_Rx_Handler+0x46>
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b2d0:	f000 f88e 	bl	800b3f0 <HW_IPCC_BLE_EvtHandler>
 800b2d4:	e00f      	b.n	800b2f6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b2d6:	2108      	movs	r1, #8
 800b2d8:	4808      	ldr	r0, [pc, #32]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b2da:	f7ff ffc3 	bl	800b264 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d009      	beq.n	800b2f8 <HW_IPCC_Rx_Handler+0x68>
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <HW_IPCC_Rx_Handler+0x6c>)
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	f003 0308 	and.w	r3, r3, #8
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b2f2:	f000 f905 	bl	800b500 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
}
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	58000c00 	.word	0x58000c00

0800b300 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b304:	2102      	movs	r1, #2
 800b306:	481a      	ldr	r0, [pc, #104]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b308:	f7ff ff97 	bl	800b23a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d109      	bne.n	800b326 <HW_IPCC_Tx_Handler+0x26>
 800b312:	4b17      	ldr	r3, [pc, #92]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	43db      	mvns	r3, r3
 800b318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b320:	f000 f896 	bl	800b450 <HW_IPCC_SYS_CmdEvtHandler>
 800b324:	e020      	b.n	800b368 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b326:	2108      	movs	r1, #8
 800b328:	4811      	ldr	r0, [pc, #68]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b32a:	f7ff ff86 	bl	800b23a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d109      	bne.n	800b348 <HW_IPCC_Tx_Handler+0x48>
 800b334:	4b0e      	ldr	r3, [pc, #56]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	43db      	mvns	r3, r3
 800b33a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b342:	f000 f8bf 	bl	800b4c4 <HW_IPCC_MM_FreeBufHandler>
 800b346:	e00f      	b.n	800b368 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b348:	2120      	movs	r1, #32
 800b34a:	4809      	ldr	r0, [pc, #36]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b34c:	f7ff ff75 	bl	800b23a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <HW_IPCC_Tx_Handler+0x6a>
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <HW_IPCC_Tx_Handler+0x70>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	43db      	mvns	r3, r3
 800b35c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b364:	f000 f850 	bl	800b408 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
}
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	58000c00 	.word	0x58000c00

0800b374 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b378:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b37c:	f7ff fecd 	bl	800b11a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b380:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b384:	f7ff fe8a 	bl	800b09c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b388:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b38c:	f7ff fe9a 	bl	800b0c4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b390:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b392:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b394:	f7ff fe72 	bl	800b07c <LL_PWR_EnableBootC2>

  return;
 800b398:	bf00      	nop
}
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b3a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b3a4:	f7ff fea0 	bl	800b0e8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b3a8:	4806      	ldr	r0, [pc, #24]	; (800b3c4 <HW_IPCC_Init+0x28>)
 800b3aa:	f7ff fee2 	bl	800b172 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b3ae:	4805      	ldr	r0, [pc, #20]	; (800b3c4 <HW_IPCC_Init+0x28>)
 800b3b0:	f7ff fecf 	bl	800b152 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b3b4:	202c      	movs	r0, #44	; 0x2c
 800b3b6:	f7f7 fd88 	bl	8002eca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b3ba:	202d      	movs	r0, #45	; 0x2d
 800b3bc:	f7f7 fd85 	bl	8002eca <HAL_NVIC_EnableIRQ>

  return;
 800b3c0:	bf00      	nop
}
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	58000c00 	.word	0x58000c00

0800b3c8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4802      	ldr	r0, [pc, #8]	; (800b3d8 <HW_IPCC_BLE_Init+0x10>)
 800b3d0:	f7ff ff04 	bl	800b1dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b3d4:	bf00      	nop
}
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	58000c00 	.word	0x58000c00

0800b3dc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	4802      	ldr	r0, [pc, #8]	; (800b3ec <HW_IPCC_BLE_SendCmd+0x10>)
 800b3e4:	f7ff ff1a 	bl	800b21c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b3e8:	bf00      	nop
}
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	58000c00 	.word	0x58000c00

0800b3f0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b3f4:	f7fd fedc 	bl	80091b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4802      	ldr	r0, [pc, #8]	; (800b404 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b3fc:	f7ff ff00 	bl	800b200 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b400:	bf00      	nop
}
 800b402:	bd80      	pop	{r7, pc}
 800b404:	58000c00 	.word	0x58000c00

0800b408 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b40c:	2120      	movs	r1, #32
 800b40e:	4803      	ldr	r0, [pc, #12]	; (800b41c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b410:	f7ff fed2 	bl	800b1b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b414:	f7fd fefc 	bl	8009210 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b418:	bf00      	nop
}
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	58000c00 	.word	0x58000c00

0800b420 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b424:	2102      	movs	r1, #2
 800b426:	4802      	ldr	r0, [pc, #8]	; (800b430 <HW_IPCC_SYS_Init+0x10>)
 800b428:	f7ff fed8 	bl	800b1dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b42c:	bf00      	nop
}
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	58000c00 	.word	0x58000c00

0800b434 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b438:	2102      	movs	r1, #2
 800b43a:	4804      	ldr	r0, [pc, #16]	; (800b44c <HW_IPCC_SYS_SendCmd+0x18>)
 800b43c:	f7ff feee 	bl	800b21c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b440:	2102      	movs	r1, #2
 800b442:	4802      	ldr	r0, [pc, #8]	; (800b44c <HW_IPCC_SYS_SendCmd+0x18>)
 800b444:	f7ff fea5 	bl	800b192 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b448:	bf00      	nop
}
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	58000c00 	.word	0x58000c00

0800b450 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b454:	2102      	movs	r1, #2
 800b456:	4803      	ldr	r0, [pc, #12]	; (800b464 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b458:	f7ff feae 	bl	800b1b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b45c:	f7fd ff28 	bl	80092b0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b460:	bf00      	nop
}
 800b462:	bd80      	pop	{r7, pc}
 800b464:	58000c00 	.word	0x58000c00

0800b468 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b46c:	f7fd ff36 	bl	80092dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b470:	2102      	movs	r1, #2
 800b472:	4802      	ldr	r0, [pc, #8]	; (800b47c <HW_IPCC_SYS_EvtHandler+0x14>)
 800b474:	f7ff fec4 	bl	800b200 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b478:	bf00      	nop
}
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	58000c00 	.word	0x58000c00

0800b480 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b488:	2108      	movs	r1, #8
 800b48a:	480c      	ldr	r0, [pc, #48]	; (800b4bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b48c:	f7ff fed5 	bl	800b23a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d007      	beq.n	800b4a6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b496:	4a0a      	ldr	r2, [pc, #40]	; (800b4c0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b49c:	2108      	movs	r1, #8
 800b49e:	4807      	ldr	r0, [pc, #28]	; (800b4bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4a0:	f7ff fe77 	bl	800b192 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b4a4:	e006      	b.n	800b4b4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4aa:	2108      	movs	r1, #8
 800b4ac:	4803      	ldr	r0, [pc, #12]	; (800b4bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4ae:	f7ff feb5 	bl	800b21c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b4b2:	bf00      	nop
}
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	58000c00 	.word	0x58000c00
 800b4c0:	2000171c 	.word	0x2000171c

0800b4c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4c8:	2108      	movs	r1, #8
 800b4ca:	4806      	ldr	r0, [pc, #24]	; (800b4e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b4cc:	f7ff fe74 	bl	800b1b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b4d0:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4d6:	2108      	movs	r1, #8
 800b4d8:	4802      	ldr	r0, [pc, #8]	; (800b4e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b4da:	f7ff fe9f 	bl	800b21c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b4de:	bf00      	nop
}
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	58000c00 	.word	0x58000c00
 800b4e8:	2000171c 	.word	0x2000171c

0800b4ec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b4f0:	2108      	movs	r1, #8
 800b4f2:	4802      	ldr	r0, [pc, #8]	; (800b4fc <HW_IPCC_TRACES_Init+0x10>)
 800b4f4:	f7ff fe72 	bl	800b1dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b4f8:	bf00      	nop
}
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	58000c00 	.word	0x58000c00

0800b500 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b504:	f7fd ff92 	bl	800942c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b508:	2108      	movs	r1, #8
 800b50a:	4802      	ldr	r0, [pc, #8]	; (800b514 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b50c:	f7ff fe78 	bl	800b200 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b510:	bf00      	nop
}
 800b512:	bd80      	pop	{r7, pc}
 800b514:	58000c00 	.word	0x58000c00

0800b518 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <UTIL_LPM_Init+0x1c>)
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <UTIL_LPM_Init+0x20>)
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b528:	bf00      	nop
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20001720 	.word	0x20001720
 800b538:	20001724 	.word	0x20001724

0800b53c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b548:	f3ef 8310 	mrs	r3, PRIMASK
 800b54c:	613b      	str	r3, [r7, #16]
  return(result);
 800b54e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b552:	b672      	cpsid	i
}
 800b554:	bf00      	nop
  
  switch(state)
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <UTIL_LPM_SetOffMode+0x32>
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d10e      	bne.n	800b57e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <UTIL_LPM_SetOffMode+0x5c>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4313      	orrs	r3, r2
 800b568:	4a0b      	ldr	r2, [pc, #44]	; (800b598 <UTIL_LPM_SetOffMode+0x5c>)
 800b56a:	6013      	str	r3, [r2, #0]
      break;
 800b56c:	e008      	b.n	800b580 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	43da      	mvns	r2, r3
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <UTIL_LPM_SetOffMode+0x5c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4013      	ands	r3, r2
 800b578:	4a07      	ldr	r2, [pc, #28]	; (800b598 <UTIL_LPM_SetOffMode+0x5c>)
 800b57a:	6013      	str	r3, [r2, #0]
      break;
 800b57c:	e000      	b.n	800b580 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b57e:	bf00      	nop
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f383 8810 	msr	PRIMASK, r3
}
 800b58a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b58c:	bf00      	nop
 800b58e:	371c      	adds	r7, #28
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	20001724 	.word	0x20001724

0800b59c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	; 0x30
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b5a4:	4b6a      	ldr	r3, [pc, #424]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800b5aa:	4b69      	ldr	r3, [pc, #420]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	4a67      	ldr	r2, [pc, #412]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b5b4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b5b6:	4b67      	ldr	r3, [pc, #412]	; (800b754 <UTIL_SEQ_Run+0x1b8>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b5bc:	e086      	b.n	800b6cc <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b5c2:	e002      	b.n	800b5ca <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b5ca:	4a63      	ldr	r2, [pc, #396]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b5d2:	4b62      	ldr	r3, [pc, #392]	; (800b75c <UTIL_SEQ_Run+0x1c0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	401a      	ands	r2, r3
 800b5d8:	4b5d      	ldr	r3, [pc, #372]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4013      	ands	r3, r2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0f0      	beq.n	800b5c4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b5e2:	4a5d      	ldr	r2, [pc, #372]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b5ea:	4b5c      	ldr	r3, [pc, #368]	; (800b75c <UTIL_SEQ_Run+0x1c0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	401a      	ands	r2, r3
 800b5f0:	4b57      	ldr	r3, [pc, #348]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b5f8:	4a57      	ldr	r2, [pc, #348]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	4013      	ands	r3, r2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b60a:	4a53      	ldr	r2, [pc, #332]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	4413      	add	r3, r2
 800b612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b616:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b618:	4a4f      	ldr	r2, [pc, #316]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	4413      	add	r3, r2
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	4013      	ands	r3, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f000 f9ac 	bl	800b984 <SEQ_BitPosition>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	4b4b      	ldr	r3, [pc, #300]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b632:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b634:	4a48      	ldr	r2, [pc, #288]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	4413      	add	r3, r2
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	4b48      	ldr	r3, [pc, #288]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2101      	movs	r1, #1
 800b644:	fa01 f303 	lsl.w	r3, r1, r3
 800b648:	43db      	mvns	r3, r3
 800b64a:	401a      	ands	r2, r3
 800b64c:	4942      	ldr	r1, [pc, #264]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	440b      	add	r3, r1
 800b654:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b656:	f3ef 8310 	mrs	r3, PRIMASK
 800b65a:	617b      	str	r3, [r7, #20]
  return(result);
 800b65c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b65e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b660:	b672      	cpsid	i
}
 800b662:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b664:	4b3e      	ldr	r3, [pc, #248]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2201      	movs	r2, #1
 800b66a:	fa02 f303 	lsl.w	r3, r2, r3
 800b66e:	43da      	mvns	r2, r3
 800b670:	4b38      	ldr	r3, [pc, #224]	; (800b754 <UTIL_SEQ_Run+0x1b8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4013      	ands	r3, r2
 800b676:	4a37      	ldr	r2, [pc, #220]	; (800b754 <UTIL_SEQ_Run+0x1b8>)
 800b678:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b67a:	2302      	movs	r3, #2
 800b67c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b67e:	e013      	b.n	800b6a8 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b682:	3b01      	subs	r3, #1
 800b684:	4a34      	ldr	r2, [pc, #208]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b686:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b68a:	4b35      	ldr	r3, [pc, #212]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2201      	movs	r2, #1
 800b690:	fa02 f303 	lsl.w	r3, r2, r3
 800b694:	43da      	mvns	r2, r3
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	3b01      	subs	r3, #1
 800b69a:	400a      	ands	r2, r1
 800b69c:	492e      	ldr	r1, [pc, #184]	; (800b758 <UTIL_SEQ_Run+0x1bc>)
 800b69e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e8      	bne.n	800b680 <UTIL_SEQ_Run+0xe4>
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f383 8810 	msr	PRIMASK, r3
}
 800b6b8:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b6ba:	4b29      	ldr	r3, [pc, #164]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a29      	ldr	r2, [pc, #164]	; (800b764 <UTIL_SEQ_Run+0x1c8>)
 800b6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800b6c6:	4b23      	ldr	r3, [pc, #140]	; (800b754 <UTIL_SEQ_Run+0x1b8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b6cc:	4b23      	ldr	r3, [pc, #140]	; (800b75c <UTIL_SEQ_Run+0x1c0>)
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	401a      	ands	r2, r3
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <UTIL_SEQ_Run+0x152>
 800b6de:	4b22      	ldr	r3, [pc, #136]	; (800b768 <UTIL_SEQ_Run+0x1cc>)
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	4b22      	ldr	r3, [pc, #136]	; (800b76c <UTIL_SEQ_Run+0x1d0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f43f af68 	beq.w	800b5be <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b6ee:	4b1c      	ldr	r3, [pc, #112]	; (800b760 <UTIL_SEQ_Run+0x1c4>)
 800b6f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6f4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b6f6:	f000 f937 	bl	800b968 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b6fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800b700:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b704:	b672      	cpsid	i
}
 800b706:	bf00      	nop
  local_taskset = TaskSet;
 800b708:	4b12      	ldr	r3, [pc, #72]	; (800b754 <UTIL_SEQ_Run+0x1b8>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <UTIL_SEQ_Run+0x1c0>)
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	401a      	ands	r2, r3
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d108      	bne.n	800b732 <UTIL_SEQ_Run+0x196>
 800b720:	4b11      	ldr	r3, [pc, #68]	; (800b768 <UTIL_SEQ_Run+0x1cc>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	4b11      	ldr	r3, [pc, #68]	; (800b76c <UTIL_SEQ_Run+0x1d0>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4013      	ands	r3, r2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800b72e:	f7f5 fc74 	bl	800101a <UTIL_SEQ_Idle>
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f383 8810 	msr	PRIMASK, r3
}
 800b73c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b73e:	f000 f91a 	bl	800b976 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b742:	4a03      	ldr	r2, [pc, #12]	; (800b750 <UTIL_SEQ_Run+0x1b4>)
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	6013      	str	r3, [r2, #0]

  return;
 800b748:	bf00      	nop
}
 800b74a:	3730      	adds	r7, #48	; 0x30
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20000024 	.word	0x20000024
 800b754:	20001728 	.word	0x20001728
 800b758:	200017b8 	.word	0x200017b8
 800b75c:	20000020 	.word	0x20000020
 800b760:	20001734 	.word	0x20001734
 800b764:	20001738 	.word	0x20001738
 800b768:	2000172c 	.word	0x2000172c
 800b76c:	20001730 	.word	0x20001730

0800b770 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b77c:	f3ef 8310 	mrs	r3, PRIMASK
 800b780:	617b      	str	r3, [r7, #20]
  return(result);
 800b782:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b786:	b672      	cpsid	i
}
 800b788:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 f8fa 	bl	800b984 <SEQ_BitPosition>
 800b790:	4603      	mov	r3, r0
 800b792:	4619      	mov	r1, r3
 800b794:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <UTIL_SEQ_RegTask+0x40>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f383 8810 	msr	PRIMASK, r3
}
 800b7a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b7a8:	bf00      	nop
}
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001738 	.word	0x20001738

0800b7b4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7be:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b7c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c8:	b672      	cpsid	i
}
 800b7ca:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b7cc:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <UTIL_SEQ_SetTask+0x50>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	4a0b      	ldr	r2, [pc, #44]	; (800b804 <UTIL_SEQ_SetTask+0x50>)
 800b7d6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b7d8:	4a0b      	ldr	r2, [pc, #44]	; (800b808 <UTIL_SEQ_SetTask+0x54>)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	4908      	ldr	r1, [pc, #32]	; (800b808 <UTIL_SEQ_SetTask+0x54>)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f383 8810 	msr	PRIMASK, r3
}
 800b7f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b7f8:	bf00      	nop
}
 800b7fa:	371c      	adds	r7, #28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20001728 	.word	0x20001728
 800b808:	200017b8 	.word	0x200017b8

0800b80c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b814:	f3ef 8310 	mrs	r3, PRIMASK
 800b818:	60fb      	str	r3, [r7, #12]
  return(result);
 800b81a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b81c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b81e:	b672      	cpsid	i
}
 800b820:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	43da      	mvns	r2, r3
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <UTIL_SEQ_PauseTask+0x3c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4013      	ands	r3, r2
 800b82c:	4a06      	ldr	r2, [pc, #24]	; (800b848 <UTIL_SEQ_PauseTask+0x3c>)
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f383 8810 	msr	PRIMASK, r3
}
 800b83a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b83c:	bf00      	nop
}
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	20000020 	.word	0x20000020

0800b84c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b854:	f3ef 8310 	mrs	r3, PRIMASK
 800b858:	60fb      	str	r3, [r7, #12]
  return(result);
 800b85a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b85c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b85e:	b672      	cpsid	i
}
 800b860:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b862:	4b09      	ldr	r3, [pc, #36]	; (800b888 <UTIL_SEQ_ResumeTask+0x3c>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4313      	orrs	r3, r2
 800b86a:	4a07      	ldr	r2, [pc, #28]	; (800b888 <UTIL_SEQ_ResumeTask+0x3c>)
 800b86c:	6013      	str	r3, [r2, #0]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f383 8810 	msr	PRIMASK, r3
}
 800b878:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b87a:	bf00      	nop
}
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20000020 	.word	0x20000020

0800b88c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b894:	f3ef 8310 	mrs	r3, PRIMASK
 800b898:	60fb      	str	r3, [r7, #12]
  return(result);
 800b89a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b89c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b89e:	b672      	cpsid	i
}
 800b8a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	4a07      	ldr	r2, [pc, #28]	; (800b8c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f383 8810 	msr	PRIMASK, r3
}
 800b8b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b8ba:	bf00      	nop
}
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	2000172c 	.word	0x2000172c

0800b8cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b8d4:	4b21      	ldr	r3, [pc, #132]	; (800b95c <UTIL_SEQ_WaitEvt+0x90>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b8da:	4b20      	ldr	r3, [pc, #128]	; (800b95c <UTIL_SEQ_WaitEvt+0x90>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8e2:	d102      	bne.n	800b8ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	61fb      	str	r3, [r7, #28]
 800b8e8:	e005      	b.n	800b8f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800b8ea:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <UTIL_SEQ_WaitEvt+0x90>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f4:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b8f6:	4b1a      	ldr	r3, [pc, #104]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b8fc:	4a18      	ldr	r2, [pc, #96]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800b902:	e005      	b.n	800b910 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800b904:	4b16      	ldr	r3, [pc, #88]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4619      	mov	r1, r3
 800b90a:	69f8      	ldr	r0, [r7, #28]
 800b90c:	f7f5 fb8c 	bl	8001028 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800b910:	4b14      	ldr	r3, [pc, #80]	; (800b964 <UTIL_SEQ_WaitEvt+0x98>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b12      	ldr	r3, [pc, #72]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4013      	ands	r3, r2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0f2      	beq.n	800b904 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b91e:	4a0f      	ldr	r2, [pc, #60]	; (800b95c <UTIL_SEQ_WaitEvt+0x90>)
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b924:	f3ef 8310 	mrs	r3, PRIMASK
 800b928:	60bb      	str	r3, [r7, #8]
  return(result);
 800b92a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b92c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b92e:	b672      	cpsid	i
}
 800b930:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	43da      	mvns	r2, r3
 800b938:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <UTIL_SEQ_WaitEvt+0x98>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4013      	ands	r3, r2
 800b93e:	4a09      	ldr	r2, [pc, #36]	; (800b964 <UTIL_SEQ_WaitEvt+0x98>)
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f383 8810 	msr	PRIMASK, r3
}
 800b94c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b94e:	4a04      	ldr	r2, [pc, #16]	; (800b960 <UTIL_SEQ_WaitEvt+0x94>)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	6013      	str	r3, [r2, #0]

  return;
 800b954:	bf00      	nop
}
 800b956:	3720      	adds	r7, #32
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20001734 	.word	0x20001734
 800b960:	20001730 	.word	0x20001730
 800b964:	2000172c 	.word	0x2000172c

0800b968 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b96c:	bf00      	nop
}
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b976:	b480      	push	{r7}
 800b978:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b97a:	bf00      	nop
}
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	0c1b      	lsrs	r3, r3, #16
 800b994:	041b      	lsls	r3, r3, #16
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <SEQ_BitPosition+0x20>
 800b99a:	2310      	movs	r3, #16
 800b99c:	73fb      	strb	r3, [r7, #15]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	041b      	lsls	r3, r3, #16
 800b9a2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d105      	bne.n	800b9ba <SEQ_BitPosition+0x36>
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	73fb      	strb	r3, [r7, #15]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d105      	bne.n	800b9d0 <SEQ_BitPosition+0x4c>
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	73fb      	strb	r3, [r7, #15]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	011b      	lsls	r3, r3, #4
 800b9ce:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	0f1b      	lsrs	r3, r3, #28
 800b9d4:	4a07      	ldr	r2, [pc, #28]	; (800b9f4 <SEQ_BitPosition+0x70>)
 800b9d6:	5cd2      	ldrb	r2, [r2, r3]
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	4413      	add	r3, r2
 800b9dc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	f1c3 031f 	rsb	r3, r3, #31
 800b9e4:	b2db      	uxtb	r3, r3
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	0800d844 	.word	0x0800d844

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	; (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000028 	.word	0x20000028

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	; (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	; (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	; (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	; (800ba48 <__libc_init_array+0x44>)
 800ba18:	f001 f852 	bl	800cac0 <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800d8f4 	.word	0x0800d8f4
 800ba40:	0800d8f4 	.word	0x0800d8f4
 800ba44:	0800d8f4 	.word	0x0800d8f4
 800ba48:	0800d8f8 	.word	0x0800d8f8

0800ba4c <memcpy>:
 800ba4c:	440a      	add	r2, r1
 800ba4e:	4291      	cmp	r1, r2
 800ba50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba54:	d100      	bne.n	800ba58 <memcpy+0xc>
 800ba56:	4770      	bx	lr
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba62:	4291      	cmp	r1, r2
 800ba64:	d1f9      	bne.n	800ba5a <memcpy+0xe>
 800ba66:	bd10      	pop	{r4, pc}

0800ba68 <memset>:
 800ba68:	4402      	add	r2, r0
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d100      	bne.n	800ba72 <memset+0xa>
 800ba70:	4770      	bx	lr
 800ba72:	f803 1b01 	strb.w	r1, [r3], #1
 800ba76:	e7f9      	b.n	800ba6c <memset+0x4>

0800ba78 <iprintf>:
 800ba78:	b40f      	push	{r0, r1, r2, r3}
 800ba7a:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <iprintf+0x2c>)
 800ba7c:	b513      	push	{r0, r1, r4, lr}
 800ba7e:	681c      	ldr	r4, [r3, #0]
 800ba80:	b124      	cbz	r4, 800ba8c <iprintf+0x14>
 800ba82:	69a3      	ldr	r3, [r4, #24]
 800ba84:	b913      	cbnz	r3, 800ba8c <iprintf+0x14>
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fa72 	bl	800bf70 <__sinit>
 800ba8c:	ab05      	add	r3, sp, #20
 800ba8e:	9a04      	ldr	r2, [sp, #16]
 800ba90:	68a1      	ldr	r1, [r4, #8]
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 fc7b 	bl	800c390 <_vfiprintf_r>
 800ba9a:	b002      	add	sp, #8
 800ba9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa0:	b004      	add	sp, #16
 800baa2:	4770      	bx	lr
 800baa4:	20000028 	.word	0x20000028

0800baa8 <_puts_r>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	460e      	mov	r6, r1
 800baac:	4605      	mov	r5, r0
 800baae:	b118      	cbz	r0, 800bab8 <_puts_r+0x10>
 800bab0:	6983      	ldr	r3, [r0, #24]
 800bab2:	b90b      	cbnz	r3, 800bab8 <_puts_r+0x10>
 800bab4:	f000 fa5c 	bl	800bf70 <__sinit>
 800bab8:	69ab      	ldr	r3, [r5, #24]
 800baba:	68ac      	ldr	r4, [r5, #8]
 800babc:	b913      	cbnz	r3, 800bac4 <_puts_r+0x1c>
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 fa56 	bl	800bf70 <__sinit>
 800bac4:	4b2c      	ldr	r3, [pc, #176]	; (800bb78 <_puts_r+0xd0>)
 800bac6:	429c      	cmp	r4, r3
 800bac8:	d120      	bne.n	800bb0c <_puts_r+0x64>
 800baca:	686c      	ldr	r4, [r5, #4]
 800bacc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bace:	07db      	lsls	r3, r3, #31
 800bad0:	d405      	bmi.n	800bade <_puts_r+0x36>
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	0598      	lsls	r0, r3, #22
 800bad6:	d402      	bmi.n	800bade <_puts_r+0x36>
 800bad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bada:	f000 fae7 	bl	800c0ac <__retarget_lock_acquire_recursive>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	0719      	lsls	r1, r3, #28
 800bae2:	d51d      	bpl.n	800bb20 <_puts_r+0x78>
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	b1db      	cbz	r3, 800bb20 <_puts_r+0x78>
 800bae8:	3e01      	subs	r6, #1
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800baf0:	3b01      	subs	r3, #1
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	bb39      	cbnz	r1, 800bb46 <_puts_r+0x9e>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da38      	bge.n	800bb6c <_puts_r+0xc4>
 800bafa:	4622      	mov	r2, r4
 800bafc:	210a      	movs	r1, #10
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 f85c 	bl	800bbbc <__swbuf_r>
 800bb04:	3001      	adds	r0, #1
 800bb06:	d011      	beq.n	800bb2c <_puts_r+0x84>
 800bb08:	250a      	movs	r5, #10
 800bb0a:	e011      	b.n	800bb30 <_puts_r+0x88>
 800bb0c:	4b1b      	ldr	r3, [pc, #108]	; (800bb7c <_puts_r+0xd4>)
 800bb0e:	429c      	cmp	r4, r3
 800bb10:	d101      	bne.n	800bb16 <_puts_r+0x6e>
 800bb12:	68ac      	ldr	r4, [r5, #8]
 800bb14:	e7da      	b.n	800bacc <_puts_r+0x24>
 800bb16:	4b1a      	ldr	r3, [pc, #104]	; (800bb80 <_puts_r+0xd8>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	bf08      	it	eq
 800bb1c:	68ec      	ldreq	r4, [r5, #12]
 800bb1e:	e7d5      	b.n	800bacc <_puts_r+0x24>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 f89c 	bl	800bc60 <__swsetup_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d0dd      	beq.n	800bae8 <_puts_r+0x40>
 800bb2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bb30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb32:	07da      	lsls	r2, r3, #31
 800bb34:	d405      	bmi.n	800bb42 <_puts_r+0x9a>
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	059b      	lsls	r3, r3, #22
 800bb3a:	d402      	bmi.n	800bb42 <_puts_r+0x9a>
 800bb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb3e:	f000 fab6 	bl	800c0ae <__retarget_lock_release_recursive>
 800bb42:	4628      	mov	r0, r5
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	da04      	bge.n	800bb54 <_puts_r+0xac>
 800bb4a:	69a2      	ldr	r2, [r4, #24]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	dc06      	bgt.n	800bb5e <_puts_r+0xb6>
 800bb50:	290a      	cmp	r1, #10
 800bb52:	d004      	beq.n	800bb5e <_puts_r+0xb6>
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	6022      	str	r2, [r4, #0]
 800bb5a:	7019      	strb	r1, [r3, #0]
 800bb5c:	e7c5      	b.n	800baea <_puts_r+0x42>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4628      	mov	r0, r5
 800bb62:	f000 f82b 	bl	800bbbc <__swbuf_r>
 800bb66:	3001      	adds	r0, #1
 800bb68:	d1bf      	bne.n	800baea <_puts_r+0x42>
 800bb6a:	e7df      	b.n	800bb2c <_puts_r+0x84>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	250a      	movs	r5, #10
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	701d      	strb	r5, [r3, #0]
 800bb76:	e7db      	b.n	800bb30 <_puts_r+0x88>
 800bb78:	0800d878 	.word	0x0800d878
 800bb7c:	0800d898 	.word	0x0800d898
 800bb80:	0800d858 	.word	0x0800d858

0800bb84 <puts>:
 800bb84:	4b02      	ldr	r3, [pc, #8]	; (800bb90 <puts+0xc>)
 800bb86:	4601      	mov	r1, r0
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	f7ff bf8d 	b.w	800baa8 <_puts_r>
 800bb8e:	bf00      	nop
 800bb90:	20000028 	.word	0x20000028

0800bb94 <strrchr>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4603      	mov	r3, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	b969      	cbnz	r1, 800bbb8 <strrchr+0x24>
 800bb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba0:	f000 bf0d 	b.w	800c9be <strchr>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	4605      	mov	r5, r0
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 ff07 	bl	800c9be <strchr>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1f7      	bne.n	800bba4 <strrchr+0x10>
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	2500      	movs	r5, #0
 800bbba:	e7f5      	b.n	800bba8 <strrchr+0x14>

0800bbbc <__swbuf_r>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	460e      	mov	r6, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	b118      	cbz	r0, 800bbce <__swbuf_r+0x12>
 800bbc6:	6983      	ldr	r3, [r0, #24]
 800bbc8:	b90b      	cbnz	r3, 800bbce <__swbuf_r+0x12>
 800bbca:	f000 f9d1 	bl	800bf70 <__sinit>
 800bbce:	4b21      	ldr	r3, [pc, #132]	; (800bc54 <__swbuf_r+0x98>)
 800bbd0:	429c      	cmp	r4, r3
 800bbd2:	d12b      	bne.n	800bc2c <__swbuf_r+0x70>
 800bbd4:	686c      	ldr	r4, [r5, #4]
 800bbd6:	69a3      	ldr	r3, [r4, #24]
 800bbd8:	60a3      	str	r3, [r4, #8]
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	071a      	lsls	r2, r3, #28
 800bbde:	d52f      	bpl.n	800bc40 <__swbuf_r+0x84>
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	b36b      	cbz	r3, 800bc40 <__swbuf_r+0x84>
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	6820      	ldr	r0, [r4, #0]
 800bbe8:	1ac0      	subs	r0, r0, r3
 800bbea:	6963      	ldr	r3, [r4, #20]
 800bbec:	b2f6      	uxtb	r6, r6
 800bbee:	4283      	cmp	r3, r0
 800bbf0:	4637      	mov	r7, r6
 800bbf2:	dc04      	bgt.n	800bbfe <__swbuf_r+0x42>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f926 	bl	800be48 <_fflush_r>
 800bbfc:	bb30      	cbnz	r0, 800bc4c <__swbuf_r+0x90>
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	60a3      	str	r3, [r4, #8]
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	6022      	str	r2, [r4, #0]
 800bc0a:	701e      	strb	r6, [r3, #0]
 800bc0c:	6963      	ldr	r3, [r4, #20]
 800bc0e:	3001      	adds	r0, #1
 800bc10:	4283      	cmp	r3, r0
 800bc12:	d004      	beq.n	800bc1e <__swbuf_r+0x62>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	07db      	lsls	r3, r3, #31
 800bc18:	d506      	bpl.n	800bc28 <__swbuf_r+0x6c>
 800bc1a:	2e0a      	cmp	r6, #10
 800bc1c:	d104      	bne.n	800bc28 <__swbuf_r+0x6c>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 f911 	bl	800be48 <_fflush_r>
 800bc26:	b988      	cbnz	r0, 800bc4c <__swbuf_r+0x90>
 800bc28:	4638      	mov	r0, r7
 800bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <__swbuf_r+0x9c>)
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d101      	bne.n	800bc36 <__swbuf_r+0x7a>
 800bc32:	68ac      	ldr	r4, [r5, #8]
 800bc34:	e7cf      	b.n	800bbd6 <__swbuf_r+0x1a>
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <__swbuf_r+0xa0>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	bf08      	it	eq
 800bc3c:	68ec      	ldreq	r4, [r5, #12]
 800bc3e:	e7ca      	b.n	800bbd6 <__swbuf_r+0x1a>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4628      	mov	r0, r5
 800bc44:	f000 f80c 	bl	800bc60 <__swsetup_r>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0cb      	beq.n	800bbe4 <__swbuf_r+0x28>
 800bc4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc50:	e7ea      	b.n	800bc28 <__swbuf_r+0x6c>
 800bc52:	bf00      	nop
 800bc54:	0800d878 	.word	0x0800d878
 800bc58:	0800d898 	.word	0x0800d898
 800bc5c:	0800d858 	.word	0x0800d858

0800bc60 <__swsetup_r>:
 800bc60:	4b32      	ldr	r3, [pc, #200]	; (800bd2c <__swsetup_r+0xcc>)
 800bc62:	b570      	push	{r4, r5, r6, lr}
 800bc64:	681d      	ldr	r5, [r3, #0]
 800bc66:	4606      	mov	r6, r0
 800bc68:	460c      	mov	r4, r1
 800bc6a:	b125      	cbz	r5, 800bc76 <__swsetup_r+0x16>
 800bc6c:	69ab      	ldr	r3, [r5, #24]
 800bc6e:	b913      	cbnz	r3, 800bc76 <__swsetup_r+0x16>
 800bc70:	4628      	mov	r0, r5
 800bc72:	f000 f97d 	bl	800bf70 <__sinit>
 800bc76:	4b2e      	ldr	r3, [pc, #184]	; (800bd30 <__swsetup_r+0xd0>)
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d10f      	bne.n	800bc9c <__swsetup_r+0x3c>
 800bc7c:	686c      	ldr	r4, [r5, #4]
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc84:	0719      	lsls	r1, r3, #28
 800bc86:	d42c      	bmi.n	800bce2 <__swsetup_r+0x82>
 800bc88:	06dd      	lsls	r5, r3, #27
 800bc8a:	d411      	bmi.n	800bcb0 <__swsetup_r+0x50>
 800bc8c:	2309      	movs	r3, #9
 800bc8e:	6033      	str	r3, [r6, #0]
 800bc90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc9a:	e03e      	b.n	800bd1a <__swsetup_r+0xba>
 800bc9c:	4b25      	ldr	r3, [pc, #148]	; (800bd34 <__swsetup_r+0xd4>)
 800bc9e:	429c      	cmp	r4, r3
 800bca0:	d101      	bne.n	800bca6 <__swsetup_r+0x46>
 800bca2:	68ac      	ldr	r4, [r5, #8]
 800bca4:	e7eb      	b.n	800bc7e <__swsetup_r+0x1e>
 800bca6:	4b24      	ldr	r3, [pc, #144]	; (800bd38 <__swsetup_r+0xd8>)
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	bf08      	it	eq
 800bcac:	68ec      	ldreq	r4, [r5, #12]
 800bcae:	e7e6      	b.n	800bc7e <__swsetup_r+0x1e>
 800bcb0:	0758      	lsls	r0, r3, #29
 800bcb2:	d512      	bpl.n	800bcda <__swsetup_r+0x7a>
 800bcb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb6:	b141      	cbz	r1, 800bcca <__swsetup_r+0x6a>
 800bcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcbc:	4299      	cmp	r1, r3
 800bcbe:	d002      	beq.n	800bcc6 <__swsetup_r+0x66>
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f000 fa5b 	bl	800c17c <_free_r>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6363      	str	r3, [r4, #52]	; 0x34
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6063      	str	r3, [r4, #4]
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f043 0308 	orr.w	r3, r3, #8
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	b94b      	cbnz	r3, 800bcfa <__swsetup_r+0x9a>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcf0:	d003      	beq.n	800bcfa <__swsetup_r+0x9a>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f000 fa01 	bl	800c0fc <__smakebuf_r>
 800bcfa:	89a0      	ldrh	r0, [r4, #12]
 800bcfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd00:	f010 0301 	ands.w	r3, r0, #1
 800bd04:	d00a      	beq.n	800bd1c <__swsetup_r+0xbc>
 800bd06:	2300      	movs	r3, #0
 800bd08:	60a3      	str	r3, [r4, #8]
 800bd0a:	6963      	ldr	r3, [r4, #20]
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	61a3      	str	r3, [r4, #24]
 800bd10:	6923      	ldr	r3, [r4, #16]
 800bd12:	b943      	cbnz	r3, 800bd26 <__swsetup_r+0xc6>
 800bd14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd18:	d1ba      	bne.n	800bc90 <__swsetup_r+0x30>
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	0781      	lsls	r1, r0, #30
 800bd1e:	bf58      	it	pl
 800bd20:	6963      	ldrpl	r3, [r4, #20]
 800bd22:	60a3      	str	r3, [r4, #8]
 800bd24:	e7f4      	b.n	800bd10 <__swsetup_r+0xb0>
 800bd26:	2000      	movs	r0, #0
 800bd28:	e7f7      	b.n	800bd1a <__swsetup_r+0xba>
 800bd2a:	bf00      	nop
 800bd2c:	20000028 	.word	0x20000028
 800bd30:	0800d878 	.word	0x0800d878
 800bd34:	0800d898 	.word	0x0800d898
 800bd38:	0800d858 	.word	0x0800d858

0800bd3c <__sflush_r>:
 800bd3c:	898a      	ldrh	r2, [r1, #12]
 800bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd42:	4605      	mov	r5, r0
 800bd44:	0710      	lsls	r0, r2, #28
 800bd46:	460c      	mov	r4, r1
 800bd48:	d458      	bmi.n	800bdfc <__sflush_r+0xc0>
 800bd4a:	684b      	ldr	r3, [r1, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dc05      	bgt.n	800bd5c <__sflush_r+0x20>
 800bd50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	dc02      	bgt.n	800bd5c <__sflush_r+0x20>
 800bd56:	2000      	movs	r0, #0
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	d0f9      	beq.n	800bd56 <__sflush_r+0x1a>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd68:	682f      	ldr	r7, [r5, #0]
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	d032      	beq.n	800bdd4 <__sflush_r+0x98>
 800bd6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	075a      	lsls	r2, r3, #29
 800bd74:	d505      	bpl.n	800bd82 <__sflush_r+0x46>
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	1ac0      	subs	r0, r0, r3
 800bd7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd7c:	b10b      	cbz	r3, 800bd82 <__sflush_r+0x46>
 800bd7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd80:	1ac0      	subs	r0, r0, r3
 800bd82:	2300      	movs	r3, #0
 800bd84:	4602      	mov	r2, r0
 800bd86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd88:	6a21      	ldr	r1, [r4, #32]
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b0      	blx	r6
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	d106      	bne.n	800bda2 <__sflush_r+0x66>
 800bd94:	6829      	ldr	r1, [r5, #0]
 800bd96:	291d      	cmp	r1, #29
 800bd98:	d82c      	bhi.n	800bdf4 <__sflush_r+0xb8>
 800bd9a:	4a2a      	ldr	r2, [pc, #168]	; (800be44 <__sflush_r+0x108>)
 800bd9c:	40ca      	lsrs	r2, r1
 800bd9e:	07d6      	lsls	r6, r2, #31
 800bda0:	d528      	bpl.n	800bdf4 <__sflush_r+0xb8>
 800bda2:	2200      	movs	r2, #0
 800bda4:	6062      	str	r2, [r4, #4]
 800bda6:	04d9      	lsls	r1, r3, #19
 800bda8:	6922      	ldr	r2, [r4, #16]
 800bdaa:	6022      	str	r2, [r4, #0]
 800bdac:	d504      	bpl.n	800bdb8 <__sflush_r+0x7c>
 800bdae:	1c42      	adds	r2, r0, #1
 800bdb0:	d101      	bne.n	800bdb6 <__sflush_r+0x7a>
 800bdb2:	682b      	ldr	r3, [r5, #0]
 800bdb4:	b903      	cbnz	r3, 800bdb8 <__sflush_r+0x7c>
 800bdb6:	6560      	str	r0, [r4, #84]	; 0x54
 800bdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdba:	602f      	str	r7, [r5, #0]
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d0ca      	beq.n	800bd56 <__sflush_r+0x1a>
 800bdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc4:	4299      	cmp	r1, r3
 800bdc6:	d002      	beq.n	800bdce <__sflush_r+0x92>
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f000 f9d7 	bl	800c17c <_free_r>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdd2:	e7c1      	b.n	800bd58 <__sflush_r+0x1c>
 800bdd4:	6a21      	ldr	r1, [r4, #32]
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b0      	blx	r6
 800bddc:	1c41      	adds	r1, r0, #1
 800bdde:	d1c7      	bne.n	800bd70 <__sflush_r+0x34>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0c4      	beq.n	800bd70 <__sflush_r+0x34>
 800bde6:	2b1d      	cmp	r3, #29
 800bde8:	d001      	beq.n	800bdee <__sflush_r+0xb2>
 800bdea:	2b16      	cmp	r3, #22
 800bdec:	d101      	bne.n	800bdf2 <__sflush_r+0xb6>
 800bdee:	602f      	str	r7, [r5, #0]
 800bdf0:	e7b1      	b.n	800bd56 <__sflush_r+0x1a>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	e7ad      	b.n	800bd58 <__sflush_r+0x1c>
 800bdfc:	690f      	ldr	r7, [r1, #16]
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	d0a9      	beq.n	800bd56 <__sflush_r+0x1a>
 800be02:	0793      	lsls	r3, r2, #30
 800be04:	680e      	ldr	r6, [r1, #0]
 800be06:	bf08      	it	eq
 800be08:	694b      	ldreq	r3, [r1, #20]
 800be0a:	600f      	str	r7, [r1, #0]
 800be0c:	bf18      	it	ne
 800be0e:	2300      	movne	r3, #0
 800be10:	eba6 0807 	sub.w	r8, r6, r7
 800be14:	608b      	str	r3, [r1, #8]
 800be16:	f1b8 0f00 	cmp.w	r8, #0
 800be1a:	dd9c      	ble.n	800bd56 <__sflush_r+0x1a>
 800be1c:	6a21      	ldr	r1, [r4, #32]
 800be1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be20:	4643      	mov	r3, r8
 800be22:	463a      	mov	r2, r7
 800be24:	4628      	mov	r0, r5
 800be26:	47b0      	blx	r6
 800be28:	2800      	cmp	r0, #0
 800be2a:	dc06      	bgt.n	800be3a <__sflush_r+0xfe>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be38:	e78e      	b.n	800bd58 <__sflush_r+0x1c>
 800be3a:	4407      	add	r7, r0
 800be3c:	eba8 0800 	sub.w	r8, r8, r0
 800be40:	e7e9      	b.n	800be16 <__sflush_r+0xda>
 800be42:	bf00      	nop
 800be44:	20400001 	.word	0x20400001

0800be48 <_fflush_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	690b      	ldr	r3, [r1, #16]
 800be4c:	4605      	mov	r5, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	b913      	cbnz	r3, 800be58 <_fflush_r+0x10>
 800be52:	2500      	movs	r5, #0
 800be54:	4628      	mov	r0, r5
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	b118      	cbz	r0, 800be62 <_fflush_r+0x1a>
 800be5a:	6983      	ldr	r3, [r0, #24]
 800be5c:	b90b      	cbnz	r3, 800be62 <_fflush_r+0x1a>
 800be5e:	f000 f887 	bl	800bf70 <__sinit>
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <_fflush_r+0x6c>)
 800be64:	429c      	cmp	r4, r3
 800be66:	d11b      	bne.n	800bea0 <_fflush_r+0x58>
 800be68:	686c      	ldr	r4, [r5, #4]
 800be6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0ef      	beq.n	800be52 <_fflush_r+0xa>
 800be72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be74:	07d0      	lsls	r0, r2, #31
 800be76:	d404      	bmi.n	800be82 <_fflush_r+0x3a>
 800be78:	0599      	lsls	r1, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_fflush_r+0x3a>
 800be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7e:	f000 f915 	bl	800c0ac <__retarget_lock_acquire_recursive>
 800be82:	4628      	mov	r0, r5
 800be84:	4621      	mov	r1, r4
 800be86:	f7ff ff59 	bl	800bd3c <__sflush_r>
 800be8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be8c:	07da      	lsls	r2, r3, #31
 800be8e:	4605      	mov	r5, r0
 800be90:	d4e0      	bmi.n	800be54 <_fflush_r+0xc>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	059b      	lsls	r3, r3, #22
 800be96:	d4dd      	bmi.n	800be54 <_fflush_r+0xc>
 800be98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be9a:	f000 f908 	bl	800c0ae <__retarget_lock_release_recursive>
 800be9e:	e7d9      	b.n	800be54 <_fflush_r+0xc>
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <_fflush_r+0x70>)
 800bea2:	429c      	cmp	r4, r3
 800bea4:	d101      	bne.n	800beaa <_fflush_r+0x62>
 800bea6:	68ac      	ldr	r4, [r5, #8]
 800bea8:	e7df      	b.n	800be6a <_fflush_r+0x22>
 800beaa:	4b04      	ldr	r3, [pc, #16]	; (800bebc <_fflush_r+0x74>)
 800beac:	429c      	cmp	r4, r3
 800beae:	bf08      	it	eq
 800beb0:	68ec      	ldreq	r4, [r5, #12]
 800beb2:	e7da      	b.n	800be6a <_fflush_r+0x22>
 800beb4:	0800d878 	.word	0x0800d878
 800beb8:	0800d898 	.word	0x0800d898
 800bebc:	0800d858 	.word	0x0800d858

0800bec0 <std>:
 800bec0:	2300      	movs	r3, #0
 800bec2:	b510      	push	{r4, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	e9c0 3300 	strd	r3, r3, [r0]
 800beca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bece:	6083      	str	r3, [r0, #8]
 800bed0:	8181      	strh	r1, [r0, #12]
 800bed2:	6643      	str	r3, [r0, #100]	; 0x64
 800bed4:	81c2      	strh	r2, [r0, #14]
 800bed6:	6183      	str	r3, [r0, #24]
 800bed8:	4619      	mov	r1, r3
 800beda:	2208      	movs	r2, #8
 800bedc:	305c      	adds	r0, #92	; 0x5c
 800bede:	f7ff fdc3 	bl	800ba68 <memset>
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <std+0x38>)
 800bee4:	6263      	str	r3, [r4, #36]	; 0x24
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <std+0x3c>)
 800bee8:	62a3      	str	r3, [r4, #40]	; 0x28
 800beea:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <std+0x40>)
 800beec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <std+0x44>)
 800bef0:	6224      	str	r4, [r4, #32]
 800bef2:	6323      	str	r3, [r4, #48]	; 0x30
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	bf00      	nop
 800bef8:	0800c939 	.word	0x0800c939
 800befc:	0800c95b 	.word	0x0800c95b
 800bf00:	0800c993 	.word	0x0800c993
 800bf04:	0800c9b7 	.word	0x0800c9b7

0800bf08 <_cleanup_r>:
 800bf08:	4901      	ldr	r1, [pc, #4]	; (800bf10 <_cleanup_r+0x8>)
 800bf0a:	f000 b8af 	b.w	800c06c <_fwalk_reent>
 800bf0e:	bf00      	nop
 800bf10:	0800be49 	.word	0x0800be49

0800bf14 <__sfmoreglue>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	2268      	movs	r2, #104	; 0x68
 800bf18:	1e4d      	subs	r5, r1, #1
 800bf1a:	4355      	muls	r5, r2
 800bf1c:	460e      	mov	r6, r1
 800bf1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf22:	f000 f997 	bl	800c254 <_malloc_r>
 800bf26:	4604      	mov	r4, r0
 800bf28:	b140      	cbz	r0, 800bf3c <__sfmoreglue+0x28>
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	e9c0 1600 	strd	r1, r6, [r0]
 800bf30:	300c      	adds	r0, #12
 800bf32:	60a0      	str	r0, [r4, #8]
 800bf34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf38:	f7ff fd96 	bl	800ba68 <memset>
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}

0800bf40 <__sfp_lock_acquire>:
 800bf40:	4801      	ldr	r0, [pc, #4]	; (800bf48 <__sfp_lock_acquire+0x8>)
 800bf42:	f000 b8b3 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	200017c9 	.word	0x200017c9

0800bf4c <__sfp_lock_release>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__sfp_lock_release+0x8>)
 800bf4e:	f000 b8ae 	b.w	800c0ae <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	200017c9 	.word	0x200017c9

0800bf58 <__sinit_lock_acquire>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sinit_lock_acquire+0x8>)
 800bf5a:	f000 b8a7 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	200017ca 	.word	0x200017ca

0800bf64 <__sinit_lock_release>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sinit_lock_release+0x8>)
 800bf66:	f000 b8a2 	b.w	800c0ae <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	200017ca 	.word	0x200017ca

0800bf70 <__sinit>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	f7ff fff0 	bl	800bf58 <__sinit_lock_acquire>
 800bf78:	69a3      	ldr	r3, [r4, #24]
 800bf7a:	b11b      	cbz	r3, 800bf84 <__sinit+0x14>
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f7ff bff0 	b.w	800bf64 <__sinit_lock_release>
 800bf84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf88:	6523      	str	r3, [r4, #80]	; 0x50
 800bf8a:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <__sinit+0x68>)
 800bf8c:	4a13      	ldr	r2, [pc, #76]	; (800bfdc <__sinit+0x6c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	bf04      	itt	eq
 800bf96:	2301      	moveq	r3, #1
 800bf98:	61a3      	streq	r3, [r4, #24]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 f820 	bl	800bfe0 <__sfp>
 800bfa0:	6060      	str	r0, [r4, #4]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 f81c 	bl	800bfe0 <__sfp>
 800bfa8:	60a0      	str	r0, [r4, #8]
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 f818 	bl	800bfe0 <__sfp>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	60e0      	str	r0, [r4, #12]
 800bfb4:	2104      	movs	r1, #4
 800bfb6:	6860      	ldr	r0, [r4, #4]
 800bfb8:	f7ff ff82 	bl	800bec0 <std>
 800bfbc:	68a0      	ldr	r0, [r4, #8]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	2109      	movs	r1, #9
 800bfc2:	f7ff ff7d 	bl	800bec0 <std>
 800bfc6:	68e0      	ldr	r0, [r4, #12]
 800bfc8:	2202      	movs	r2, #2
 800bfca:	2112      	movs	r1, #18
 800bfcc:	f7ff ff78 	bl	800bec0 <std>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	61a3      	str	r3, [r4, #24]
 800bfd4:	e7d2      	b.n	800bf7c <__sinit+0xc>
 800bfd6:	bf00      	nop
 800bfd8:	0800d854 	.word	0x0800d854
 800bfdc:	0800bf09 	.word	0x0800bf09

0800bfe0 <__sfp>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	f7ff ffac 	bl	800bf40 <__sfp_lock_acquire>
 800bfe8:	4b1e      	ldr	r3, [pc, #120]	; (800c064 <__sfp+0x84>)
 800bfea:	681e      	ldr	r6, [r3, #0]
 800bfec:	69b3      	ldr	r3, [r6, #24]
 800bfee:	b913      	cbnz	r3, 800bff6 <__sfp+0x16>
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ffbd 	bl	800bf70 <__sinit>
 800bff6:	3648      	adds	r6, #72	; 0x48
 800bff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	d503      	bpl.n	800c008 <__sfp+0x28>
 800c000:	6833      	ldr	r3, [r6, #0]
 800c002:	b30b      	cbz	r3, 800c048 <__sfp+0x68>
 800c004:	6836      	ldr	r6, [r6, #0]
 800c006:	e7f7      	b.n	800bff8 <__sfp+0x18>
 800c008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c00c:	b9d5      	cbnz	r5, 800c044 <__sfp+0x64>
 800c00e:	4b16      	ldr	r3, [pc, #88]	; (800c068 <__sfp+0x88>)
 800c010:	60e3      	str	r3, [r4, #12]
 800c012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c016:	6665      	str	r5, [r4, #100]	; 0x64
 800c018:	f000 f847 	bl	800c0aa <__retarget_lock_init_recursive>
 800c01c:	f7ff ff96 	bl	800bf4c <__sfp_lock_release>
 800c020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c028:	6025      	str	r5, [r4, #0]
 800c02a:	61a5      	str	r5, [r4, #24]
 800c02c:	2208      	movs	r2, #8
 800c02e:	4629      	mov	r1, r5
 800c030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c034:	f7ff fd18 	bl	800ba68 <memset>
 800c038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c040:	4620      	mov	r0, r4
 800c042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c044:	3468      	adds	r4, #104	; 0x68
 800c046:	e7d9      	b.n	800bffc <__sfp+0x1c>
 800c048:	2104      	movs	r1, #4
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7ff ff62 	bl	800bf14 <__sfmoreglue>
 800c050:	4604      	mov	r4, r0
 800c052:	6030      	str	r0, [r6, #0]
 800c054:	2800      	cmp	r0, #0
 800c056:	d1d5      	bne.n	800c004 <__sfp+0x24>
 800c058:	f7ff ff78 	bl	800bf4c <__sfp_lock_release>
 800c05c:	230c      	movs	r3, #12
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	e7ee      	b.n	800c040 <__sfp+0x60>
 800c062:	bf00      	nop
 800c064:	0800d854 	.word	0x0800d854
 800c068:	ffff0001 	.word	0xffff0001

0800c06c <_fwalk_reent>:
 800c06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c070:	4606      	mov	r6, r0
 800c072:	4688      	mov	r8, r1
 800c074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c078:	2700      	movs	r7, #0
 800c07a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c07e:	f1b9 0901 	subs.w	r9, r9, #1
 800c082:	d505      	bpl.n	800c090 <_fwalk_reent+0x24>
 800c084:	6824      	ldr	r4, [r4, #0]
 800c086:	2c00      	cmp	r4, #0
 800c088:	d1f7      	bne.n	800c07a <_fwalk_reent+0xe>
 800c08a:	4638      	mov	r0, r7
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	89ab      	ldrh	r3, [r5, #12]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d907      	bls.n	800c0a6 <_fwalk_reent+0x3a>
 800c096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c09a:	3301      	adds	r3, #1
 800c09c:	d003      	beq.n	800c0a6 <_fwalk_reent+0x3a>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	47c0      	blx	r8
 800c0a4:	4307      	orrs	r7, r0
 800c0a6:	3568      	adds	r5, #104	; 0x68
 800c0a8:	e7e9      	b.n	800c07e <_fwalk_reent+0x12>

0800c0aa <__retarget_lock_init_recursive>:
 800c0aa:	4770      	bx	lr

0800c0ac <__retarget_lock_acquire_recursive>:
 800c0ac:	4770      	bx	lr

0800c0ae <__retarget_lock_release_recursive>:
 800c0ae:	4770      	bx	lr

0800c0b0 <__swhatbuf_r>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	b096      	sub	sp, #88	; 0x58
 800c0bc:	4614      	mov	r4, r2
 800c0be:	461d      	mov	r5, r3
 800c0c0:	da08      	bge.n	800c0d4 <__swhatbuf_r+0x24>
 800c0c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	602a      	str	r2, [r5, #0]
 800c0ca:	061a      	lsls	r2, r3, #24
 800c0cc:	d410      	bmi.n	800c0f0 <__swhatbuf_r+0x40>
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	e00e      	b.n	800c0f2 <__swhatbuf_r+0x42>
 800c0d4:	466a      	mov	r2, sp
 800c0d6:	f000 fca1 	bl	800ca1c <_fstat_r>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	dbf1      	blt.n	800c0c2 <__swhatbuf_r+0x12>
 800c0de:	9a01      	ldr	r2, [sp, #4]
 800c0e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0e8:	425a      	negs	r2, r3
 800c0ea:	415a      	adcs	r2, r3
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	e7ee      	b.n	800c0ce <__swhatbuf_r+0x1e>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	b016      	add	sp, #88	; 0x58
 800c0f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0fc <__smakebuf_r>:
 800c0fc:	898b      	ldrh	r3, [r1, #12]
 800c0fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c100:	079d      	lsls	r5, r3, #30
 800c102:	4606      	mov	r6, r0
 800c104:	460c      	mov	r4, r1
 800c106:	d507      	bpl.n	800c118 <__smakebuf_r+0x1c>
 800c108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	2301      	movs	r3, #1
 800c112:	6163      	str	r3, [r4, #20]
 800c114:	b002      	add	sp, #8
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	ab01      	add	r3, sp, #4
 800c11a:	466a      	mov	r2, sp
 800c11c:	f7ff ffc8 	bl	800c0b0 <__swhatbuf_r>
 800c120:	9900      	ldr	r1, [sp, #0]
 800c122:	4605      	mov	r5, r0
 800c124:	4630      	mov	r0, r6
 800c126:	f000 f895 	bl	800c254 <_malloc_r>
 800c12a:	b948      	cbnz	r0, 800c140 <__smakebuf_r+0x44>
 800c12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c130:	059a      	lsls	r2, r3, #22
 800c132:	d4ef      	bmi.n	800c114 <__smakebuf_r+0x18>
 800c134:	f023 0303 	bic.w	r3, r3, #3
 800c138:	f043 0302 	orr.w	r3, r3, #2
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	e7e3      	b.n	800c108 <__smakebuf_r+0xc>
 800c140:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <__smakebuf_r+0x7c>)
 800c142:	62b3      	str	r3, [r6, #40]	; 0x28
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14c:	81a3      	strh	r3, [r4, #12]
 800c14e:	9b00      	ldr	r3, [sp, #0]
 800c150:	6163      	str	r3, [r4, #20]
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	6120      	str	r0, [r4, #16]
 800c156:	b15b      	cbz	r3, 800c170 <__smakebuf_r+0x74>
 800c158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c15c:	4630      	mov	r0, r6
 800c15e:	f000 fc6f 	bl	800ca40 <_isatty_r>
 800c162:	b128      	cbz	r0, 800c170 <__smakebuf_r+0x74>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f023 0303 	bic.w	r3, r3, #3
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	89a0      	ldrh	r0, [r4, #12]
 800c172:	4305      	orrs	r5, r0
 800c174:	81a5      	strh	r5, [r4, #12]
 800c176:	e7cd      	b.n	800c114 <__smakebuf_r+0x18>
 800c178:	0800bf09 	.word	0x0800bf09

0800c17c <_free_r>:
 800c17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c17e:	2900      	cmp	r1, #0
 800c180:	d044      	beq.n	800c20c <_free_r+0x90>
 800c182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c186:	9001      	str	r0, [sp, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f1a1 0404 	sub.w	r4, r1, #4
 800c18e:	bfb8      	it	lt
 800c190:	18e4      	addlt	r4, r4, r3
 800c192:	f000 fc77 	bl	800ca84 <__malloc_lock>
 800c196:	4a1e      	ldr	r2, [pc, #120]	; (800c210 <_free_r+0x94>)
 800c198:	9801      	ldr	r0, [sp, #4]
 800c19a:	6813      	ldr	r3, [r2, #0]
 800c19c:	b933      	cbnz	r3, 800c1ac <_free_r+0x30>
 800c19e:	6063      	str	r3, [r4, #4]
 800c1a0:	6014      	str	r4, [r2, #0]
 800c1a2:	b003      	add	sp, #12
 800c1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1a8:	f000 bc72 	b.w	800ca90 <__malloc_unlock>
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d908      	bls.n	800c1c2 <_free_r+0x46>
 800c1b0:	6825      	ldr	r5, [r4, #0]
 800c1b2:	1961      	adds	r1, r4, r5
 800c1b4:	428b      	cmp	r3, r1
 800c1b6:	bf01      	itttt	eq
 800c1b8:	6819      	ldreq	r1, [r3, #0]
 800c1ba:	685b      	ldreq	r3, [r3, #4]
 800c1bc:	1949      	addeq	r1, r1, r5
 800c1be:	6021      	streq	r1, [r4, #0]
 800c1c0:	e7ed      	b.n	800c19e <_free_r+0x22>
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	b10b      	cbz	r3, 800c1cc <_free_r+0x50>
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	d9fa      	bls.n	800c1c2 <_free_r+0x46>
 800c1cc:	6811      	ldr	r1, [r2, #0]
 800c1ce:	1855      	adds	r5, r2, r1
 800c1d0:	42a5      	cmp	r5, r4
 800c1d2:	d10b      	bne.n	800c1ec <_free_r+0x70>
 800c1d4:	6824      	ldr	r4, [r4, #0]
 800c1d6:	4421      	add	r1, r4
 800c1d8:	1854      	adds	r4, r2, r1
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	6011      	str	r1, [r2, #0]
 800c1de:	d1e0      	bne.n	800c1a2 <_free_r+0x26>
 800c1e0:	681c      	ldr	r4, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	6053      	str	r3, [r2, #4]
 800c1e6:	4421      	add	r1, r4
 800c1e8:	6011      	str	r1, [r2, #0]
 800c1ea:	e7da      	b.n	800c1a2 <_free_r+0x26>
 800c1ec:	d902      	bls.n	800c1f4 <_free_r+0x78>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6003      	str	r3, [r0, #0]
 800c1f2:	e7d6      	b.n	800c1a2 <_free_r+0x26>
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf04      	itt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	6063      	str	r3, [r4, #4]
 800c202:	bf04      	itt	eq
 800c204:	1949      	addeq	r1, r1, r5
 800c206:	6021      	streq	r1, [r4, #0]
 800c208:	6054      	str	r4, [r2, #4]
 800c20a:	e7ca      	b.n	800c1a2 <_free_r+0x26>
 800c20c:	b003      	add	sp, #12
 800c20e:	bd30      	pop	{r4, r5, pc}
 800c210:	200017cc 	.word	0x200017cc

0800c214 <sbrk_aligned>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	4e0e      	ldr	r6, [pc, #56]	; (800c250 <sbrk_aligned+0x3c>)
 800c218:	460c      	mov	r4, r1
 800c21a:	6831      	ldr	r1, [r6, #0]
 800c21c:	4605      	mov	r5, r0
 800c21e:	b911      	cbnz	r1, 800c226 <sbrk_aligned+0x12>
 800c220:	f000 fb7a 	bl	800c918 <_sbrk_r>
 800c224:	6030      	str	r0, [r6, #0]
 800c226:	4621      	mov	r1, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	f000 fb75 	bl	800c918 <_sbrk_r>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	d00a      	beq.n	800c248 <sbrk_aligned+0x34>
 800c232:	1cc4      	adds	r4, r0, #3
 800c234:	f024 0403 	bic.w	r4, r4, #3
 800c238:	42a0      	cmp	r0, r4
 800c23a:	d007      	beq.n	800c24c <sbrk_aligned+0x38>
 800c23c:	1a21      	subs	r1, r4, r0
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 fb6a 	bl	800c918 <_sbrk_r>
 800c244:	3001      	adds	r0, #1
 800c246:	d101      	bne.n	800c24c <sbrk_aligned+0x38>
 800c248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c24c:	4620      	mov	r0, r4
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	200017d0 	.word	0x200017d0

0800c254 <_malloc_r>:
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	1ccd      	adds	r5, r1, #3
 800c25a:	f025 0503 	bic.w	r5, r5, #3
 800c25e:	3508      	adds	r5, #8
 800c260:	2d0c      	cmp	r5, #12
 800c262:	bf38      	it	cc
 800c264:	250c      	movcc	r5, #12
 800c266:	2d00      	cmp	r5, #0
 800c268:	4607      	mov	r7, r0
 800c26a:	db01      	blt.n	800c270 <_malloc_r+0x1c>
 800c26c:	42a9      	cmp	r1, r5
 800c26e:	d905      	bls.n	800c27c <_malloc_r+0x28>
 800c270:	230c      	movs	r3, #12
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	2600      	movs	r6, #0
 800c276:	4630      	mov	r0, r6
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	4e2e      	ldr	r6, [pc, #184]	; (800c338 <_malloc_r+0xe4>)
 800c27e:	f000 fc01 	bl	800ca84 <__malloc_lock>
 800c282:	6833      	ldr	r3, [r6, #0]
 800c284:	461c      	mov	r4, r3
 800c286:	bb34      	cbnz	r4, 800c2d6 <_malloc_r+0x82>
 800c288:	4629      	mov	r1, r5
 800c28a:	4638      	mov	r0, r7
 800c28c:	f7ff ffc2 	bl	800c214 <sbrk_aligned>
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	4604      	mov	r4, r0
 800c294:	d14d      	bne.n	800c332 <_malloc_r+0xde>
 800c296:	6834      	ldr	r4, [r6, #0]
 800c298:	4626      	mov	r6, r4
 800c29a:	2e00      	cmp	r6, #0
 800c29c:	d140      	bne.n	800c320 <_malloc_r+0xcc>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	eb04 0803 	add.w	r8, r4, r3
 800c2a8:	f000 fb36 	bl	800c918 <_sbrk_r>
 800c2ac:	4580      	cmp	r8, r0
 800c2ae:	d13a      	bne.n	800c326 <_malloc_r+0xd2>
 800c2b0:	6821      	ldr	r1, [r4, #0]
 800c2b2:	3503      	adds	r5, #3
 800c2b4:	1a6d      	subs	r5, r5, r1
 800c2b6:	f025 0503 	bic.w	r5, r5, #3
 800c2ba:	3508      	adds	r5, #8
 800c2bc:	2d0c      	cmp	r5, #12
 800c2be:	bf38      	it	cc
 800c2c0:	250c      	movcc	r5, #12
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	f7ff ffa5 	bl	800c214 <sbrk_aligned>
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d02b      	beq.n	800c326 <_malloc_r+0xd2>
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	442b      	add	r3, r5
 800c2d2:	6023      	str	r3, [r4, #0]
 800c2d4:	e00e      	b.n	800c2f4 <_malloc_r+0xa0>
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	1b52      	subs	r2, r2, r5
 800c2da:	d41e      	bmi.n	800c31a <_malloc_r+0xc6>
 800c2dc:	2a0b      	cmp	r2, #11
 800c2de:	d916      	bls.n	800c30e <_malloc_r+0xba>
 800c2e0:	1961      	adds	r1, r4, r5
 800c2e2:	42a3      	cmp	r3, r4
 800c2e4:	6025      	str	r5, [r4, #0]
 800c2e6:	bf18      	it	ne
 800c2e8:	6059      	strne	r1, [r3, #4]
 800c2ea:	6863      	ldr	r3, [r4, #4]
 800c2ec:	bf08      	it	eq
 800c2ee:	6031      	streq	r1, [r6, #0]
 800c2f0:	5162      	str	r2, [r4, r5]
 800c2f2:	604b      	str	r3, [r1, #4]
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f104 060b 	add.w	r6, r4, #11
 800c2fa:	f000 fbc9 	bl	800ca90 <__malloc_unlock>
 800c2fe:	f026 0607 	bic.w	r6, r6, #7
 800c302:	1d23      	adds	r3, r4, #4
 800c304:	1af2      	subs	r2, r6, r3
 800c306:	d0b6      	beq.n	800c276 <_malloc_r+0x22>
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	50a3      	str	r3, [r4, r2]
 800c30c:	e7b3      	b.n	800c276 <_malloc_r+0x22>
 800c30e:	6862      	ldr	r2, [r4, #4]
 800c310:	42a3      	cmp	r3, r4
 800c312:	bf0c      	ite	eq
 800c314:	6032      	streq	r2, [r6, #0]
 800c316:	605a      	strne	r2, [r3, #4]
 800c318:	e7ec      	b.n	800c2f4 <_malloc_r+0xa0>
 800c31a:	4623      	mov	r3, r4
 800c31c:	6864      	ldr	r4, [r4, #4]
 800c31e:	e7b2      	b.n	800c286 <_malloc_r+0x32>
 800c320:	4634      	mov	r4, r6
 800c322:	6876      	ldr	r6, [r6, #4]
 800c324:	e7b9      	b.n	800c29a <_malloc_r+0x46>
 800c326:	230c      	movs	r3, #12
 800c328:	603b      	str	r3, [r7, #0]
 800c32a:	4638      	mov	r0, r7
 800c32c:	f000 fbb0 	bl	800ca90 <__malloc_unlock>
 800c330:	e7a1      	b.n	800c276 <_malloc_r+0x22>
 800c332:	6025      	str	r5, [r4, #0]
 800c334:	e7de      	b.n	800c2f4 <_malloc_r+0xa0>
 800c336:	bf00      	nop
 800c338:	200017cc 	.word	0x200017cc

0800c33c <__sfputc_r>:
 800c33c:	6893      	ldr	r3, [r2, #8]
 800c33e:	3b01      	subs	r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	b410      	push	{r4}
 800c344:	6093      	str	r3, [r2, #8]
 800c346:	da08      	bge.n	800c35a <__sfputc_r+0x1e>
 800c348:	6994      	ldr	r4, [r2, #24]
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	db01      	blt.n	800c352 <__sfputc_r+0x16>
 800c34e:	290a      	cmp	r1, #10
 800c350:	d103      	bne.n	800c35a <__sfputc_r+0x1e>
 800c352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c356:	f7ff bc31 	b.w	800bbbc <__swbuf_r>
 800c35a:	6813      	ldr	r3, [r2, #0]
 800c35c:	1c58      	adds	r0, r3, #1
 800c35e:	6010      	str	r0, [r2, #0]
 800c360:	7019      	strb	r1, [r3, #0]
 800c362:	4608      	mov	r0, r1
 800c364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <__sfputs_r>:
 800c36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36c:	4606      	mov	r6, r0
 800c36e:	460f      	mov	r7, r1
 800c370:	4614      	mov	r4, r2
 800c372:	18d5      	adds	r5, r2, r3
 800c374:	42ac      	cmp	r4, r5
 800c376:	d101      	bne.n	800c37c <__sfputs_r+0x12>
 800c378:	2000      	movs	r0, #0
 800c37a:	e007      	b.n	800c38c <__sfputs_r+0x22>
 800c37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c380:	463a      	mov	r2, r7
 800c382:	4630      	mov	r0, r6
 800c384:	f7ff ffda 	bl	800c33c <__sfputc_r>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d1f3      	bne.n	800c374 <__sfputs_r+0xa>
 800c38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c390 <_vfiprintf_r>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	460d      	mov	r5, r1
 800c396:	b09d      	sub	sp, #116	; 0x74
 800c398:	4614      	mov	r4, r2
 800c39a:	4698      	mov	r8, r3
 800c39c:	4606      	mov	r6, r0
 800c39e:	b118      	cbz	r0, 800c3a8 <_vfiprintf_r+0x18>
 800c3a0:	6983      	ldr	r3, [r0, #24]
 800c3a2:	b90b      	cbnz	r3, 800c3a8 <_vfiprintf_r+0x18>
 800c3a4:	f7ff fde4 	bl	800bf70 <__sinit>
 800c3a8:	4b89      	ldr	r3, [pc, #548]	; (800c5d0 <_vfiprintf_r+0x240>)
 800c3aa:	429d      	cmp	r5, r3
 800c3ac:	d11b      	bne.n	800c3e6 <_vfiprintf_r+0x56>
 800c3ae:	6875      	ldr	r5, [r6, #4]
 800c3b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b2:	07d9      	lsls	r1, r3, #31
 800c3b4:	d405      	bmi.n	800c3c2 <_vfiprintf_r+0x32>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	059a      	lsls	r2, r3, #22
 800c3ba:	d402      	bmi.n	800c3c2 <_vfiprintf_r+0x32>
 800c3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3be:	f7ff fe75 	bl	800c0ac <__retarget_lock_acquire_recursive>
 800c3c2:	89ab      	ldrh	r3, [r5, #12]
 800c3c4:	071b      	lsls	r3, r3, #28
 800c3c6:	d501      	bpl.n	800c3cc <_vfiprintf_r+0x3c>
 800c3c8:	692b      	ldr	r3, [r5, #16]
 800c3ca:	b9eb      	cbnz	r3, 800c408 <_vfiprintf_r+0x78>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff fc46 	bl	800bc60 <__swsetup_r>
 800c3d4:	b1c0      	cbz	r0, 800c408 <_vfiprintf_r+0x78>
 800c3d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d8:	07dc      	lsls	r4, r3, #31
 800c3da:	d50e      	bpl.n	800c3fa <_vfiprintf_r+0x6a>
 800c3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3e0:	b01d      	add	sp, #116	; 0x74
 800c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	4b7b      	ldr	r3, [pc, #492]	; (800c5d4 <_vfiprintf_r+0x244>)
 800c3e8:	429d      	cmp	r5, r3
 800c3ea:	d101      	bne.n	800c3f0 <_vfiprintf_r+0x60>
 800c3ec:	68b5      	ldr	r5, [r6, #8]
 800c3ee:	e7df      	b.n	800c3b0 <_vfiprintf_r+0x20>
 800c3f0:	4b79      	ldr	r3, [pc, #484]	; (800c5d8 <_vfiprintf_r+0x248>)
 800c3f2:	429d      	cmp	r5, r3
 800c3f4:	bf08      	it	eq
 800c3f6:	68f5      	ldreq	r5, [r6, #12]
 800c3f8:	e7da      	b.n	800c3b0 <_vfiprintf_r+0x20>
 800c3fa:	89ab      	ldrh	r3, [r5, #12]
 800c3fc:	0598      	lsls	r0, r3, #22
 800c3fe:	d4ed      	bmi.n	800c3dc <_vfiprintf_r+0x4c>
 800c400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c402:	f7ff fe54 	bl	800c0ae <__retarget_lock_release_recursive>
 800c406:	e7e9      	b.n	800c3dc <_vfiprintf_r+0x4c>
 800c408:	2300      	movs	r3, #0
 800c40a:	9309      	str	r3, [sp, #36]	; 0x24
 800c40c:	2320      	movs	r3, #32
 800c40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c412:	f8cd 800c 	str.w	r8, [sp, #12]
 800c416:	2330      	movs	r3, #48	; 0x30
 800c418:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5dc <_vfiprintf_r+0x24c>
 800c41c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c420:	f04f 0901 	mov.w	r9, #1
 800c424:	4623      	mov	r3, r4
 800c426:	469a      	mov	sl, r3
 800c428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c42c:	b10a      	cbz	r2, 800c432 <_vfiprintf_r+0xa2>
 800c42e:	2a25      	cmp	r2, #37	; 0x25
 800c430:	d1f9      	bne.n	800c426 <_vfiprintf_r+0x96>
 800c432:	ebba 0b04 	subs.w	fp, sl, r4
 800c436:	d00b      	beq.n	800c450 <_vfiprintf_r+0xc0>
 800c438:	465b      	mov	r3, fp
 800c43a:	4622      	mov	r2, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	4630      	mov	r0, r6
 800c440:	f7ff ff93 	bl	800c36a <__sfputs_r>
 800c444:	3001      	adds	r0, #1
 800c446:	f000 80aa 	beq.w	800c59e <_vfiprintf_r+0x20e>
 800c44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c44c:	445a      	add	r2, fp
 800c44e:	9209      	str	r2, [sp, #36]	; 0x24
 800c450:	f89a 3000 	ldrb.w	r3, [sl]
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80a2 	beq.w	800c59e <_vfiprintf_r+0x20e>
 800c45a:	2300      	movs	r3, #0
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c464:	f10a 0a01 	add.w	sl, sl, #1
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	9307      	str	r3, [sp, #28]
 800c46c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c470:	931a      	str	r3, [sp, #104]	; 0x68
 800c472:	4654      	mov	r4, sl
 800c474:	2205      	movs	r2, #5
 800c476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47a:	4858      	ldr	r0, [pc, #352]	; (800c5dc <_vfiprintf_r+0x24c>)
 800c47c:	f7f3 fe88 	bl	8000190 <memchr>
 800c480:	9a04      	ldr	r2, [sp, #16]
 800c482:	b9d8      	cbnz	r0, 800c4bc <_vfiprintf_r+0x12c>
 800c484:	06d1      	lsls	r1, r2, #27
 800c486:	bf44      	itt	mi
 800c488:	2320      	movmi	r3, #32
 800c48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c48e:	0713      	lsls	r3, r2, #28
 800c490:	bf44      	itt	mi
 800c492:	232b      	movmi	r3, #43	; 0x2b
 800c494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c498:	f89a 3000 	ldrb.w	r3, [sl]
 800c49c:	2b2a      	cmp	r3, #42	; 0x2a
 800c49e:	d015      	beq.n	800c4cc <_vfiprintf_r+0x13c>
 800c4a0:	9a07      	ldr	r2, [sp, #28]
 800c4a2:	4654      	mov	r4, sl
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f04f 0c0a 	mov.w	ip, #10
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4b0:	3b30      	subs	r3, #48	; 0x30
 800c4b2:	2b09      	cmp	r3, #9
 800c4b4:	d94e      	bls.n	800c554 <_vfiprintf_r+0x1c4>
 800c4b6:	b1b0      	cbz	r0, 800c4e6 <_vfiprintf_r+0x156>
 800c4b8:	9207      	str	r2, [sp, #28]
 800c4ba:	e014      	b.n	800c4e6 <_vfiprintf_r+0x156>
 800c4bc:	eba0 0308 	sub.w	r3, r0, r8
 800c4c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	46a2      	mov	sl, r4
 800c4ca:	e7d2      	b.n	800c472 <_vfiprintf_r+0xe2>
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	1d19      	adds	r1, r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	9103      	str	r1, [sp, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bfbb      	ittet	lt
 800c4d8:	425b      	neglt	r3, r3
 800c4da:	f042 0202 	orrlt.w	r2, r2, #2
 800c4de:	9307      	strge	r3, [sp, #28]
 800c4e0:	9307      	strlt	r3, [sp, #28]
 800c4e2:	bfb8      	it	lt
 800c4e4:	9204      	strlt	r2, [sp, #16]
 800c4e6:	7823      	ldrb	r3, [r4, #0]
 800c4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ea:	d10c      	bne.n	800c506 <_vfiprintf_r+0x176>
 800c4ec:	7863      	ldrb	r3, [r4, #1]
 800c4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f0:	d135      	bne.n	800c55e <_vfiprintf_r+0x1ce>
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	1d1a      	adds	r2, r3, #4
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	9203      	str	r2, [sp, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bfb8      	it	lt
 800c4fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c502:	3402      	adds	r4, #2
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5ec <_vfiprintf_r+0x25c>
 800c50a:	7821      	ldrb	r1, [r4, #0]
 800c50c:	2203      	movs	r2, #3
 800c50e:	4650      	mov	r0, sl
 800c510:	f7f3 fe3e 	bl	8000190 <memchr>
 800c514:	b140      	cbz	r0, 800c528 <_vfiprintf_r+0x198>
 800c516:	2340      	movs	r3, #64	; 0x40
 800c518:	eba0 000a 	sub.w	r0, r0, sl
 800c51c:	fa03 f000 	lsl.w	r0, r3, r0
 800c520:	9b04      	ldr	r3, [sp, #16]
 800c522:	4303      	orrs	r3, r0
 800c524:	3401      	adds	r4, #1
 800c526:	9304      	str	r3, [sp, #16]
 800c528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52c:	482c      	ldr	r0, [pc, #176]	; (800c5e0 <_vfiprintf_r+0x250>)
 800c52e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c532:	2206      	movs	r2, #6
 800c534:	f7f3 fe2c 	bl	8000190 <memchr>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d03f      	beq.n	800c5bc <_vfiprintf_r+0x22c>
 800c53c:	4b29      	ldr	r3, [pc, #164]	; (800c5e4 <_vfiprintf_r+0x254>)
 800c53e:	bb1b      	cbnz	r3, 800c588 <_vfiprintf_r+0x1f8>
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	3307      	adds	r3, #7
 800c544:	f023 0307 	bic.w	r3, r3, #7
 800c548:	3308      	adds	r3, #8
 800c54a:	9303      	str	r3, [sp, #12]
 800c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54e:	443b      	add	r3, r7
 800c550:	9309      	str	r3, [sp, #36]	; 0x24
 800c552:	e767      	b.n	800c424 <_vfiprintf_r+0x94>
 800c554:	fb0c 3202 	mla	r2, ip, r2, r3
 800c558:	460c      	mov	r4, r1
 800c55a:	2001      	movs	r0, #1
 800c55c:	e7a5      	b.n	800c4aa <_vfiprintf_r+0x11a>
 800c55e:	2300      	movs	r3, #0
 800c560:	3401      	adds	r4, #1
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	4619      	mov	r1, r3
 800c566:	f04f 0c0a 	mov.w	ip, #10
 800c56a:	4620      	mov	r0, r4
 800c56c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c570:	3a30      	subs	r2, #48	; 0x30
 800c572:	2a09      	cmp	r2, #9
 800c574:	d903      	bls.n	800c57e <_vfiprintf_r+0x1ee>
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0c5      	beq.n	800c506 <_vfiprintf_r+0x176>
 800c57a:	9105      	str	r1, [sp, #20]
 800c57c:	e7c3      	b.n	800c506 <_vfiprintf_r+0x176>
 800c57e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c582:	4604      	mov	r4, r0
 800c584:	2301      	movs	r3, #1
 800c586:	e7f0      	b.n	800c56a <_vfiprintf_r+0x1da>
 800c588:	ab03      	add	r3, sp, #12
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	462a      	mov	r2, r5
 800c58e:	4b16      	ldr	r3, [pc, #88]	; (800c5e8 <_vfiprintf_r+0x258>)
 800c590:	a904      	add	r1, sp, #16
 800c592:	4630      	mov	r0, r6
 800c594:	f3af 8000 	nop.w
 800c598:	4607      	mov	r7, r0
 800c59a:	1c78      	adds	r0, r7, #1
 800c59c:	d1d6      	bne.n	800c54c <_vfiprintf_r+0x1bc>
 800c59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5a0:	07d9      	lsls	r1, r3, #31
 800c5a2:	d405      	bmi.n	800c5b0 <_vfiprintf_r+0x220>
 800c5a4:	89ab      	ldrh	r3, [r5, #12]
 800c5a6:	059a      	lsls	r2, r3, #22
 800c5a8:	d402      	bmi.n	800c5b0 <_vfiprintf_r+0x220>
 800c5aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ac:	f7ff fd7f 	bl	800c0ae <__retarget_lock_release_recursive>
 800c5b0:	89ab      	ldrh	r3, [r5, #12]
 800c5b2:	065b      	lsls	r3, r3, #25
 800c5b4:	f53f af12 	bmi.w	800c3dc <_vfiprintf_r+0x4c>
 800c5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ba:	e711      	b.n	800c3e0 <_vfiprintf_r+0x50>
 800c5bc:	ab03      	add	r3, sp, #12
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	462a      	mov	r2, r5
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <_vfiprintf_r+0x258>)
 800c5c4:	a904      	add	r1, sp, #16
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f000 f880 	bl	800c6cc <_printf_i>
 800c5cc:	e7e4      	b.n	800c598 <_vfiprintf_r+0x208>
 800c5ce:	bf00      	nop
 800c5d0:	0800d878 	.word	0x0800d878
 800c5d4:	0800d898 	.word	0x0800d898
 800c5d8:	0800d858 	.word	0x0800d858
 800c5dc:	0800d8b8 	.word	0x0800d8b8
 800c5e0:	0800d8c2 	.word	0x0800d8c2
 800c5e4:	00000000 	.word	0x00000000
 800c5e8:	0800c36b 	.word	0x0800c36b
 800c5ec:	0800d8be 	.word	0x0800d8be

0800c5f0 <_printf_common>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	4616      	mov	r6, r2
 800c5f6:	4699      	mov	r9, r3
 800c5f8:	688a      	ldr	r2, [r1, #8]
 800c5fa:	690b      	ldr	r3, [r1, #16]
 800c5fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c600:	4293      	cmp	r3, r2
 800c602:	bfb8      	it	lt
 800c604:	4613      	movlt	r3, r2
 800c606:	6033      	str	r3, [r6, #0]
 800c608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c60c:	4607      	mov	r7, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b10a      	cbz	r2, 800c616 <_printf_common+0x26>
 800c612:	3301      	adds	r3, #1
 800c614:	6033      	str	r3, [r6, #0]
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	0699      	lsls	r1, r3, #26
 800c61a:	bf42      	ittt	mi
 800c61c:	6833      	ldrmi	r3, [r6, #0]
 800c61e:	3302      	addmi	r3, #2
 800c620:	6033      	strmi	r3, [r6, #0]
 800c622:	6825      	ldr	r5, [r4, #0]
 800c624:	f015 0506 	ands.w	r5, r5, #6
 800c628:	d106      	bne.n	800c638 <_printf_common+0x48>
 800c62a:	f104 0a19 	add.w	sl, r4, #25
 800c62e:	68e3      	ldr	r3, [r4, #12]
 800c630:	6832      	ldr	r2, [r6, #0]
 800c632:	1a9b      	subs	r3, r3, r2
 800c634:	42ab      	cmp	r3, r5
 800c636:	dc26      	bgt.n	800c686 <_printf_common+0x96>
 800c638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c63c:	1e13      	subs	r3, r2, #0
 800c63e:	6822      	ldr	r2, [r4, #0]
 800c640:	bf18      	it	ne
 800c642:	2301      	movne	r3, #1
 800c644:	0692      	lsls	r2, r2, #26
 800c646:	d42b      	bmi.n	800c6a0 <_printf_common+0xb0>
 800c648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c64c:	4649      	mov	r1, r9
 800c64e:	4638      	mov	r0, r7
 800c650:	47c0      	blx	r8
 800c652:	3001      	adds	r0, #1
 800c654:	d01e      	beq.n	800c694 <_printf_common+0xa4>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	68e5      	ldr	r5, [r4, #12]
 800c65a:	6832      	ldr	r2, [r6, #0]
 800c65c:	f003 0306 	and.w	r3, r3, #6
 800c660:	2b04      	cmp	r3, #4
 800c662:	bf08      	it	eq
 800c664:	1aad      	subeq	r5, r5, r2
 800c666:	68a3      	ldr	r3, [r4, #8]
 800c668:	6922      	ldr	r2, [r4, #16]
 800c66a:	bf0c      	ite	eq
 800c66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c670:	2500      	movne	r5, #0
 800c672:	4293      	cmp	r3, r2
 800c674:	bfc4      	itt	gt
 800c676:	1a9b      	subgt	r3, r3, r2
 800c678:	18ed      	addgt	r5, r5, r3
 800c67a:	2600      	movs	r6, #0
 800c67c:	341a      	adds	r4, #26
 800c67e:	42b5      	cmp	r5, r6
 800c680:	d11a      	bne.n	800c6b8 <_printf_common+0xc8>
 800c682:	2000      	movs	r0, #0
 800c684:	e008      	b.n	800c698 <_printf_common+0xa8>
 800c686:	2301      	movs	r3, #1
 800c688:	4652      	mov	r2, sl
 800c68a:	4649      	mov	r1, r9
 800c68c:	4638      	mov	r0, r7
 800c68e:	47c0      	blx	r8
 800c690:	3001      	adds	r0, #1
 800c692:	d103      	bne.n	800c69c <_printf_common+0xac>
 800c694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69c:	3501      	adds	r5, #1
 800c69e:	e7c6      	b.n	800c62e <_printf_common+0x3e>
 800c6a0:	18e1      	adds	r1, r4, r3
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	2030      	movs	r0, #48	; 0x30
 800c6a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6aa:	4422      	add	r2, r4
 800c6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6b4:	3302      	adds	r3, #2
 800c6b6:	e7c7      	b.n	800c648 <_printf_common+0x58>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	4649      	mov	r1, r9
 800c6be:	4638      	mov	r0, r7
 800c6c0:	47c0      	blx	r8
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	d0e6      	beq.n	800c694 <_printf_common+0xa4>
 800c6c6:	3601      	adds	r6, #1
 800c6c8:	e7d9      	b.n	800c67e <_printf_common+0x8e>
	...

0800c6cc <_printf_i>:
 800c6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	7e0f      	ldrb	r7, [r1, #24]
 800c6d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6d4:	2f78      	cmp	r7, #120	; 0x78
 800c6d6:	4691      	mov	r9, r2
 800c6d8:	4680      	mov	r8, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	469a      	mov	sl, r3
 800c6de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6e2:	d807      	bhi.n	800c6f4 <_printf_i+0x28>
 800c6e4:	2f62      	cmp	r7, #98	; 0x62
 800c6e6:	d80a      	bhi.n	800c6fe <_printf_i+0x32>
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	f000 80d8 	beq.w	800c89e <_printf_i+0x1d2>
 800c6ee:	2f58      	cmp	r7, #88	; 0x58
 800c6f0:	f000 80a3 	beq.w	800c83a <_printf_i+0x16e>
 800c6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6fc:	e03a      	b.n	800c774 <_printf_i+0xa8>
 800c6fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c702:	2b15      	cmp	r3, #21
 800c704:	d8f6      	bhi.n	800c6f4 <_printf_i+0x28>
 800c706:	a101      	add	r1, pc, #4	; (adr r1, 800c70c <_printf_i+0x40>)
 800c708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c70c:	0800c765 	.word	0x0800c765
 800c710:	0800c779 	.word	0x0800c779
 800c714:	0800c6f5 	.word	0x0800c6f5
 800c718:	0800c6f5 	.word	0x0800c6f5
 800c71c:	0800c6f5 	.word	0x0800c6f5
 800c720:	0800c6f5 	.word	0x0800c6f5
 800c724:	0800c779 	.word	0x0800c779
 800c728:	0800c6f5 	.word	0x0800c6f5
 800c72c:	0800c6f5 	.word	0x0800c6f5
 800c730:	0800c6f5 	.word	0x0800c6f5
 800c734:	0800c6f5 	.word	0x0800c6f5
 800c738:	0800c885 	.word	0x0800c885
 800c73c:	0800c7a9 	.word	0x0800c7a9
 800c740:	0800c867 	.word	0x0800c867
 800c744:	0800c6f5 	.word	0x0800c6f5
 800c748:	0800c6f5 	.word	0x0800c6f5
 800c74c:	0800c8a7 	.word	0x0800c8a7
 800c750:	0800c6f5 	.word	0x0800c6f5
 800c754:	0800c7a9 	.word	0x0800c7a9
 800c758:	0800c6f5 	.word	0x0800c6f5
 800c75c:	0800c6f5 	.word	0x0800c6f5
 800c760:	0800c86f 	.word	0x0800c86f
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	602a      	str	r2, [r5, #0]
 800c76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c774:	2301      	movs	r3, #1
 800c776:	e0a3      	b.n	800c8c0 <_printf_i+0x1f4>
 800c778:	6820      	ldr	r0, [r4, #0]
 800c77a:	6829      	ldr	r1, [r5, #0]
 800c77c:	0606      	lsls	r6, r0, #24
 800c77e:	f101 0304 	add.w	r3, r1, #4
 800c782:	d50a      	bpl.n	800c79a <_printf_i+0xce>
 800c784:	680e      	ldr	r6, [r1, #0]
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	2e00      	cmp	r6, #0
 800c78a:	da03      	bge.n	800c794 <_printf_i+0xc8>
 800c78c:	232d      	movs	r3, #45	; 0x2d
 800c78e:	4276      	negs	r6, r6
 800c790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c794:	485e      	ldr	r0, [pc, #376]	; (800c910 <_printf_i+0x244>)
 800c796:	230a      	movs	r3, #10
 800c798:	e019      	b.n	800c7ce <_printf_i+0x102>
 800c79a:	680e      	ldr	r6, [r1, #0]
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7a2:	bf18      	it	ne
 800c7a4:	b236      	sxthne	r6, r6
 800c7a6:	e7ef      	b.n	800c788 <_printf_i+0xbc>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	6820      	ldr	r0, [r4, #0]
 800c7ac:	1d19      	adds	r1, r3, #4
 800c7ae:	6029      	str	r1, [r5, #0]
 800c7b0:	0601      	lsls	r1, r0, #24
 800c7b2:	d501      	bpl.n	800c7b8 <_printf_i+0xec>
 800c7b4:	681e      	ldr	r6, [r3, #0]
 800c7b6:	e002      	b.n	800c7be <_printf_i+0xf2>
 800c7b8:	0646      	lsls	r6, r0, #25
 800c7ba:	d5fb      	bpl.n	800c7b4 <_printf_i+0xe8>
 800c7bc:	881e      	ldrh	r6, [r3, #0]
 800c7be:	4854      	ldr	r0, [pc, #336]	; (800c910 <_printf_i+0x244>)
 800c7c0:	2f6f      	cmp	r7, #111	; 0x6f
 800c7c2:	bf0c      	ite	eq
 800c7c4:	2308      	moveq	r3, #8
 800c7c6:	230a      	movne	r3, #10
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7ce:	6865      	ldr	r5, [r4, #4]
 800c7d0:	60a5      	str	r5, [r4, #8]
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	bfa2      	ittt	ge
 800c7d6:	6821      	ldrge	r1, [r4, #0]
 800c7d8:	f021 0104 	bicge.w	r1, r1, #4
 800c7dc:	6021      	strge	r1, [r4, #0]
 800c7de:	b90e      	cbnz	r6, 800c7e4 <_printf_i+0x118>
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	d04d      	beq.n	800c880 <_printf_i+0x1b4>
 800c7e4:	4615      	mov	r5, r2
 800c7e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7ea:	fb03 6711 	mls	r7, r3, r1, r6
 800c7ee:	5dc7      	ldrb	r7, [r0, r7]
 800c7f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7f4:	4637      	mov	r7, r6
 800c7f6:	42bb      	cmp	r3, r7
 800c7f8:	460e      	mov	r6, r1
 800c7fa:	d9f4      	bls.n	800c7e6 <_printf_i+0x11a>
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	d10b      	bne.n	800c818 <_printf_i+0x14c>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	07de      	lsls	r6, r3, #31
 800c804:	d508      	bpl.n	800c818 <_printf_i+0x14c>
 800c806:	6923      	ldr	r3, [r4, #16]
 800c808:	6861      	ldr	r1, [r4, #4]
 800c80a:	4299      	cmp	r1, r3
 800c80c:	bfde      	ittt	le
 800c80e:	2330      	movle	r3, #48	; 0x30
 800c810:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c814:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c818:	1b52      	subs	r2, r2, r5
 800c81a:	6122      	str	r2, [r4, #16]
 800c81c:	f8cd a000 	str.w	sl, [sp]
 800c820:	464b      	mov	r3, r9
 800c822:	aa03      	add	r2, sp, #12
 800c824:	4621      	mov	r1, r4
 800c826:	4640      	mov	r0, r8
 800c828:	f7ff fee2 	bl	800c5f0 <_printf_common>
 800c82c:	3001      	adds	r0, #1
 800c82e:	d14c      	bne.n	800c8ca <_printf_i+0x1fe>
 800c830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c834:	b004      	add	sp, #16
 800c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83a:	4835      	ldr	r0, [pc, #212]	; (800c910 <_printf_i+0x244>)
 800c83c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c840:	6829      	ldr	r1, [r5, #0]
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	f851 6b04 	ldr.w	r6, [r1], #4
 800c848:	6029      	str	r1, [r5, #0]
 800c84a:	061d      	lsls	r5, r3, #24
 800c84c:	d514      	bpl.n	800c878 <_printf_i+0x1ac>
 800c84e:	07df      	lsls	r7, r3, #31
 800c850:	bf44      	itt	mi
 800c852:	f043 0320 	orrmi.w	r3, r3, #32
 800c856:	6023      	strmi	r3, [r4, #0]
 800c858:	b91e      	cbnz	r6, 800c862 <_printf_i+0x196>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	f023 0320 	bic.w	r3, r3, #32
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	2310      	movs	r3, #16
 800c864:	e7b0      	b.n	800c7c8 <_printf_i+0xfc>
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	f043 0320 	orr.w	r3, r3, #32
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	2378      	movs	r3, #120	; 0x78
 800c870:	4828      	ldr	r0, [pc, #160]	; (800c914 <_printf_i+0x248>)
 800c872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c876:	e7e3      	b.n	800c840 <_printf_i+0x174>
 800c878:	0659      	lsls	r1, r3, #25
 800c87a:	bf48      	it	mi
 800c87c:	b2b6      	uxthmi	r6, r6
 800c87e:	e7e6      	b.n	800c84e <_printf_i+0x182>
 800c880:	4615      	mov	r5, r2
 800c882:	e7bb      	b.n	800c7fc <_printf_i+0x130>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	6826      	ldr	r6, [r4, #0]
 800c888:	6961      	ldr	r1, [r4, #20]
 800c88a:	1d18      	adds	r0, r3, #4
 800c88c:	6028      	str	r0, [r5, #0]
 800c88e:	0635      	lsls	r5, r6, #24
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	d501      	bpl.n	800c898 <_printf_i+0x1cc>
 800c894:	6019      	str	r1, [r3, #0]
 800c896:	e002      	b.n	800c89e <_printf_i+0x1d2>
 800c898:	0670      	lsls	r0, r6, #25
 800c89a:	d5fb      	bpl.n	800c894 <_printf_i+0x1c8>
 800c89c:	8019      	strh	r1, [r3, #0]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	6123      	str	r3, [r4, #16]
 800c8a2:	4615      	mov	r5, r2
 800c8a4:	e7ba      	b.n	800c81c <_printf_i+0x150>
 800c8a6:	682b      	ldr	r3, [r5, #0]
 800c8a8:	1d1a      	adds	r2, r3, #4
 800c8aa:	602a      	str	r2, [r5, #0]
 800c8ac:	681d      	ldr	r5, [r3, #0]
 800c8ae:	6862      	ldr	r2, [r4, #4]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f7f3 fc6c 	bl	8000190 <memchr>
 800c8b8:	b108      	cbz	r0, 800c8be <_printf_i+0x1f2>
 800c8ba:	1b40      	subs	r0, r0, r5
 800c8bc:	6060      	str	r0, [r4, #4]
 800c8be:	6863      	ldr	r3, [r4, #4]
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c8:	e7a8      	b.n	800c81c <_printf_i+0x150>
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	4649      	mov	r1, r9
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	47d0      	blx	sl
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	d0ab      	beq.n	800c830 <_printf_i+0x164>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	079b      	lsls	r3, r3, #30
 800c8dc:	d413      	bmi.n	800c906 <_printf_i+0x23a>
 800c8de:	68e0      	ldr	r0, [r4, #12]
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	4298      	cmp	r0, r3
 800c8e4:	bfb8      	it	lt
 800c8e6:	4618      	movlt	r0, r3
 800c8e8:	e7a4      	b.n	800c834 <_printf_i+0x168>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	4632      	mov	r2, r6
 800c8ee:	4649      	mov	r1, r9
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	47d0      	blx	sl
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d09b      	beq.n	800c830 <_printf_i+0x164>
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	68e3      	ldr	r3, [r4, #12]
 800c8fc:	9903      	ldr	r1, [sp, #12]
 800c8fe:	1a5b      	subs	r3, r3, r1
 800c900:	42ab      	cmp	r3, r5
 800c902:	dcf2      	bgt.n	800c8ea <_printf_i+0x21e>
 800c904:	e7eb      	b.n	800c8de <_printf_i+0x212>
 800c906:	2500      	movs	r5, #0
 800c908:	f104 0619 	add.w	r6, r4, #25
 800c90c:	e7f5      	b.n	800c8fa <_printf_i+0x22e>
 800c90e:	bf00      	nop
 800c910:	0800d8c9 	.word	0x0800d8c9
 800c914:	0800d8da 	.word	0x0800d8da

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	; (800c934 <_sbrk_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f5 fffe 	bl	8002924 <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	200017d4 	.word	0x200017d4

0800c938 <__sread>:
 800c938:	b510      	push	{r4, lr}
 800c93a:	460c      	mov	r4, r1
 800c93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c940:	f000 f8ac 	bl	800ca9c <_read_r>
 800c944:	2800      	cmp	r0, #0
 800c946:	bfab      	itete	ge
 800c948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c94a:	89a3      	ldrhlt	r3, [r4, #12]
 800c94c:	181b      	addge	r3, r3, r0
 800c94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c952:	bfac      	ite	ge
 800c954:	6563      	strge	r3, [r4, #84]	; 0x54
 800c956:	81a3      	strhlt	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__swrite>:
 800c95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c95e:	461f      	mov	r7, r3
 800c960:	898b      	ldrh	r3, [r1, #12]
 800c962:	05db      	lsls	r3, r3, #23
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	4616      	mov	r6, r2
 800c96a:	d505      	bpl.n	800c978 <__swrite+0x1e>
 800c96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c970:	2302      	movs	r3, #2
 800c972:	2200      	movs	r2, #0
 800c974:	f000 f874 	bl	800ca60 <_lseek_r>
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	4628      	mov	r0, r5
 800c98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c98e:	f000 b823 	b.w	800c9d8 <_write_r>

0800c992 <__sseek>:
 800c992:	b510      	push	{r4, lr}
 800c994:	460c      	mov	r4, r1
 800c996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99a:	f000 f861 	bl	800ca60 <_lseek_r>
 800c99e:	1c43      	adds	r3, r0, #1
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	bf15      	itete	ne
 800c9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9ae:	81a3      	strheq	r3, [r4, #12]
 800c9b0:	bf18      	it	ne
 800c9b2:	81a3      	strhne	r3, [r4, #12]
 800c9b4:	bd10      	pop	{r4, pc}

0800c9b6 <__sclose>:
 800c9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ba:	f000 b81f 	b.w	800c9fc <_close_r>

0800c9be <strchr>:
 800c9be:	b2c9      	uxtb	r1, r1
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c6:	b11a      	cbz	r2, 800c9d0 <strchr+0x12>
 800c9c8:	428a      	cmp	r2, r1
 800c9ca:	d1f9      	bne.n	800c9c0 <strchr+0x2>
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	4770      	bx	lr
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	bf18      	it	ne
 800c9d4:	2300      	movne	r3, #0
 800c9d6:	e7f9      	b.n	800c9cc <strchr+0xe>

0800c9d8 <_write_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4d07      	ldr	r5, [pc, #28]	; (800c9f8 <_write_r+0x20>)
 800c9dc:	4604      	mov	r4, r0
 800c9de:	4608      	mov	r0, r1
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	602a      	str	r2, [r5, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f7fc fe10 	bl	800960c <_write>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_write_r+0x1e>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_write_r+0x1e>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	200017d4 	.word	0x200017d4

0800c9fc <_close_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d06      	ldr	r5, [pc, #24]	; (800ca18 <_close_r+0x1c>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	f7f5 ff57 	bl	80028ba <_close>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_close_r+0x1a>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_close_r+0x1a>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	200017d4 	.word	0x200017d4

0800ca1c <_fstat_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d07      	ldr	r5, [pc, #28]	; (800ca3c <_fstat_r+0x20>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	4611      	mov	r1, r2
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	f7f5 ff52 	bl	80028d2 <_fstat>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d102      	bne.n	800ca38 <_fstat_r+0x1c>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	b103      	cbz	r3, 800ca38 <_fstat_r+0x1c>
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	bd38      	pop	{r3, r4, r5, pc}
 800ca3a:	bf00      	nop
 800ca3c:	200017d4 	.word	0x200017d4

0800ca40 <_isatty_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	; (800ca5c <_isatty_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f7f5 ff51 	bl	80028f2 <_isatty>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_isatty_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_isatty_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	200017d4 	.word	0x200017d4

0800ca60 <_lseek_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	; (800ca80 <_lseek_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f5 ff4a 	bl	8002908 <_lseek>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_lseek_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_lseek_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	200017d4 	.word	0x200017d4

0800ca84 <__malloc_lock>:
 800ca84:	4801      	ldr	r0, [pc, #4]	; (800ca8c <__malloc_lock+0x8>)
 800ca86:	f7ff bb11 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	200017c8 	.word	0x200017c8

0800ca90 <__malloc_unlock>:
 800ca90:	4801      	ldr	r0, [pc, #4]	; (800ca98 <__malloc_unlock+0x8>)
 800ca92:	f7ff bb0c 	b.w	800c0ae <__retarget_lock_release_recursive>
 800ca96:	bf00      	nop
 800ca98:	200017c8 	.word	0x200017c8

0800ca9c <_read_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d07      	ldr	r5, [pc, #28]	; (800cabc <_read_r+0x20>)
 800caa0:	4604      	mov	r4, r0
 800caa2:	4608      	mov	r0, r1
 800caa4:	4611      	mov	r1, r2
 800caa6:	2200      	movs	r2, #0
 800caa8:	602a      	str	r2, [r5, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	f7f5 fee8 	bl	8002880 <_read>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d102      	bne.n	800caba <_read_r+0x1e>
 800cab4:	682b      	ldr	r3, [r5, #0]
 800cab6:	b103      	cbz	r3, 800caba <_read_r+0x1e>
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	bd38      	pop	{r3, r4, r5, pc}
 800cabc:	200017d4 	.word	0x200017d4

0800cac0 <_init>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	bf00      	nop
 800cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac6:	bc08      	pop	{r3}
 800cac8:	469e      	mov	lr, r3
 800caca:	4770      	bx	lr

0800cacc <_fini>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr
