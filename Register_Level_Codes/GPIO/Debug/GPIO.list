
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000484  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800061c  08000624  00010624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800061c  0800061c  00010624  2**0
                  CONTENTS
  4 .ARM          00000000  0800061c  0800061c  00010624  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800061c  08000624  00010624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000624  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000624  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010624  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f66  00000000  00000000  00010654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c7  00000000  00000000  000115ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00011988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00011a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dcfd  00000000  00000000  00011b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000aea  00000000  00000000  0001f82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fd1f  00000000  00000000  00020317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00070036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002ec  00000000  00000000  00070088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000604 	.word	0x08000604

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000604 	.word	0x08000604

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	; (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <hal_gpio_configure_pin_mode>:
 * @param  pin_no : GPIO pin number
 * @param  mode   : mode to be configured
 * @retval None
*/
static void hal_gpio_configure_pin_mode(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint32_t mode)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	460b      	mov	r3, r1
 800021e:	607a      	str	r2, [r7, #4]
 8000220:	817b      	strh	r3, [r7, #10]
	GPIOx->MODER |= (mode << (2 * pin_no)); //Each bit takes 2 bits in the MODER Register
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	897b      	ldrh	r3, [r7, #10]
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	431a      	orrs	r2, r3
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr

08000242 <hal_gpio_configure_pin_otype>:
 * @param  pin_no : GPIO pin number
 * @param  op_type   : output type to be configured with
 * @retval None
*/
static void hal_gpio_configure_pin_otype(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint32_t op_type)
{
 8000242:	b480      	push	{r7}
 8000244:	b085      	sub	sp, #20
 8000246:	af00      	add	r7, sp, #0
 8000248:	60f8      	str	r0, [r7, #12]
 800024a:	460b      	mov	r3, r1
 800024c:	607a      	str	r2, [r7, #4]
 800024e:	817b      	strh	r3, [r7, #10]
	GPIOx->OTYPER |= (op_type << (2 * pin_no));
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	897b      	ldrh	r3, [r7, #10]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	6879      	ldr	r1, [r7, #4]
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	431a      	orrs	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	605a      	str	r2, [r3, #4]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <hal_gpio_configure_pin_speed>:
	* @param  pin_no : GPIO pin number
	* @param  speed   : value of the speed
	* @retval None
	*/
static void hal_gpio_configure_pin_speed(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint32_t speed)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	460b      	mov	r3, r1
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	817b      	strh	r3, [r7, #10]
	GPIOx->OSPEEDR |= (speed << (2 * pin_no));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	897b      	ldrh	r3, [r7, #10]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	431a      	orrs	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	609a      	str	r2, [r3, #8]
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <hal_gpio_configure_pin_pupd>:
 * @param  pin_no : GPIO pin number
 * @param  pupd   : specifies which resistor to activate
 * @retval None
*/
void hal_gpio_configure_pin_pupd(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint32_t pupd)
{
 800029e:	b480      	push	{r7}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	460b      	mov	r3, r1
 80002a8:	607a      	str	r2, [r7, #4]
 80002aa:	817b      	strh	r3, [r7, #10]
	 GPIOx->PUPDR |= (pupd << (2 * pin_no));
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	897b      	ldrh	r3, [r7, #10]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	6879      	ldr	r1, [r7, #4]
 80002b6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ba:	431a      	orrs	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	60da      	str	r2, [r3, #12]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <hal_gpio_init>:
 * @param  *GPIOx : GPIO Port Base address
 * @param  *gpio_pin_conf :Pointer to the pin conf structure sent by application
 * @retval None
*/
void hal_gpio_init(GPIO_TypeDef *GPIOx, gpio_pin_conf_t *gpio_pin_conf)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	hal_gpio_configure_pin_mode(GPIOx,gpio_pin_conf->pin, gpio_pin_conf->mode);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	b299      	uxth	r1, r3
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	461a      	mov	r2, r3
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff96 	bl	8000214 <hal_gpio_configure_pin_mode>
	hal_gpio_configure_pin_speed(GPIOx,gpio_pin_conf->pin, gpio_pin_conf->speed);
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	b299      	uxth	r1, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	461a      	mov	r2, r3
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f7ff ffbb 	bl	8000270 <hal_gpio_configure_pin_speed>
	hal_gpio_configure_pin_otype(GPIOx,gpio_pin_conf->pin, gpio_pin_conf->op_type);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	b299      	uxth	r1, r3
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	461a      	mov	r2, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ff9b 	bl	8000242 <hal_gpio_configure_pin_otype>
	hal_gpio_configure_pin_pupd(GPIOx,gpio_pin_conf->pin, gpio_pin_conf->pupd);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	b299      	uxth	r1, r3
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	461a      	mov	r2, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ffc0 	bl	800029e <hal_gpio_configure_pin_pupd>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <hal_gpio_read_from_pin>:
 * @param *GPIO	  : GPIO Port Base Address
 * 		   pin_no : GPIO Pin Number
 * @return uint8_t: Value Read
 */
uint8_t hal_gpio_read_from_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no)
{
 8000326:	b480      	push	{r7}
 8000328:	b085      	sub	sp, #20
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	value = ((GPIOx->IDR >> pin_no) & 0x00000001);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	691a      	ldr	r2, [r3, #16]
 8000336:	887b      	ldrh	r3, [r7, #2]
 8000338:	fa22 f303 	lsr.w	r3, r2, r3
 800033c:	b2db      	uxtb	r3, r3
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
	//Read the IDR then right shift by the value of pin number to get the input status value of the pin to LSB
	return value;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <hal_gpio_write_to_pin>:
 * 		   pin_no : GPIO Pin Number
 * 		   value  : Value to be written
 * @return None
 */
void hal_gpio_write_to_pin(GPIO_TypeDef *GPIOx, uint16_t pin_no, uint8_t value)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	460b      	mov	r3, r1
 800035c:	807b      	strh	r3, [r7, #2]
 800035e:	4613      	mov	r3, r2
 8000360:	707b      	strb	r3, [r7, #1]
	if (value)
 8000362:	787b      	ldrb	r3, [r7, #1]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d009      	beq.n	800037c <hal_gpio_write_to_pin+0x2a>
		GPIOx->ODR |= (1 << pin_no);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	887a      	ldrh	r2, [r7, #2]
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	431a      	orrs	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	615a      	str	r2, [r3, #20]
	else
		GPIOx->ODR &= ~(1 << pin_no);

}
 800037a:	e009      	b.n	8000390 <hal_gpio_write_to_pin+0x3e>
		GPIOx->ODR &= ~(1 << pin_no);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	887a      	ldrh	r2, [r7, #2]
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	43d2      	mvns	r2, r2
 800038a:	401a      	ands	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	615a      	str	r2, [r3, #20]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <hal_gpio_configure_interrupt>:
 * @param  pin_no 	  : GPIO pin number
 * @param  edge_sel   :  Triggering edge slection value of type "int_edge_sel_t"
 * @retval None
*/
void hal_gpio_configure_interrupt(uint16_t pin_no, int_edge_sel_t edge_sel)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	80fb      	strh	r3, [r7, #6]
 80003a8:	4613      	mov	r3, r2
 80003aa:	717b      	strb	r3, [r7, #5]
	if (edge_sel == INT_RISING_EDG)
 80003ac:	797b      	ldrb	r3, [r7, #5]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d10a      	bne.n	80003c8 <hal_gpio_configure_interrupt+0x2c>
		EXTI->RTSR |= (1 << pin_no);
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	88fa      	ldrh	r2, [r7, #6]
 80003b8:	2101      	movs	r1, #1
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	4611      	mov	r1, r2
 80003c0:	4a17      	ldr	r2, [pc, #92]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003c2:	430b      	orrs	r3, r1
 80003c4:	6093      	str	r3, [r2, #8]
	else if (edge_sel == INT_RISING_FALLING_EDGE)
	{
		EXTI->FTSR |= (1 << pin_no);
		EXTI->RTSR |= (1 << pin_no);
	}
}
 80003c6:	e024      	b.n	8000412 <hal_gpio_configure_interrupt+0x76>
	else if (edge_sel == INT_FALLING_EDGE)
 80003c8:	797b      	ldrb	r3, [r7, #5]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d10a      	bne.n	80003e4 <hal_gpio_configure_interrupt+0x48>
		EXTI->FTSR |= (1 << pin_no);
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	88fa      	ldrh	r2, [r7, #6]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003de:	430b      	orrs	r3, r1
 80003e0:	60d3      	str	r3, [r2, #12]
}
 80003e2:	e016      	b.n	8000412 <hal_gpio_configure_interrupt+0x76>
	else if (edge_sel == INT_RISING_FALLING_EDGE)
 80003e4:	797b      	ldrb	r3, [r7, #5]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d113      	bne.n	8000412 <hal_gpio_configure_interrupt+0x76>
		EXTI->FTSR |= (1 << pin_no);
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	88fa      	ldrh	r2, [r7, #6]
 80003f0:	2101      	movs	r1, #1
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a09      	ldr	r2, [pc, #36]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 80003fa:	430b      	orrs	r3, r1
 80003fc:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pin_no);
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	88fa      	ldrh	r2, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	4611      	mov	r1, r2
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <hal_gpio_configure_interrupt+0x84>)
 800040e:	430b      	orrs	r3, r1
 8000410:	6093      	str	r3, [r2, #8]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40013c00 	.word	0x40013c00

08000424 <hal_gpio_enable_interrupt>:
 * @param  pin_no 	: GPIO pin number
 * @param  irq_no   :  irq_number to be enabled in NVIC
 * @retval None
*/
void hal_gpio_enable_interrupt(uint16_t pin_no, IRQn_Type irq_no)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	460a      	mov	r2, r1
 800042e:	80fb      	strh	r3, [r7, #6]
 8000430:	4613      	mov	r3, r2
 8000432:	717b      	strb	r3, [r7, #5]
	EXTI->IMR |= (1 << pin_no);
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <hal_gpio_enable_interrupt+0x38>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	88fa      	ldrh	r2, [r7, #6]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <hal_gpio_enable_interrupt+0x38>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq_no);
 8000448:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fec3 	bl	80001d8 <__NVIC_EnableIRQ>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40013c00 	.word	0x40013c00

08000460 <hal_gpio_clear_interrupt>:
 * @brief  Clear the sticky interrupt pending bit if set
 * @param  pin_no : GPIO pin number
 * @retval None
*/
void hal_gpio_clear_interrupt(uint16_t pin)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
	if(EXTI->PR & (1 << pin))
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <hal_gpio_clear_interrupt+0x3c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	88fa      	ldrh	r2, [r7, #6]
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	4013      	ands	r3, r2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d009      	beq.n	8000490 <hal_gpio_clear_interrupt+0x30>
		EXTI->PR |= (1 << pin);
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <hal_gpio_clear_interrupt+0x3c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	88fa      	ldrh	r2, [r7, #6]
 8000482:	2101      	movs	r1, #1
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a04      	ldr	r2, [pc, #16]	; (800049c <hal_gpio_clear_interrupt+0x3c>)
 800048c:	430b      	orrs	r3, r1
 800048e:	6153      	str	r3, [r2, #20]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40013c00 	.word	0x40013c00

080004a0 <main>:
	* @retval None
	*/
void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin);

int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
    uint32_t i;
    led_init(); //Initialize teh LED
 80004a4:	f000 f812 	bl	80004cc <led_init>

    //Enable the clock for GPIO Port A
    _HAL_RCC_GPIOA_CLK_ENABLE_RCC();
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <main+0x28>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <main+0x28>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30

    //Configure Button Interrupt as Falling Edge
    hal_gpio_configure_interrupt(GPIO_BUTTON_PIN, INT_FALLING_EDGE);
 80004b4:	2101      	movs	r1, #1
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ff70 	bl	800039c <hal_gpio_configure_interrupt>
    //Enable the Interrupt at EXTI0 Line
    hal_gpio_enable_interrupt(GPIO_BUTTON_PIN, EXTI0_IRQn);
 80004bc:	2106      	movs	r1, #6
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ffb0 	bl	8000424 <hal_gpio_enable_interrupt>
    	led_turn_off(GPIOC, BLUE_LED);
    	for(i = 0; i < 50000; i++);
    }
#endif

    while(1);
 80004c4:	e7fe      	b.n	80004c4 <main+0x24>
 80004c6:	bf00      	nop
 80004c8:	40023800 	.word	0x40023800

080004cc <led_init>:
	* @brief  Initialize the LEDs
	* @param  None
	* @retval None
*/
void led_init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
	gpio_pin_conf_t led_pin_conf;
	//Enable the clock for GPIOC Port
	_HAL_RCC_GPIOC_CLK_ENABLE_RCC();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <led_init+0x38>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <led_init+0x38>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30

	led_pin_conf.pin = BLUE_LED;
 80004de:	230d      	movs	r3, #13
 80004e0:	603b      	str	r3, [r7, #0]
	led_pin_conf.mode = GPIO_PIN_OUTPUT_MODE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
	led_pin_conf.op_type = GPIO_PIN_OP_TYPE_PUSHPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
	led_pin_conf.speed = GPIO_PIN_SPEED_MEDIUM;
 80004ea:	2301      	movs	r3, #1
 80004ec:	613b      	str	r3, [r7, #16]
	led_pin_conf.pupd = GPIO_PIN_NO_PULLUPPUSHDOWN;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]

	hal_gpio_init(GPIOC, &led_pin_conf);
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <led_init+0x3c>)
 80004f8:	f7ff fee8 	bl	80002cc <hal_gpio_init>
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40023800 	.word	0x40023800
 8000508:	40020800 	.word	0x40020800

0800050c <led_toggle>:
	* @param  *GPIOx : Base address of the GPIO Port
	* @param  Pin : pin number of the LED
	* @retval None
*/
void led_toggle(GPIO_TypeDef *GPIOx, uint16_t pin)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
	if(hal_gpio_read_from_pin(GPIOx, pin))
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	4619      	mov	r1, r3
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff02 	bl	8000326 <hal_gpio_read_from_pin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <led_toggle+0x2a>
		hal_gpio_write_to_pin(GPIOx, pin, 0);
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	2200      	movs	r2, #0
 800052c:	4619      	mov	r1, r3
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff0f 	bl	8000352 <hal_gpio_write_to_pin>
	else
		hal_gpio_write_to_pin(GPIOx, pin, 1);
}
 8000534:	e005      	b.n	8000542 <led_toggle+0x36>
		hal_gpio_write_to_pin(GPIOx, pin, 1);
 8000536:	887b      	ldrh	r3, [r7, #2]
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff08 	bl	8000352 <hal_gpio_write_to_pin>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <EXTI0_IRQHandler>:
/**
	* @brief  ISR for the configured EXTI0 interrupt
	* @retval None
*/
void EXTI0_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	hal_gpio_clear_interrupt(GPIO_BUTTON_PIN);
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff ff85 	bl	8000460 <hal_gpio_clear_interrupt>
	/* Do your TASK here */
	led_toggle(GPIOD,BLUE_LED);
 8000556:	210d      	movs	r1, #13
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <EXTI0_IRQHandler+0x18>)
 800055a:	f7ff ffd7 	bl	800050c <led_toggle>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020c00 	.word	0x40020c00

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f000 f811 	bl	80005bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff ff81 	bl	80004a0 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005ac:	08000624 	.word	0x08000624
  ldr r2, =_sbss
 80005b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b4:	2000001c 	.word	0x2000001c

080005b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC_IRQHandler>
	...

080005bc <__libc_init_array>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	4d0d      	ldr	r5, [pc, #52]	; (80005f4 <__libc_init_array+0x38>)
 80005c0:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <__libc_init_array+0x3c>)
 80005c2:	1b64      	subs	r4, r4, r5
 80005c4:	10a4      	asrs	r4, r4, #2
 80005c6:	2600      	movs	r6, #0
 80005c8:	42a6      	cmp	r6, r4
 80005ca:	d109      	bne.n	80005e0 <__libc_init_array+0x24>
 80005cc:	4d0b      	ldr	r5, [pc, #44]	; (80005fc <__libc_init_array+0x40>)
 80005ce:	4c0c      	ldr	r4, [pc, #48]	; (8000600 <__libc_init_array+0x44>)
 80005d0:	f000 f818 	bl	8000604 <_init>
 80005d4:	1b64      	subs	r4, r4, r5
 80005d6:	10a4      	asrs	r4, r4, #2
 80005d8:	2600      	movs	r6, #0
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d105      	bne.n	80005ea <__libc_init_array+0x2e>
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e4:	4798      	blx	r3
 80005e6:	3601      	adds	r6, #1
 80005e8:	e7ee      	b.n	80005c8 <__libc_init_array+0xc>
 80005ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ee:	4798      	blx	r3
 80005f0:	3601      	adds	r6, #1
 80005f2:	e7f2      	b.n	80005da <__libc_init_array+0x1e>
 80005f4:	0800061c 	.word	0x0800061c
 80005f8:	0800061c 	.word	0x0800061c
 80005fc:	0800061c 	.word	0x0800061c
 8000600:	08000620 	.word	0x08000620

08000604 <_init>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr
